# EXAMPLES for GPE and GP
#
# BÖLÜM 3 -------------------------------------------------------------------

# Örnek 3.1.1: Soyağacı verisinin hazırlanması
# Soyağacı veri vektörleri 
hayvan <- c(1:10)
baba <- c(NA, NA, NA, 1, 1, NA, 5, 3, 7, 7)
ana <- c(NA, NA, NA, 2, 2, NA, 6, 4, 8, 8)
cinsiyet <- c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)
durum <- c(1, 1, 0, 1, 0, 0, 0, 0, 0, 0)
edurum <- c(1, 1, 0, 1, 0, 0, 1, 0, 1, 0)

# Temel soyağacı veri çerçevesi
ped <- data.frame(id=hayvan, sire=baba, dam=ana)
ped

# Genişletilmiş soyağacı veri çerçevesi
suppressPackageStartupMessages(is_installed <- require(kinship2))
if (!is_installed) {
   install.packages("kinship2", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(kinship2))

eped <- kinship2::pedigree(id=hayvan, dadid=baba, momid=ana,
    sex=cinsiyet, status=durum, affected=edurum, missid=0)

eped

ped2 <- as.data.frame(eped)
ped2

# Soyağacı grafiği
plot(eped, 
    cex = 0.8, col = "dodgerblue", symbolsize = 2, branch = 0.6, packed = TRUE, 
    align = c(1.5, 2), width = 8, density = c(-1, 35, 65, 20), 
    angle = c(90, 65, 40, 0), keep.par = FALSE, pconnect = 0.5)

#-------------------------------------------------------------------------
# Örnek 3.1.2: Soyağacı verisinin kontrol edilmesi ve düzeltilmesi
# Bağımlılık – Örnek 3.1.1
#
suppressPackageStartupMessages(installed <- require(QTLRel))
if (!installed) {
   install.packages("QTLRel", repos="https://cloud.r-project.org")  

suppressPackageStartupMessages(require(QTLRel))

colnames(ped)[1:3] <- c("id","father","mother")
fped <- pedRecode(ped=ped, ids=NULL, all=FALSE, msg=TRUE)
fped

ped <- fped[,1:3]
colnames(ped) <- c("hayvan","baba","ana")
ped

# Kurucu bireyler soyağacı
fped0 <- fped[(fped$father==0 & fped$mother==0),]
fped0

# 1. generasyon bireyleri soyağacı
fped1 <- fped[fped$generation==1,]
fped1

#--------------------------------------------------------------------
# Örnek 3.1.3: buildA ile A matrisi hesaplama
# Bağımlılık – Kod 3.1, Örnek 3.1.1
#
A <- buildA(ped)
# Satır ve sütunları adlandırma
colnames(A) <- rownames(A) <- ped[,1]
A

#--------------------------------------------------------------------
# Örnek 3.1.4: generateA ile A matrisi hesaplama
# Bağımlılık – Kod 3.2, Örnek 3.1.1
#
res <- generateA(ped)
A <- res$A
colnames(A) <- rownames(A) <- ped[,1]
A
F <- res$F
names(A) <- ped[,1]
F

#------------------------------------------------------------
# Örnek 3.1.5: kinship2 ile A matrisi hesaplama
# Bağımlılık – Örnek 3.1.1
#
suppressPackageStartupMessages(is_installed <- require(kinship2))
if (!is_installed) {
   install.packages("kinship2", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(kinship2))
}
K <- kinship(eped)
A <- 2*K
A

#-------------------------------------------------------------------
# Örnek 3.1.6: pedigreem ile A matrisinin oluşturulması 
# Bağımlılık – Örnek 3.1.1
#
suppressPackageStartupMessages(installed <- require(pedigreemm))
if (!installed) {
  install.packages("pedigreemm", repos="https://cloud.r-project.org")  
}
suppressPackageStartupMessages(require(pedigreemm))
oped <- with(ped, pedigree(sire=sire, dam=dam, label=id))
U <- relfactor(oped)
A <- crossprod(U)
#A <- getA(oped) #Yukarıdaki U ve A hesaplamasını tek adımda verir

colnames(A) <- rownames(A) <- ped[,1]
A

#--------------------------------------------------------------
# Örnek 3.1.7: AGHMatrix ile akrabalık matrisinin oluşturulması
# Bağımlılık – Örnek 3.1.1
#
suppressPackageStartupMessages(installed <- require(AGHmatrix))
if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
}

# Eksik kimlikleri NA'dan 0'a çevir ve soyağacı sütun adlarını yeniden düzenle
oped <- apply(ped[,c(1:3)], 2, function(x) ifelse(is.na(x),0,x))
colnames(oped) <- c("id","sire","dam")

A <- Amatrix(oped, ploidy=2, dominance=FALSE)
A 

#--------------------------------------------------------------

# Örnek 3.1.8: L matrisiyle A matrisi hesaplama 
# Bağımlılık – Örnek 3.1.1
#
 ped2 <- ped
 ped2[is.na(ped2)] <- 0

 source("http://morotalab.org/Mrode2005/relmat/createL.txt")
 # Fonksiyon kodunu görmek için createL yazıp çalıştırınız 
 L <- createL(s=ped2[,2], d=ped2[,3])
 round(L, 4)
 A <- L%*%t(L)
 round(A, 4)

#--------------------------------------------------------------

# Örnek 3.1.9: Mrode(2005) yöntemiyle dominans ilişki matrisi (D)
# Bağımlılık – Örnek 3.1.1
#
 ped2 <- ped
 ped2[is.na(ped2)] <- 0

 source("http://morotalab.org/Mrode2005/relmat/createD.txt")
 D <- createD(s=ped2[,2], d=ped2[,3])
 colnames(D) <- rownames(D) <- ped2[,1]
 round(D, 4)

#--------------------------------------------------------------

# Örnek 3.1.10: AGHMatrix ile dominans matrisininin oluşturulması
# Bağımlılık – Örnek 3.1.1
#
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }

# Eksik kimlikleri NA'dan 0'a çevir ve soyağacı sütun adlarını yeniden düzenle
 oped <- apply(ped[,c(1:3)], 2, function(x) ifelse(is.na(x),0,x))
 colnames(oped) <- c("id","sire","dam")

 D <- Amatrix(oped, ploidy=2, dominance=TRUE)
 round(D, 4)

#--------------------------------------------------------------

# Örnek 3.1.11: AGHMatrix ile epistatik terimli kovaryans matrisleri
# Bağımlılık – Örnek 3.1.1
#
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }

 snp1 <- c(NA,0,1,1,2,2,1,1,1,0)
 snp2 <- c(0,0,1,1,2,2,1,1,1,1)
 snp3 <- c(0,0,1,NA,2,0,1,2,1,2)
 geno <- cbind(snp1,snp2, snp3)
 rownames(geno) <- 1:nrow(geno)
 geno
 A <- Gmatrix(SNPmatrix=geno, method="VanRaden", missingValue=NA, maf=0.05)
 D <- Gmatrix(SNPmatrix=geno, method="Vitezica", missingValue=NA, maf=0.05)
# Birinci dereceden etkileşimler 
# Eklemeli-Eklemeli etkileşimler
 EpiA <- A*A
 head(round(EpiAA,4),3)

# Eklemeli-Dominans etkileşimler
 EpiDA <- D*A
 head(round(EpiDA,4),3)

# Dominans-Dominans etkileşimler
 EpiDD <- D*D
 head(round(EpiDD,4),3)

# İkinci dereceden etkileşimler
# Eklemeli-Eklemeli-Eklemeli etkileşimler
 EpiAAA <- A*A*A
 head(round(EpiAAA,4),3)

# Eklemeli-Eklemeli-Dominans etkileşimler
EpiAAD <- A*A*D
 head(round(EpiAAD,4),3)

# Eklemeli-Dominans-Dominans etkileşimler
 EpiADD <- A*D*D
 head(round(EpiADD,4),3)

# Dominans-Dominans-Dominans etkileşimler
 EpiDDD <- D*D*D
 head(round(EpiDDD,4),3)

#--------------------------------------------------------------

# Örnek 3.1.12: AGHMatrix ile H matrisi hesaplama
# Bağımlılık – Örnek 3.1.1
#
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
#
# A matrisi
 A <- Amatrix(oped, ploidy=2)
# VanRaden G genomik ilişki matrisi 
 G <- Gmatrix(geno, method="VanRaden", ploidy=2, missingValue=NA, maf=0.05)

# H matrisi (Martini)
 martiniH <- Hmatrix(A=A, G=G, method="Martini", 
   ploidy=2, missingValue=NA, maf=0.05)
 round(martiniH, 4)

# H matrisi (Munoz)
 munozH <- Hmatrix(A=A, G=G, markers = geno, method="Munoz",
   ploidy=2, missingValue=NA, maf=0.05)
 round(munozH, 4)

#--------------------------------------------------------------

# Örnek 3.1.13: Akrabalık matrisi ve tersinin oluşturulması
# Bağımlılık – Örnek 3.1.1
#
# A matrisini oluştur
 A <- buildA(ped)
 colnames(A) <- rownames(A) <- ped[,1]

# A matrisinin tersini hesapla
 Ainv <- solve(A)
 round(Ainv,3)

#--------------------------------------------------------------

# Örnek 3.1.14: Akrabalık matrisi ve tersinin oluşturulması
# Bağımlılık – Örnek 3.1.1
#
 suppressPackageStartupMessages(is_installed <- require(nadiv))
 if (!is_installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))  
 }

# A matrisinin tersi 
 Ainv <- makeAinv(ped)$Ainv
 round(Ainv, 3)

#--------------------------------------------------------------

# Örnek 3.1.15: Akrabalık matrisinin tersinin hesaplanması 3
# Bağımlılık – Örnek 3.1.1
#
# A matrisini oluştur
 A <- buildA(ped)
 colnames(A) <- rownames(A) <- ped[,1]

 suppressPackageStartupMessages(is_installed <- require(ASRgenomics))
 if (!is_installed) {
   install.packages("ASRgenomics", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ASRgenomics))  
 }

# A matrisinin tersi 
 resInv <- ASRgenomics::G.inverse(G=as.matrix(A), sparseform = FALSE)

 ls(resInv)

 Ainv <- resInv$Ginv
 round(Ainv, 3)

#--------------------------------------------------------------

# Örnek 3.1.16: Henderson yöntemiyle A matrisinin tersinin hesaplanması 4
# Bağımlılık – Örnek 3.1.1
#
 ped2 <- ped
 ped2[is.na(ped2)] <- 0
 source("http://morotalab.org/Mrode2005/relmat/createAinvL.txt")

 Ainv <- createAinvL(s=ped2[,2], d=ped2[,3])
 colnames(Ainv) <- rownames(Ainv) <- ped2[,1]
 Ainv

#--------------------------------------------------------------

# Örnek 3.1.17: Henderson yöntemiyle A matrisinin tersinin hesaplanması 5
# Bağımlılık – Örnek 3.1.1
#
 ped2 <- ped
 ped2[is.na(ped2)] <- 0
 source("http://morotalab.org/Mrode2005/relmat/createAinv.txt")

 Ainv <- createAinv(s=ped2[,2], d=ped2[,3])
 colnames(Ainv) <- rownames(Ainv) <- ped2[,1]
 Ainv

#--------------------------------------------------------------

# Örnek 3.1.18: Quaas yöntemiyle A matrisi tersinin hesaplanması 6
# Bağımlılık – Örnek 3.1.1
#
 ped2 <- ped
 ped2[is.na(ped2)] <- 0

 source("http://morotalab.org/Mrode2005/relmat/quaas.txt")
 Ainv <- quaas(s=ped2[,2], d=ped2[,3])
 colnames(Ainv) <- rownames(Ainv) <- ped2[,1]
 Ainv

#--------------------------------------------------------------

# Örnek 3.1.19: A matrisini seyrek matrise dönüştürme
# Bağımlılık – Kod 3.1, Örnek 3.1.1
#
 A <- buildA(ped)
 colnames(A) <- rownames(A) <- ped[,1]
 A
 object.size(A)  #Tüketilen RAM miktarı

# Seyrek matrise dönüştürme
 A <- as(A, "sparseMatrix")
 A

 object.size(A)

# Seyreklik oranı 
 sor <- sum(apply(A, 1, sum))/(nrow(A)*ncol(A))
 sor

#--------------------------------------------------------------

# Örnek 3.1.20: A matrisinin ısı haritası 1
# Bağımlılık – Örnek 3.1.6
#
# Renk paleti tanımlama
 colPal <- colorRampPalette(c("beige", "red")) (100)

 heatmap(x = A, col = colPal, symm = TRUE,
   main="A matrisi ısı haritası")

 legend(x="bottom", legend=c("düşük", "orta", "yüksek"),
   fill=colPal[c(1,50,100)], horiz=T)

#--------------------------------------------------------------

# Örnek 3.1.21: R grafikleri için renk paleti tanımlama
# Bağımlılık – Örnek 3.1.6
#
 suppressPackageStartupMessages(installed <- require(viridisLite))
 if (!installed) {
   install.packages("viridisLite", repos="https://cloud.r-project.org")  
 }
 suppressPackageStartupMessages(require(viridisLite))

 suppressPackageStartupMessages(installed <- require(paletteer))
 if (!installed) {
   install.packages("paletteer", repos="https://cloud.r-project.org")  
 }
 suppressPackageStartupMessages(require(paletteer))

 suppressPackageStartupMessages(installed <- require(RColorBrewer))
 if (!installed) {
   install.packages("RColorBrewer", repos="https://cloud.r-project.org")  
 }
 suppressPackageStartupMessages(require(RColorBrewer))

 n <- 100

 suppressPackageStartupMessages(installed <- require(scales))
 if (!installed) {
   install.packages("scales", repos="https://cloud.r-project.org")  
 }
 suppressPackageStartupMessages(require(scales))

 colPal1 <- colorRampPalette(c("beige", "red")) (n)
 colPal2 <- hcl.colors(n)
 colPal3 <- viridisLite::viridis(n)
 colPal4 <- viridisLite::magma(n)
 colPal5 <- paletteer::paletteer_c("grDevices::RdYlGn", n)
 colPal6 <- paletteer::paletteer_d("tvthemes::simpsons") 
 colPal7 <- paletteer::paletteer_dynamic("cartography::orange.pal", 20)

 scales::show_col(colPal1, cex_label=0.5)
 scales::show_col(colPal2, cex_label=0.5)
 scales::show_col(colPal3, cex_label=0.5)
 scales::show_col(colPal5, cex_label=0.5)
 scales::show_col(colPal7, labels=TRUE, borders=NA, cex_label=0.5)

# lattice ile ısı haritası
 suppressPackageStartupMessages(installed <- require(lattice))
 if (!installed) {
   install.packages("lattice", repos="https://cloud.r-project.org")  
 }
 suppressPackageStartupMessages(require(lattice))
 lattice::levelplot(A, col.regions = colPal4) 

# pheatmap ile ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
 }
 suppressPackageStartupMessages(require(pheatmap))
 pheatmap(A, cutree_rows = 4)

# gplots ile ısı haritası
 suppressPackageStartupMessages(installed <- require(gplots))
 if (!installed) {
   install.packages("gplots", repos="https://cloud.r-project.org")  
 }
 suppressPackageStartupMessages(require(gplots))
 heatmap.2(A, scale = "none", col = bluered(100), 
   trace = "none", density.info = "none")

#--------------------------------------------------------------

# Örnek 3.1.22: A matrisinin ısı haritası 3
# Bağımlılık – Örnek 3.1.6
#
 suppressPackageStartupMessages(installed <- require(superheat))
 if (!installed) {
   install.packages("devtools", repos="https://cloud.r-project.org")
   devtools::install_github("rlbarter/superheat")
 }
 suppressPackageStartupMessages(require(superheat))

 superheat::superheat(A,
   scale = FALSE,
   heat.na.col = "white",
   heat.pal = c("#b35806", "white", "#542788"), #farklı renkleri deneyin!
   heat.pal.values = c(0, 0.5, 1),
   row.dendrogram = TRUE,
   title = "A matrisi ısı haritası",
   title.size = 6,
   row.title = "IID",
   row.title.size = 5,
   column.title = "IID",
   column.title.size = 5,
   X.text = round(as.matrix(A), 2),
   X.text.size = 4
 )

#--------------------------------------------------------------
# Örnek 3.1.23: A matrisini gerçek ilişki matrisine dönüştürme
# Bağımlılık – Kod 3.1, Örnek 3.1.1
#
 A <- buildA(ped)
 colnames(A) <- rownames(A) <- ped[,1]
 A

# Genetik ilişkilerin hesaplanması
 relMat <- matrix(NA, nrow=nrow(A), ncol=ncol(A))
 colnames(relMat) <- rownames(relMat) <- ped[,1]
 for(i in 1:nrow(A)){
   for(j in 1:ncol(A)){
     relMat[i,j] <- A[i,j] / sqrt(A[i,i] * A[j,j])
   }
 }
 round(relMat,3

# Alternatif hızlı dönüştürme
 relMat <- cov2cor(A)
 colnames(relMat) <- rownames(relMat) <- ped[,1]
 round(relMat, 3)

# Korelasyonların [0,1] aralığında olup olmadığını ve simetriyi kontrol et
 min(relMat)
 max(relMat)

 isSymmetric(relMat)


# Değilse psych paketindeki cor.smooth ile düzelt
relMat <- psych::cor.smooth(relMat)
 quantile(relMat)

#--------------------------------------------------------------
# Örnek 3.1.24: İlişkilerin görselleştirilmesi
# Bağımlılık – Örnek 3.1.23
#
 suppressPackageStartupMessages(installed <- require(corrplot))
 if (!installed) {
   install.packages("corrplot", repos="https://cloud.r-project.org")
 }
 suppressPackageStartupMessages(require(corrplot))

 corrplot::corrplot.mixed(
   relMat, order="AOE", 
   lower = 'shade', upper = 'ellipse',
   addCoef.col = 'black',
   main="Genetik İlişki Matrisi")

#--------------------------------------------------------------
# Örnek 3.1.25: A matrisinde temel bileşenler analizi
# Bağımlılık – Örnek 3.1.1
#
 A <- buildA(ped)
 colnames(A) <- rownames(A) <- ped[,1]

# prcomp ile PCA
 resPca <- prcomp(A,  scale=FALSE)
 ls(resPca)

# PCA grafiği
 plot(resPca$x[,1], resPca$x[,2], col="dodgerblue", pch=20, cex=2,
   xlab="PC1", ylab="PC2", main="PCA – A matrisi") 
 abline(v=0, lty=3, col="gray")
 abline(h=0, lty=3, col="gray")
 text(resPca$x[,1], resPca$x[,2], rownames(resPca$x), pos=2, cex=0.8)

#--------------------------------------------------------------
# Örnek 3.1.26: factoextra ile PCA görselleştirme
# Bağımlılık – Örnek 3.1.25
#
 suppressPackageStartupMessages(installed <- require(factoextra))
 if (!installed) {
   install.packages("factoextra", repos="https://cloud.r-project.org")
 }
 suppressPackageStartupMessages(require(factoextra))

# Özdeğerler ve varyanslar
 eigPca <- factoextra::get_eig(resPca)
 round(eigPca, 4)

# PCA serpilme grafiği
 p <- factoextra::fviz_pca_ind(resPca, 
    geom=c("text","point"),
    repel=TRUE,
    col.ind = "#0072B2",
    addEllipses=TRUE, ellipse.level=0.95,
    ggtheme = theme_classic())
 p <- p + labs(title = "PCA – A matrisi",
   x = "PC1", y = "PC2")
 print(p)

# PCA yük grafiği (loading plot)
 factoextra::fviz_pca_var(resPca, axes = c(1, 2), geom = c("arrow", "text"),
   label = "all", invisible = "none", labelsize = 4,
   col.var = "red", alpha.var = 1, col.quanti.sup = "blue",
   col.circle = "grey70")

# PCA biplot grafiği
 factoextra::fviz_pca_biplot(resPca, axes = c(1, 2), geom = c("point", "text"),
    label = "all", invisible = "none", labelsize = 4, pointsize = 2,
    habillage = "none", addEllipses = FALSE, ellipse.level = 0.95,
    col.ind = "black", col.ind.sup = "blue", alpha.ind = 1,
    col.var = "steelblue", alpha.var = 1, col.quanti.sup = "blue",
    col.circle = "grey70"))

# PCA çarşak grafiği 1
 p <- factoextra::fviz_eig(resPca, choice = "variance",
   geom = c("bar", "line"), barfill = "pink", barcolor = "dodgerblue", 
   linecolor = "red", ncp = 10, addlabels = TRUE, 
   hjust = -0.3, main = "PCA – Varyanslar", xlab = "PC", 
   ylab = "% Varyans", ggtheme = theme_minimal())
 print(p)

# PCA çarşak grafiği 2
 p <- factoextra::fviz_eig(resPca, choice = "eigenvalue",
   geom = c("bar", "line"), barfill = "grey", barcolor = "green", 
   linecolor = "dodgerblue", ncp = 10, addlabels = TRUE, 
   hjust = -0.3, main = "PCA – Eigenvalue", xlab = "PC", 
   ylab = "Özdeğer", ggtheme = theme_minimal())
 print(p)

#--------------------------------------------------------------
# Örnek 3.1.27: readxl paketi ile verinin okunması
 suppressPackageStartupMessages(installed <- require(readxl))
 if (!installed) {
   install.packages("readxl", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(readxl))  
 }

 setwd("D:/lmmebook/datasets")
 sheepweight <- read_excel("sheepweight.xlsx", sheet = "Sayfa1")
 sheepweight <- data.frame(sheepweight)
 for(j in 1:4)
   sheepweight[,j] <- as.factor(sheepweight[,j])

 sheepweight

#--------------------------------------------------------------
# Örnek 3.1.28: Soyağacı ve verinin hazırlanması
# Bağımlılık – Örnek 3.1.27
#
 suppressPackageStartupMessages(is_installed <- require(nadiv))
 if (!is_installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))  
 }

# Soyağacının hazırlanması
 sheepped <- prepPed(sheepweight[,1:3], check=TRUE)
 sheepped

 skaveri <- sheepweight[!is.na(sheepweight$skagr), ]
 skaveri

#--------------------------------------------------------------
# Örnek 3.1.29: Tasarım matrislerinin oluşturulması 1
# Bağımlılık – Örnek 3.1.28
#
 n <- nrow(skaveri)
 nped <- nrow(sheepped)

# Sabit etkilerin sayısı
 nfixed <- length(unique(skaveri[,4]))

# Sabit etkiler için tasarım matrisi
 X <- matrix(0, n, nfixed)
 for(i in 1:n){
   X[i, skaveri[i,4]] <- 1
 }

# Sabit etkiler
 X

# Sabit etkiler tasarım matrisi
 X <- cbind(rep(1, n), X[,-1])
 X

# Rastlantısal etkiler için tasarım matrisi
 Z <- matrix(0, n, nped)
 for(i in 1:n){
    Z[i,skaveri[i,1]] <- 1
 }
 Z

# Gözlemler vektörü
 y <- skaveri$skagr
 y

#--------------------------------------------------------------
# Örnek 3.1.30: Tasarım matrislerinin oluşturulması 2
# Bağımlılık – Örnek 3.1.29
#
 suppressPackageStartupMessages(installed <- require(MatrixModels))
 if (!installed) {
   install.packages("MatrixModels", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MatrixModels))  
 }

# Sabit etkiler için tasarım matrisi
# Intercept'siz model matrisi
 X <- model.Matrix(~ -1+grup, data=skaveri, sparse=FALSE)
 X

# veya alternatif yol intercept yerine 0 kullanılır
 X <- model.Matrix(~ 0+grup, data=skaveri, sparse=FALSE)
 colnames(X) <- c("grp1","grp2")
 X

# intercept'li model
 X <- model.Matrix(~ 1+grup, data=skaveri, sparse=FALSE)
 colnames(X) <- c("mu","grp2")
 X

# Rastlantısal etkiler için tasarım matrisi
 Z <- model.Matrix(~ -1 + koyun, data=skaveri, sparse=FALSE)
 Z

# Gözlemler vektörü
 y <- skaveri$skagr
 y

#--------------------------------------------------------------
# Örnek 3.1.31: Akrabalık matrisi ve tersinin oluşturulması
# Bağımlılık – Örnek 3.1.29
#
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }

 oped <- apply(sheepped[,c(1:3)], 2, function(x) ifelse(is.na(x),0,x))
 colnames(oped) <- c("id","sire","dam")
 oped <- apply(oped, 2, as.numeric)
 A <- Amatrix(oped, ploidy=2, dominance=FALSE)
 round(A,4)

 Ainv <- solve(A)
 round(Ainv, 4)

#--------------------------------------------------------------
# Örnek 3.1.32: Karışık model eşitlikleri sol tarafının oluşturulması 1
# Bağımlılık – Örnek 3.1.30
#
 C11 <- crossprod(X)    #X'X 
 C12 <- crossprod(X,Z)  #X'Z
 C21 <- crossprod(Z,X)  #Z'X
 C22 <- crossprod(Z,Z)  #Z'Z
 Custsira <- cbind(C11,C12)
 Caltsira <- cbind(C21,C22)
 C <- rbind(Custsira, Caltsira)  # Birleştirme
 C

#--------------------------------------------------------------

# Örnek 3.1.33: Karışık model eşitlikleri sol tarafının oluşturulması 2
# Bağımlılık – Örnek 3.1.31, 3.1.32
#
 sigma2a <- 6
 sigma2e <- 1
 lambda <- sigma2e / sigma2a
 Ginv <- Ainv*lambda
 C11 <- crossprod(X)    #X'X 
 C12 <- crossprod(X,Z)  #X'Z
 C21 <- crossprod(Z,X)  #Z'X
 C22 <- crossprod(Z,Z) + Ginv  #Z'Z+Ginv
 Custsira <- cbind(C11,C12)
 Caltsira <- cbind(C21,C22)
 C <- rbind(Custsira, Caltsira)  # Birleştirme

 round(C, 3)

#--------------------------------------------------------------
# Örnek 3.1.34: Karışık model eşitlikleri sağ tarafının oluşturulması
# Bağımlılık – Örnek 3.1.33
#
 Xy <- crossprod(X, y) #X'y işlemi
 Zy <- crossprod(Z, y) #Z'y işlemi
 RHS <- rbind(Xy, Zy)  #Birleştirme ile sağ tarafın oluşturulması

 RHS

#--------------------------------------------------------------
# Örnek 3.1.35: Karışık model eşitliklerinin çözülmesi
# Bağımlılık – Örnek 3.1.34
#
# Sol tarafın tersinin alınması
 Cinv <- solve(C)

  round(Cinv, 3)

#--------------------------------------------------------------
# Örnek 3.1.36: Çözümlerin elde edilmesi
# Bağımlılık – Örnek 3.1.35
#
 sol <- Cinv %*% RHS  #veya sol <- crossprod(Cinv, RHS)
 rownames(sol) <- rownames(RHS)
 colnames(sol) <- "Çözümler"
 sol

#--------------------------------------------------------------
# Örnek 3.1.37: Rastlantısal etkilerin ayrılması
# Bağımlılık – Örnek 3.1.36
#
 ebv <- sol[3:12]
 names(ebv) <- rownames(sol)[3:12]

 sebv <- sort(ebv, decreasing=TRUE)
 sebv
 order(ebv, decreasing = TRUE)

#--------------------------------------------------------------

# Örnek 3.1.38: Varyans matrislerinin hesaplanması
# Bağımlılık – Örnek 3.1.31, 3.1.35
#
 sigma2a <- 6
 sigma2e <- 1
 n <- nrow(skaveri)

 I <- diag(n)

 R <- I*sigma2e
 R

 G <- A * sigma2a
 G

 V <- Z %*% G %*% t(Z) + R
 V

 Vinv <- solve(V)
 round(Vinv, 2)

#--------------------------------------------------------------

# Örnek 3.1.39: Sabit ve rastlantısal etkilerin hesaplanması
# Bağımlılık – Örnek 3.1.34
#
# Sabit etkiler
 bhat <- solve(t(X) %*% Vinv %*%X) %*% (t(X) %*% Vinv %*%y)
 bhat

 uhat <- sigma2a * A %*% t(Z) %*% Vinv  %*% (y-X %*% bhat)
 uhat

 ebv <- as.numeric(ebv)
 ebv2 <- as.numeric(uhat)
 ebv

 ebv2

 hist(ebv, col = "dodgerblue", 
  main = "EBV Histogramı", xlab = "EBV", ylab="Frekans")

#--------------------------------------------------------------

# Örnek 3.1.40: Çözümlerin hataları ve güvenirliliği
# Bağımlılık – Örnek 3.1.35
#
 Cuu <- Cinv[3:12, 3:12]
 PEV <- diag(Cuu)*sigma2e
 SEP <- sqrt(PEV)
 r2 <- 1-diag(Cuu)*lambda  #veya r2 <- 1-SEP^2/sigma2a
 r <- sqrt(r2)
 ne <- (1/PEV-1/sigma2a)*sigma2e
 ne

# Sonuçların gösterilmesi
 hmodel <- cbind(ebv, PEV, SEP, r, r2)
 colnames(hmodel) <- c("EBV","PEV","SEP", "r","r2")
 hmodel

#--------------------------------------------------------------

# Örnek 3.1.41: Yapılan analizlerin saklanması
# Bağımlılık – Örnek 3.1.35
# Sonuçları kaydetme
 save(hmodel, file = "hayvanmodel.Rda")
# Saklanan sonuçları okuma
 load(file="hayvanmodel.Rda")

#--------------------------------------------------------------
#--------------------------------------------------------------
#--------------------------------------------------------------

# Örnek 3.2.1: Verinin okunması ve hazırlanması
 setwd("D:/lmmebook/datasets")
 skaveri <- read.table("pigs.dat", header=TRUE, sep="\t")
 skaveri$hayvan <- as.factor(skaveri$hayvan)
 skaveri$cins <- as.factor(skaveri$cins)
 skaveri

 ped <- read.table("pigsped.dat", head=TRUE, sep="\t")
 ped$hayvan <- as.factor(ped$hayvan)
 ped$baba <- as.factor(ped$baba)
 ped$ana <- as.factor(ped$ana)
 ped

#--------------------------------------------------------------

# Örnek 3.2.2. Tasarım matrisleri ve A matrisinin oluşturulması
# Bağımlılık – Örnek 3.2.1
#
 suppressPackageStartupMessages(is_installed <- require(MatrixModels))
 if (!is_installed) {
   install.packages("MatrixModels", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MatrixModels))  
 }

 y <- skaveri$ska
 y

 X <- as.matrix(model.matrix(~1 + cins, data=skaveri))
 colnames(X) <- c("mu","cins2")
 X

 Z1 <- model.matrix(~skaveri$hayvan-1)
 m <- nrow(X)
 n <- nrow(ped)-ncol(Z1)
 Z2 <- matrix(0, nrow=m, ncol=n)
 Z <- cbind(Z2, Z1)
 colnames(Z) <- paste0("h",1:ncol(Z))
 Z

 W <- model.matrix(~ped$ana-1)
 colnames(W) <- paste0("ce",1:ncol(W))
 W

 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
 oped <- apply(ped[,c(1:3)], 2, function(x) ifelse(is.na(x),0,x))
 colnames(oped) <- c("id","sire","dam")
 oped <- apply(oped, 2, as.numeric)

 A <- Amatrix(oped, ploidy=2, dominance=FALSE)
 A

 Ainv <- solve(A)
 round(Ainv,4)

#--------------------------------------------------------------

# Örnek 3.2.3: Karışık model sol taraf matrisi
# Bağımlılık – Örnek 3.2.2
#
 C11 <- crossprod(X,X)
 C11

 C12 <-crossprod(X, Z)
 C12

 C13 <- crossprod(X,W)
 C13

 C21 <- crossprod(Z,X)
 C21

 sigma2e <- 65
 sigma2a <- 20
 sigma2c <- 15
 lambda1 <- sigma2e / sigma2a
 lambda2 <- sigma2e / sigma2c
 C22 <- crossprod(Z,Z) + (Ainv*lambda1)
 round(C22, 1) 

 C23 <- crossprod(Z,W)
 C23

 C31 <- crossprod(W,X)
 C31

 C32 <- crossprod(W,Z)
 C32

 C33 <- crossprod(W,W)+ diag(ncol(W))*lambda2
 C33

 Custsira <- cbind(C11, C12, C13)
 Cortasira <- cbind(C21, C22, C23)
 Caltsira <- cbind(C31, C32, C33)
 C <- rbind(Custsira, Cortasira, Caltsira)
 C[1:10,1:5]

#--------------------------------------------------------------

# Örnek 3.2.4: Sağ taraf matrisi
# Bağımlılık – Örnek 3.2.2
#
 Xy <- crossprod(X, y)
 Zy <- crossprod(Z, y)
 Wy <- crossprod(W, y)
 RHS <- rbind(Xy, Zy, Wy)
 RHS

#--------------------------------------------------------------

# Örnek 3.2.5: Etkilerin hesaplanması
# Bağımlılık – Örnek 3.2.3, 3.2.4
#
 Cinv <- solve(C)
 sol <- crossprod(Cinv, RHS)
 colnames(sol) <- c("Çözümler")

 round(sol,2)        

#--------------------------------------------------------------

# Örnek 3.2.6: Etkilerin incelenmesi
# Bağımlılık – Örnek 3.2.3, 3.2.4
#
# Damızlık değerleri
 ebv <- sol[3:16]
 names(ebv) <- rownames(sol)[3:16]

 sebv <- sort(ebv, decreasing=TRUE)
 sebv

 order(ebv, decreasing = TRUE)

# Ortak çevre etkileri
 ce <- sol[18:20]
 names(ce) <- rownames(sol)[18:20]
 ce

# Sonuçları kaydet
 save(sol, file = "cenvmodel.Rda")
# Saklanan sonuçları okuma
 load(file="cevnvmodel.Rda")

#--------------------------------------------------------------
# Örnek 3.2.7: Verinin okunması ve haırlanması
 setwd("D:/lmmebook/datasets")
 sutver <- read.table("tdmilk.dat", head=TRUE, sep="\t")
 sutver$hayvan <- as.factor(sutver$hayvan)
 sutver$ay <- as.factor(sutver$ay)
 sutver

 ped <- read.table("tdmilkped.dat", head=TRUE, sep="\t")
 ped$hayvan <- as.factor(ped$hayvan)
 ped$baba <- as.factor(ped$baba)
 ped$ana <- as.factor(ped$ana)
 ped

#--------------------------------------------------------------
# Örnek 3.2.8: Tasarım matrisleri ve A matrisinin oluşturulması
# Bağımlılık – Örnek 3.2.7
#
 suppressPackageStartupMessages(is_installed <- require(MatrixModels))
 if (!is_installed) {
   install.packages("MatrixModels", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MatrixModels))  
 }

# Fenotip vektörü
 y <- sutver$sut
 y

# Sabit etkiler tasarım matrisi
 X <- as.matrix(model.matrix(~1+ay, data=sutver))
 colnames(X)[1] <- "mu"
 X

 Z1 <- model.matrix(~sutver$hayvan-1, data=sutver)
 m <- nrow(X); n <- nrow(ped)-ncol(Z1)
 Z2 <- matrix(nrow=m, ncol=n, 0)
 Z <- cbind(Z2,Z1)
 colnames(Z) <- paste0("h",1:ncol(Z))
 Z

 W <- model.matrix(~-1 + sutver$hayvan, data=sutver)
 colnames(W) <- paste0("pe",1:ncol(W))
 W

 oped <- apply(ped[,c(1:3)], 2, function(x) ifelse(is.na(x),0,x))
 colnames(oped) <- c("id","sire","dam")
 oped <- apply(oped, 2, as.numeric)
 A <- as.matrix(AGHmatrix::Amatrix(oped))
 A

 Ainv <- solve(A)
 Ainv

#--------------------------------------------------------------

# Örnek 3.2.9: Karışık model eşitliklerinin oluşturulması
# Bağımlılık – Örnek 3.2.8
#
 h2 <- 0.4
 r <- 0.6
 sigma2p <- 10^2
 lambda1 <- (1-r)/h2
 lambda2 <- (1-r)/(r-h2)

 C11 <- crossprod(X,X)
 C11

 C12 <-crossprod(X, Z)
 C12

 C13 <- crossprod(X,W)
 C13

 C21 <- crossprod(Z,X)
 C21

 C22 <- crossprod(Z,Z) + Ainv*lambda1
 C22 

 C23 <- crossprod(Z,W)
 C23

 C31 <- crossprod(W,X)
 C31

 C32 <- crossprod(W,Z)
 C32

 C33 <- crossprod(W,W)+ diag(ncol(X))*lambda2
 C33

 Custsira <- cbind(C11, C12, C13)
 Cortasira <- cbind(C21, C22, C23)
 Caltsira <- cbind(C31, C32, C33)
 C <- rbind(Custsira, Cortasira, Caltsira)
 C

# Sağ taraf matrisi
 Xy <- crossprod(X, y)
 Zy <- crossprod(Z, y)
 Wy <- crossprod(W, y)
 RHS <- rbind(Xy, Zy, Wy)
 RHS

#--------------------------------------------------------------

# Örnek 3.2.10: Çözümlerin elde edilmesi
# Bağımlılık – Örnek 3.2.9
#
 Cinv <- solve(C)
 sol <- crossprod(Cinv, RHS)
 colnames(sol) <- c("Çözümler")
 round(sol,2)        

#--------------------------------------------------------------
# Örnek 3.2.11: Verinin okunması ve hazırlanması
 setwd("D:/lmmebook/datasets")
 suppressPackageStartupMessages(is_installed <- require(readxl))
 if (!is_installed) {
   install.packages("readxl", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(readxl))  
 }

 suppressPackageStartupMessages(is_installed <- require(nadiv))
 if (!is_installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))  
 }

 calfweight <- read_excel("calfweaning.xlsx", sheet = "Sayfa1")
 calfweight <- data.frame(calfweight)
 for(j in 1:4)
   calfweight[,j] <- as.factor(calfweight[,j])

 calfweight

 ped <- nadiv::prepPed(calfweight[,1:3])
 ped

 A <- as.matrix(nadiv::makeA(ped))
 round(A, 4)

 Ainv <- solve(A)
 round(Ainv, 3)

#--------------------------------------------------------------
# Örnek 3.2.12: Tasarım matrislerinin oluşturulması
# Bağımlılık – Örnek 3.2.11
#
 y <- calfweight$agr
 y

 X <- model.matrix(~1+grup, data=calfweight)
 colnames(X)[1] <-"mu"
 X

 Z1 <- model.matrix(~hayvan-1, data=calfweight)
 m <- nrow(X); n <- nrow(ped)-ncol(Z1)
 Z2 <- matrix(nrow=m, ncol=n, 0)
 Z <- cbind(Z2,Z1)
 colnames(Z) <- paste0("h",1:ncol(Z))
 Z

 K <- Z
 colnames(K) <- paste0("m",1:ncol(Z))
 K

 W <- model.matrix(~ped$ana-1)
 colnames(W) <- paste0("pe",1:ncol(W))
 W

#--------------------------------------------------------------
# Örnek 3.2.13: Karışık model eşitliklerinin oluşturulması
# Bağımlılık – Örnek 3.2.12
#
# Regülarizasyon parametreleri
 sigma2e <- 80
 sigma2a <- 90
 sigma2p <- 40
 sigma2m <- 20
 sigmaam <- -75
 lambda1 <- sigma2e / sigma2a
 lambda2 <- 1 / sigmaam
 lambda3 <- sigma2e / sigma2m
 lambda4 <- sigma2e / sigma2p

# Karışık model sol taraf matrisi
 C11 <- crossprod(X,X)
 C11

 C12 <-crossprod(X, Z)
 C12

 C13 <- crossprod(X,K)
 C13

 C14 <- crossprod(X,W)
 C14

 C21 <- crossprod(Z,X)
 C21

 C22 <- crossprod(Z,Z) + Ainv*lambda1
 round(C22, 2) 

 C23 <- crossprod(Z,K) + Ainv*lambda2
 round(C23, 2)

 C24 <- crossprod(Z,W) 
 C24

 C31 <- crossprod(K,X)
 C31

 C32 <- crossprod(K,Z) + Ainv*lambda2
 round(C32, 2)

 C33 <- crossprod(K,K) + Ainv*lambda3
 round(C33, 2)

 C34 <- crossprod(K,W)
 C34

 C41 <- crossprod(W,X)
 C41

 C42 <- crossprod(W,Z)
 C42

 C43 <- crossprod(W,K)
 C43

 C44 <- crossprod(W,W)+ diag(ncol(X))*lambda4
 C44

 Csira1 <- cbind(C11, C12, C13, C14)
 Csira2 <- cbind(C21, C22, C23, C24)
 Csira3 <- cbind(C31, C32, C33, C34)
 Csira4 <- cbind(C41, C42, C43, C44)
 C <- rbind(Csira1, Csira2, Csira3, Csira4)

# Karışık model sağ taraf matrisi
 Xy <- crossprod(X, y)
 Zy <- crossprod(Z, y)
 Ky <- crossprod(K, y)
 Wy <- crossprod(W, y)
 RHS <- rbind(Xy, Zy, Ky, Wy)
 RHS

#--------------------------------------------------------------
# Örnek 3.2.14: Çözümlerin elde edilmesi
# Bağımlılık – Örnek 3.2.13
#
 Cinv <- solve(C)
 sol <- crossprod(Cinv, RHS)
 colnames(sol) <- c("Çözümler")
 round(sol,2)        

#--------------------------------------------------------------

# Örnek 3.2.15: Verilerin okunması ve hazırlanması
# Veri dosyasını okuma
 setwd("D:/lmmebook/datasets")
 sutver <- read.table("testdaymilk.dat", head=TRUE)

# Faktör türü verileri ayarla
 sutver$inek <- as.factor(sutver$inek)
 sutver$baba <- as.factor(sutver$baba)
 sutver$suru <- as.factor(sutver$suru)
 sutver$buzmev <- as.factor(sutver$buzmev)

# Veri yapısı
 str(sutver)

# Veri içeriği
 sutver

# Soyağacı dosyasını okuma
 ped <- read.table("testdaymilkped.dat", head=TRUE)
 ped

# A matrisi ve tersini hesaplama
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
 A <- AGHmatrix::Amatrix(ped, ploidy=2)
 A

 Ainv <- solve(A)
 round(Ainv, 3)

#--------------------------------------------------------------

# Örnek 3.2.16: Tasarım matrislerinin oluşturulması
# Bağımlılık – Örnek 3.2.15
#
 y <- sutver$tgsv
 y

 X <- model.matrix(~1+suru+buzmev, data=sutver)
 colnames(X)[1] <- "mu"
 X

 Z1 <- model.matrix(~-1+baba, data=sutver)
 m <- nrow(X); n <- nrow(ped)-ncol(Z1)
 Z2 <- matrix(nrow=m, ncol=n, 0)
 Z <- cbind(Z2,Z1)
 colnames(Z) <- paste0("s",1:ncol(Z))
 Z

 tZ <- t(Z)
 tZ

#--------------------------------------------------------------
# Örnek 3.2.17: Karışık model sol taraf matrisi
# Bağımlılık – Örnek 3.2.16
#
 C11 <- crossprod(X)
 C11

 C12 <-crossprod(X, Z)
 C12

 C21 <- crossprod(Z,X)
 C21

# Regularizasyon parametreleri
 sigma2s <- 100
 sigma2e <- 200
 lambda <- sigma2s/sigma2e

 tZZ <- crossprod(Z)
 tZZ

 C22 <- tZZ + Ainv*lambda
 C22 

# Sol taraf matrisi
 Custsira <- cbind(C11, C12)
 Caltsira <- cbind(C21, C22)
 C <- rbind(Custsira, Caltsira)
 C

# Sağ taraf matrisi
 Xy <- crossprod(X, y)
 Zy <- crossprod(Z, y)
 RHS <- rbind(Xy, Zy)
 RHS

#--------------------------------------------------------------
# Örnek 3.2.18: Etkilerin hesaplanması
# Bağımlılık – Örnek 3.2.17
#
 Cinv <- solve(C)
 sol <- crossprod(Cinv, RHS)
 colnames(sol) <- c("Çözümler")
 sol

 sebv <- sol[4:10]
 names(sebv) <- rownames(sol)[4:10]
 sort(sebv, decreasing=TRUE)

#--------------------------------------------------------------

# Örnek 3.2.19: Verinin okunması ve hazırlanması
 setwd("D:/lmmebook/datasets")
 skaveri <- read.table("multitrait.dat", head = TRUE, sep="\t")
 skaveri$hayvan <- as.factor(skaveri$hayvan)
 skaveri$baba <- as.factor(skaveri$baba)
 skaveri$ana <- as.factor(skaveri$ana)
 skaveri$cins <- as.factor(skaveri$cins)
 skaveri

 suppressPackageStartupMessages(is_installed <- require(nadiv))
 if (!is_installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))  
 }

 ped <- nadiv::prepPed(skaveri[,1:3])
 ped <- ped[order(ped[,1]),]
 ped

 A <- as.matrix(nadiv::makeA(ped))
 A

 Ainv <- solve(A)
 round(Ainv, 2)

#--------------------------------------------------------------

# Örnek 3.2.20: Tasarım matrislerinin oluşturulması
# Bağımlılık – Örnek 3.2.19
#
 y1 <- skaveri$skk
 y2 <- skaveri$ska
 y1

 y2

 X1 <- model.matrix(~1+cins, data=skaveri)
 fixnames <- colnames(X1)[-1]
 colnames(X1) <- paste0("t1_", c("mu", fixnames))
 X1

 X2 <- X1
 colnames(X2) <- paste0("t2_", c("mu", fixnames))
 X2

 Za <- model.matrix(~hayvan-1, data=skaveri)
 m <- nrow(X1); n <- nrow(ped)-ncol(Za)
 Zb <- matrix(nrow=m, ncol=n, 0)
 Z1 <- cbind(Zb, Za)
 colnames(Z1) <- paste0("t1_h", 1:ncol(Z1))
 Z1

 Z2 <- Z1
 colnames(Z2) <- paste0("t2_h", 1:ncol(Z1))
 Z2

 G <- matrix(nrow=2, ncol=2, c(20,18,18,40))
 G

 Ginv <- solve(G)
 Ginv

 R <- matrix(nrow=2, ncol=2, c(40,11,11,30))
 R

 Rinv <- solve(R)
 Rinv

#--------------------------------------------------------------
# Örnek 3.2.21: Karışık model eşitliklerinin oluşturulması
# Bağımlılık – Örnek 3.2.20
#
 X1X1 <- crossprod(X1,X1)*Rinv[1,1]
 X1X2 <- crossprod(X1,X2)*Rinv[1,2]
 X2X1 <- crossprod(X2,X1)*Rinv[2,1]
 X2X2 <- crossprod(X2,X2)*Rinv[2,2]

 X1Z1 <- crossprod(X1,Z1)*Rinv[1,1]
 X1Z2 <- crossprod(X1,Z2)*Rinv[1,2]
 X2Z1 <- crossprod(X2,Z1)*Rinv[2,1]
 X2Z2 <- crossprod(X2,Z2)*Rinv[2,2]

 Z1X1 <- crossprod(Z1,X1)*Rinv[1,1]
 Z1X2 <- crossprod(Z1,X2)*Rinv[1,2]
 Z2X1 <- crossprod(Z2,X1)*Rinv[2,1]
 Z2X2 <- crossprod(Z2,X2)*Rinv[2,2]

 Z1Z1 <- (crossprod(Z1,Z1)*Rinv[1,1]) + (Ainv*Ginv[1,1])
 Z1Z2 <- (crossprod(Z1,Z2)*Rinv[1,2]) + (Ainv*Ginv[1,2])
 Z2Z1 <- (crossprod(Z2,Z1)*Rinv[2,1]) + (Ainv*Ginv[2,1])
 Z2Z2 <- (crossprod(Z2,Z2)*Rinv[2,2]) + (Ainv*Ginv[2,2])

 Csira1 <- cbind(X1X1, X1X2, X1Z1, X1Z2)
 Csira2 <- cbind(X2X1, X2X2, X2Z1, X2Z2)
 Csira3 <- cbind(Z1X1, Z1X2, Z1Z1, Z1Z2)
 Csira4 <- cbind(Z2X1, Z2X2, Z2Z1, Z2Z2)
 C <- rbind(Csira1, Csira2, Csira3, Csira4)

 X1Ry1 <- crossprod(X1,y1)*Rinv[1,1] + crossprod(X1,y2)*Rinv[1,2]
 X2Ry2 <- crossprod(X2,y1)*Rinv[2,1] + crossprod(X2,y2)*Rinv[2,2]
 Z1Ry1 <- crossprod(Z1,y1)*Rinv[1,1] + crossprod(Z1,y2)*Rinv[1,2]
 Z2Ry2 <- crossprod(Z2,y1)*Rinv[2,1] + crossprod(Z2,y2)*Rinv[2,2]
 RHS <- rbind(X1Ry1, X2Ry2,Z1Ry1, Z2Ry2)
 RHS

#--------------------------------------------------------------
# Örnek 3.2.22: Çözümlerin elde edilmesi
# Bağımlılık – Örnek 3.2.21
#
 sol <- solve(C) %*% RHS
 colnames(sol) <- "Çözümler"
 round(sol, 3)

# Çözümleri tablo haline çevirme
 trt1 <- sol[which("t1"==substr(rownames(sol),1,2))]
 trt2 <- sol[which("t2"==substr(rownames(sol),1,2))]
 soldf <- cbind(trt1, trt2)
 rownames(soldf) <- c("mu","cins2", paste0("hayvan",1:8))
 soldf

#--------------------------------------------------------------

# Örnek 3.2.23: Indeks değeri hesaplama
# Bağımlılık – Örnek 3.2.22
#
 u1 <- soldf[3:10, 1]
 u2 <- soldf[3:10, 2]

# İlk senaryo
 w <- c(2, 3)
 T <- w[1]*u1 + w[2]*u2
 round(T, 3)

  order(T)

# İkinci senaryo
 w <- c(5, 2)
 T <- w[1]*u1 + w[2]*u2
 round(T, 3)

  order(T)
#--------------------------------------------------------------
# Örnek 3.2.24: İlişkili özelliklerde damızlık değeri tahmini
# Bağımlılık – Örnek 3.2.21, 3.2.22
#
 u1 <- soldf[3:10, 1]
 u2 <- soldf[3:10, 2]

# y1 ve y2 arasında fenotipik korelasyon
 cor(y1, y2)

# y1 ve y2 arasında genetik korelasyon
 cor(u1, u2)

 u2hat <- u1*G[1,2] / G[1,1]
 d <- u2-u2hat
 R1 <- rank(u2)
 R2 <- rank(u2hat)

 udf <- data.frame(u1, u2, u2hat, d, R1, R2)
 round(udf, 2)

# Gerçek ve tahmin damızlık değerleri ilişki grafiği
 plot(u2, u2hat, col="dodgerblue", pch=19,
  xlab="u", ylab=expression(hat(u)), main="Özellik 2")
 abline(lm(u2hat~u2, data=udf), col="red")

# Pearson korelasyonu
 cor(u2,u2hat)

# Rank korelasyonu
 cor(u2, u2hat, method="spearman")
#--------------------------------------------------------------
# BÖLÜM 4 -----------------------------------------------------

# Örnek 4.1.1: Damızlık değerleri sıralaması
 setwd("D:/lmmebook/wombat")
 ebv <- read.table("RnSoln_hayvan.dat", skip=1)
 colnames(ebv) <- c("Run_ID", "Orig_ID", "Tr", "Solution", "Inbreeding")
 opar <- par(mfrow=c(2,2))
 hist(ebv$Solution, col="orange", xlab="EBV", ylab="Frekans", 
    main="EBV Histogramı")
 plot(ebv$Solution, col="orange", xlab="Hayvan", ylab="EBV",
    main="EBV Serpilme")
 abline(h=0, col="blue", lwd=2, lty=2)
 ebv <- ebv[order(ebv$Solution, decreasing=TRUE),]
 head(ebv)

 tail(ebv)

 pastecs::stat.desc(ebv$Solution, basic=TRUE, desc=TRUE, 
    norm=FALSE, p=0.95)

 psych::describe(ebv$Solution)

 ft <- table(cut(ebv$Solution, breaks=20))
 ft

 plot(ebv$Solution, col="orange", xlab="Hayvan", ylab="EBV",
   main="Sıralı EBV Grafiği")
 abline(h=0, col="blue", lwd=2, lty=2)
 barplot(ft, col=topo.colors(20), xlab="Sınıflar", ylab="Frekans",
   main="Sınıflara göre EBV")
 par(opar)
 write.table(ebv, "cpsutver1_ebv_sorted.dat", 
    col.names=T, row.names=F, sep="\t")

#--------------------------------------------------------------

# Örnek 4.1.2: Yıl etkileri
 setwd("D:/lmmebook/wombat")
 yeareffects <- read.table("RnSoln_byil.dat", skip=1)
 colnames(yeareffects) <- c("Run_No", "Orig_ID", "Tr", "Solution")
 years <- c(min(yeareffects$Orig_ID):max(yeareffects$Orig_ID))
 plot(years, yeareffects$Solution, type="b", lwd=2, pch=19,
    col="blue", xlab="Yıllar", ylab="Etki",
    main="Yıllara göre etkiler")

#--------------------------------------------------------------
#--------------------------------------------------------------
# Örnek 4.2.1: Veri dosyasının okunması ve analize hazırlanması
#
 setwd("D:/lmmebook/datasets")
 cpsutver <- read.table(file="cpsutver1.dat",
   sep="\t", header = TRUE, stringsAsFactors = FALSE)

 cpsutver$hayvan <- as.factor(cpsutver$hayvan)
 cpsutver$baba <- as.factor(cpsutver$baba)
 cpsutver$ana <- as.factor(cpsutver$ana)
 cpsutver$byil <- as.factor(cpsutver$byil)
 cpsutver$bay <- as.factor(cpsutver$bay)
 cpsutver$byas <- as.integer(cpsutver$byas)
 cpsutver$sver305 <- as.numeric(cpsutver$sver305)

 str(cpsutver)

 head(cpsutver)
#--------------------------------------------------------------
# Örnek 4.2.2: Soyağacı ve ters A matrisi
# Bağımlılık - Örnek 4.2.1
#
 suppressPackageStartupMessages(installed <- require(nadiv))
 if (!installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))
 }
 cpped <- prepPed(cpsutver[, 1:3])
 Ainv <- makeAinv(cpped)$Ainv

#--------------------------------------------------------------

# Örnek 4.2.3: Modeli tanımlama ve eğitme
# Bağımlılık - Örnek 4.2.1, 4.2.2
#
 suppressPackageStartupMessages(installed <- require(gremlin))
 if (!installed) {
   install.packages("gremlin", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(gremlin))
 }

# Modelin tanımlanması ve analiz
 grmodel1 <- gremlin(sver305 ~ byil+bay+byas, random = ~ hayvan, 
   data = cpsutver,
   algit = "AI", 
   ginverse = list(hayvan = Ainv),
   Gstart = matrix(0.1), Rstart = matrix(0.6), 
   maxit = 25,  v = 2, vit = 1) 

#--------------------------------------------------------------

# Örnek 4.2.4: Modelin özetlenmesi
# Bağımlılık - Örnek 4.2.3
#
 summary(grmodel1)

#--------------------------------------------------------------

# Örnek 4.2.5: Model nesnesi bileşenleri
# Bağımlılık - Örnek 4.2.3
#
 names(grmodel1$grMod)

#--------------------------------------------------------------
# Örnek 4.2.6: Model sonuç değerlerine erişme
# Bağımlılık - Örnek 4.2.3
#
 nobs(grmodel1)

# Sabit etkiler
 fixef(grmodel1)

# Hatalar
 resids <- residuals(grmodel1)
 head(resids)

# Model başarım ölçütleri
 logLik(grmodel1)

 AIC(grmodel1)

 BIC(grmodel1)

#--------------------------------------------------------------
# Örnek 4.2.7: Varyans bileşenleri
# Bağımlılık - Örnek 4.2.3
#
 deltaSE("V1", grmodel1) # Eklemeli varyans (1. rast. etki varyansı)

 deltaSE("V2", grmodel1) # Kalıntı varyansı (2. rast. etki varyansı)

 deltaSE("V1 + V2", grmodel1) # Fenotipik varyans

 deltaSE(Vtop ~ V1 + V2, grmodel1) # Fenotipik varyans

#--------------------------------------------------------------
# Örnek 4.2.8: Standart sapmalar
# Bağımlılık - Örnek 4.2.3
#
 deltaSE(list(SD1 ~ sqrt(V1), SDresid ~ sqrt(V2)), grmodel1)

 deltaSE(list(SD1 ~ sqrt(G.hayvan), SDresid ~ sqrt(ResVar1)), grmodel1)

 deltaSE(list("sqrt(V1)", "sqrt(V2)"), grmodel1)

#--------------------------------------------------------------
# Örnek 4.2.9: Kalıtım derecesinin kestirimi
# Bağımlılık - Örnek 4.2.3
#
 deltaSE(h2 ~ V1 / (V1 + V2), grmodel1)

#--------------------------------------------------------------
# Örnek 4.2.10: Veri dosyasının okunması ve analize hazırlama
#
 setwd("D:/lmmebook/datasets")
 cpsutver <- read.table(file="cpsutver1.dat",
   sep="\t", header = TRUE, stringsAsFactors = FALSE)
 cpsutver$hayvan <- as.factor(cpsutver$hayvan)
 cpsutver$baba <- as.factor(cpsutver$baba)
 cpsutver$ana <- as.factor(cpsutver$ana)
 cpsutver$byil <- as.factor(cpsutver$byil)
 cpsutver$bay <- as.factor(cpsutver$bay)
 cpsutver$byas <- as.integer(cpsutver$byas)
 cpsutver$sver305 <- as.numeric(cpsutver$sver305)

# Veri çerçevesinde bireyler için eklemeli ve dominans etkileri için 
# sütun ekleme
 colnames(cpsutver)[1] <- "hayvanA"
 cpsutver$hayvanD <- cpsutver$hayvanA

 str(cpsutver)

 head(cpsutver)

# Soyağacı, A ve D matrislerinin tersi
 suppressPackageStartupMessages(installed <- require(nadiv))
 if (!installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))
 }

 cpped <- prepPed(cpsutver[, 1:3])

# Genelleştirilmiş ters matris
 Ainv <- makeAinv(cpped)$Ainv
 Dinv <- makeD(cpped)$Dinv

#--------------------------------------------------------------
# Örnek 4.2.11: Dominans etkili model oluşturma
# Bağımlılık -  Örnek 4.2.10
#
 suppressPackageStartupMessages(installed <- require(gremlin))
 if (!installed) {
   install.packages("gremlin", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(gremlin))
 }
#
 grmodel2 <- gremlin(sver305 ~ byil+bay+byas, 
   random = ~ hayvanA + hayvanD, 
   data = cpsutver, 
   ginverse = list(hayvanA = Ainv, hayvanD = Dinv),
   algit = "AI", maxit = 25,  v = 3, vit = 5) 

#--------------------------------------------------------------

# Örnek 4.2.12: Kalıtım derecesinin kestirimi
# Bağımlılık -  Örnek 4.2.11
#
# Kalıtım derecesi
 deltaSE(h2 ~ V1 / (V1 + V2 + V3), grmodel2)

 deltaSE(d2 ~ V2 / (V1 + V2 + V3), grmodel2) 

#--------------------------------------------------------------

# Örnek 4.2.13: Alternatif yoldan çözümler ve karşılaştırmalar
# Bağımlılık -  Örnek 4.2.3, 4.2.11
# 
# Log-olabilirlik değerlerini karşılaştırma
 logLik(grmodel1)

 logLik(grmodel2)

 anova(grmodel1, grmodel2)

#--------------------------------------------------------------

# Örnek 4.2.14: Dominans etkisini düşük değerle başlatma
# Bağımlılık -  Örnek 4.2.10, 4.2.11
# Dominans varyansı sıfıra yakın başlat
 grmodel3 <- update(grmodel2, 
   Gstart = list(0.1, 1e-8), Gcon = list("P", "F"))

 deltaSE(h2 ~ V1 / (V1 + V2 + V3), grmodel3)

 deltaSE(d2 ~ V2 / (V1 + V2 + V3), grmodel3) 

#--------------------------------------------------------------
#--------------------------------------------------------------
# Örnek 4.3.1: MCMCglmm paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(MCMCglmm))
 if (!installed) {
   install_packages("MCMCglmm", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MCMCglmm))
 }

#--------------------------------------------------------------

# Örnek 4.3.2: Soyağacı dosyasının okunması
 setwd("D:/lmmebook/datasets")
 cpped <- read.table(file="cppedigree2.dat",
   sep=" ", header = TRUE, stringsAsFactors=FALSE)
 for(i in 1:3) 
   cpped[,i] <- as.factor(cpped[,i])
 str(cpped)

 suppressPackageStartupMessages(is_installed <- require(psych))
 if (!is_installed) {
   install.packages("psych", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(psych))
 }
 psych::headTail(cpped, 5, 5)

#--------------------------------------------------------------
# Örnek 4.3.3: A matrisinin tersinin hesaplanması
# Bağımlılık – Örnek 4.3.2
#
 suppressPackageStartupMessages(installed <- require(nadiv))
 if (!installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))
 }
 cpped <- prepPed(cpped)

 Ainv <- inverseA(cpped)$Ainv

 Ainv[1:5,1:5]

#--------------------------------------------------------------
# Örnek 4.3.4: Veri dosyasının okunması
 cpsutver <- read.table(file="cpsutver1.dat",
   sep="\t", header = TRUE, stringsAsFactors = FALSE)
 cpsutver$hayvan <- as.factor(cpsutver$hayvan)
 cpsutver$baba <- as.factor(cpsutver$baba)
 cpsutver$ana <- as.factor(cpsutver$ana)
 cpsutver$byil <- as.factor(cpsutver$byil)
 cpsutver$bay <- as.factor(cpsutver$bay)
 cpsutver$byas <- as.integer(cpsutver$byas)
 cpsutver$sver305 <- as.numeric(cpsutver$sver305)

 str(cpsutver)

 psych::headTail(cpsutver)

#--------------------------------------------------------------
# Örnek 4.3.5: Önsel tanımlama
 onsel_1 <- list(
   G = list(G1 = list(V = 1, nu = 0.002)),
   R = list(V = 1, nu = 0.002)
 )

#--------------------------------------------------------------
# Örnek 4.3.6: MCMC modelini tanımlama
# Bağımlılık – Örnek 4.3.1, 4.3.3, 4.3.4, 4.3.5
#
 cpmodel_1 <- MCMCglmm(sver305 ~ 1,
   random = ~hayvan, family="gaussian",
   ginv = list(hayvan = Ainv),
   data = cpsutver, prior = onsel_1,
   nitt = 13000, burnin = 3000, thin = 10,
   pr = FALSE)

#--------------------------------------------------------------
# Örnek 4.3.7: MCMCglmm sonuçlarının özetlenmesi
# Bağımlılık – Örnek 4.3.6
#
 summary(cpmodel_1)

#--------------------------------------------------------------

# Örnek 4.3.8: MCMCglmm sabit etkiler için tanılama görselleri
# Bağımlılık – Örnek 4.3.6
#
 plot(cpmodel_1$Sol)
#--------------------------------------------------------------
# Örnek 4.3.9: MCMCglmm varyans bileşenleri için tanılama görselleri
# Bağımlılık – Örnek 4.3.6
#
 plot(cpmodel_1$VCV)
#--------------------------------------------------------------

# Örnek 4.3.10: MCMCglmm modelinin sonsallar için çalıştırılması
# Bağımlılık – Örnek 4.3.1, 4.3.3, 4.3.4, 4.3.5
#
 cpmodel_1a <- MCMCglmm(sver305 ~ 1,
   random = ~ hayvan, ginv = list(hayvan = Ainv),
   data =cpsutver, prior = onsel_1,
   pr=TRUE)

 print(cpmodel_1a$Sol[1:3, 1:5])

 plot(cpmodel_1a$Sol[,1]) #veya
 plot(cpmodel_1a$Sol[,"(Intercept)"])
 plot(cpmodel_1a$Sol[,2]) #veya
 plot(cpmodel_1a$Sol[,"hayvan.36"])

#--------------------------------------------------------------
# Örnek 4.3.11: MCMC modelini iyileştirme
# Bağımlılık – Örnek 4.3.1, 4.3.3, 4.3.4, 4.3.5
#
 cpmodel_2 <- MCMCglmm(sver305 ~ 1,
  random = ~hayvan, ginv = list(hayvan = Ainv),
  data=cpsutver, nitt=65000, thin=50, burnin=15000,
  prior=onsel_1, verbose=FALSE)

 plot(cpmodel_2$VCV)
#--------------------------------------------------------------
# Örnek 4.3.12: Heidelberg Durağanlık Testi 
# Bağımlılık – Örnek 4.3.11
#
 heidel.diag(cpmodel_2$VCV)
#--------------------------------------------------------------
# Örnek 4.3.13: Otokorelasyonları listeleme 
# Bağımlılık – Örnek 4.3.11
#
 autocorr.diag(cpmodel_2$VCV)
#--------------------------------------------------------------
# Örnek 4.3.14: Eklemeli genetik ve kalıntı varyansları
# Bağımlılık – Örnek 4.3.11
#
 mean(cpmodel_2$VCV[,1])

 mean(cpmodel_2$VCV[,2])

 median(cpmodel_2$VCV[,1])

 median(cpmodel_2$VCV[,2])

 posterior.mode(cpmodel_2$VCV)

#--------------------------------------------------------------
# Örnek 4.3.15: Eklemeli genetik ve kalıntı varyansların güven aralıkları
# Bağımlılık – Örnek 4.3.11
#
 HPDinterval(cpmodel_2$VCV)

#--------------------------------------------------------------
# Örnek 4.3.16: Önsellerin değiştirilmesi
# Bağımlılık – Örnek 4.3.1, 4.3.3, 4.3.4
#
# Fenotipik varyansın tanımı
 phenovar <- var(cpsutver$sver305, na.rm=TRUE)
# Önsel tanımı
 onsel_2 <- list(
   G = list(G1 = list(V = matrix(phenovar * 0.25), nu = 1)),
   R = list(V = matrix(phenovar * 0.75), nu = 1)
 )
# Modelin tanımı
 cpmodel_3 <- MCMCglmm(sver305 ~ 1,
   random = ~hayvan, ginv = list(hayvan = Ainv),
   data = cpsutver, prior = onsel_2, 
   nitt = 65000, thin = 50, burnin = 15000, verbose = FALSE)
#--------------------------------------------------------------
# Örnek 4.3.17: Farklı modellerdeki varyansların karşılaştırılması
# Bağımlılık – Örnek 4.3.6, 4.3.11, 4.3.16
#
 posterior.mode(cpmodel_1$VCV)

 posterior.mode(cpmodel_2$VCV)

 posterior.mode(cpmodel_3$VCV)

#--------------------------------------------------------------
# Örnek 4.3.18: Kalıtım derecesinin hesaplanması
# Bağımlılık – Örnek 4.3.5
#
 h2_cpmodel_1 <- cpmodel_1$VCV[,"hayvan"] /
   (cpmodel_1$VCV[,"hayvan"] + cpmodel_1$VCV[,"units"])

#--------------------------------------------------------------
# Örnek 4.3.19: Kalıtım derecesinin elde edilmesi
 mean(h2_cpmodel_1)

 posterior.mode(h2_cpmodel_1)

 effectiveSize(h2_cpmodel_1)

 HPDinterval(h2_cpmodel_1)

 HPDinterval(h2_cpmodel_1, 0.99)

 plot(h2_cpmodel_1)

#--------------------------------------------------------------

# Örnek 4.3.20: Karışık model (Sabit etki ekleme)
# Bağımlılık – Örnek 4.3.1, 4.3.3, 4.3.4, 4.3.16
#
 cpmodel_4 <- MCMCglmm(sver305 ~ byil,
   random = ~hayvan, ginv = list(hayvan = Ainv),
   data = cpsutver, prior = onsel_2, 
   nitt = 65000, thin = 50, burnin = 15000, verbose = FALSE)
#--------------------------------------------------------------
# Örnek 4.3.21: Sabit etkilerin  ve güven aralıkları
# Bağımlılık – Örnek 4.3.20
#
 posterior.mode(cpmodel_4$Sol)

 HPDinterval(cpmodel_4$Sol, 0.95)
#--------------------------------------------------------------

# Örnek 4.2.22: Model varyans bileşenlerinin görüntülenmesi
# Bağımlılık – Örnek 4.3.20
#
 posterior.mode(cpmodel_4$VCV)

#--------------------------------------------------------------

# Örnek 4.3.23: Kalıtım derecesinin hesaplanması
# Bağımlılık – Örnek 4.3.20
#
 h2_cpmodel_4 <- cpmodel_4$VCV[,"hayvan"]/
  (cpmodel_4$VCV[,"hayvan"] + cpmodel_4$VCV[,"units"])

# Kalıtım derecesi
 posterior.mode(h2_cpmodel_4)

# % 95 güven aralığı
 HPDinterval(h2_cpmodel_4,0.95)
#--------------------------------------------------------------
# Örnek 4.3.24: Karışık model (Rastlantısal etki ekleme)
# Bağımlılık – Örnek 4.3.1, 4.3.3, 4.3.4
#
 phenovar <- var(cpsutver$sver305, na.rm=TRUE)

 onsel_3 <- list(
  G=list(
    G1=list(V=matrix(phenovar/3), n=1),
    G2=list(V=matrix(phenovar/3), n=1)),
  R=list(V=matrix(phenovar/3), n=1)
 )

 cpmodel_5 <- MCMCglmm(sver305~bay+byas, random=~hayvan+byil,
   data=cpsutver, ginv = list(hayvan = Ainv), prior=onsel_3,
   nitt=65000, thin=50, burnin=15000,
   verbose=FALSE)
#--------------------------------------------------------------
# Örnek 4.3.25: Kalıtım derecesinin hesaplanması
# Bağımlılık – Örnek 4.3.25
#
 posterior.mode(cpmodel_5$VCV)

 h2_cpmodel_5 <- cpmodel_5$VCV[,"hayvan"]/
  (cpmodel_5$VCV[,"hayvan"] + cpmodel_5$VCV[,"byil"] +
   cpmodel_5$VCV[,"units"])

 posterior.mode(h2_cpmodel_5)

 HPDinterval(h2_cpmodel_5, 0.95)

#--------------------------------------------------------------

# Örnek 4.3.26: Karışık model (Tüm etkilerin dahil edilmesi)
# Bağımlılık – Örnek 4.3.1, 4.3.3, 4.3.4
#
 phenovar <- var(cpsutver$sver305, na.rm=TRUE)
 onsel_4 <- list(
  G=list(
    G1=list(V=matrix(phenovar/4), n=1),
    G2=list(V=matrix(phenovar/4), n=1),
    G3=list(V=matrix(phenovar/4), n=1)),
  R=list(V=matrix(phenovar/4), n=1)
 )

 cpmodel_6 <- MCMCglmm(sver305~bay+byas, random=~hayvan+byil+ana,
   data=cpsutver, ginv = list(hayvan = Ainv), prior=onsel_4,
   nitt=65000, thin=50, burnin=15000,
   verbose=FALSE)
#--------------------------------------------------------------
# Örnek 4.3.27: Kalıtım derecesinin hesaplanması
# Bağımlılık – Örnek 4.3.26
#
 posterior.mode(cpmodel_6$VCV)

 h2_cpmodel_6 <- cpmodel_6$VCV[,"hayvan"]/
  (cpmodel_6$VCV[,"hayvan"] + cpmodel_6$VCV[,"byil"] +
  cpmodel_6$VCV[,"ana"] + cpmodel_6$VCV[,"units"])

 posterior.mode(h2_cpmodel_6)

 HPDinterval(h2_cpmodel_6, 0.95)
#--------------------------------------------------------------
# Örnek 4.3.28: Modellerin karşılaştırılması
# Bağımlılık – Örnek 4.3.16, 4.3.20, 4.3.23, 4.3.26
#

 cpmodel_3$DIC

 cpmodel_4$DIC

 cpmodel_5$DIC

 cpmodel_6$DIC

#--------------------------------------------------------------
# Örnek 4.3.29: Soyağacı dosyasının okunması ve ters A matrisi
 suppressPackageStartupMessages(is_installed <- require(MCMCglmm))
 if (!is_installed) {
   install_packages("MCMCglmm", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MCMCglmm))
 }	
 suppressPackageStartupMessages(is_installed <- require(nadiv))
 if (!is_installed) {
   install_packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))
 }

#
 setwd("D:/lmmebook/datasets")
 sheepped <- read.table("sheepped3.dat", sep="\t", header=TRUE)
 str(sheepped)

 sheepped <- nadiv::prepPed(sheepped)
 Ainv <- MCMCglmm::inverseA(sheepped)$Ainv
 Ainv[1:5, 1:5]

#--------------------------------------------------------------
# Örnek 4.3.30: Veri dosyasının okunması ve analize hazırlama
 setwd("D:/lmmebook/datasets")
 sheep <- read.table("sheep3.dat", sep="\t", header=TRUE)

# Veri yapısı
 str(sheep)

# Faktöre çevirme
 sheep$animal <- as.factor(sheep$animal)
 sheep$sire <- as.factor(sheep$sire)
 sheep$dam <- as.factor(sheep$dam)
 sheep$cins <- as.factor(sheep$cins)
 sheep$dyil <- as.factor(sheep$dyil)
 sheep$dtip <- as.factor(sheep$dtip)

# Düzenlenmiş veri yapısı
 str(sheep)
#--------------------------------------------------------------
# Örnek 4.3.31: Çok özellik için MCMCglmm modeli tanımlama
# Bağımlılık – Örnek 4.3.29, 4.3.30
#
 suppressPackageStartupMessages(is_installed <- require(MCMCglmm))
 if (!is_installed) {
   install_packages("MCMCglmm", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MCMCglmm))
 }	
 phenovars <- c(
   var(sheep$typa, na.rm=TRUE),
   var(sheep$lcap, na.rm=TRUE),
   var(sheep$vca, na.rm=TRUE))

 k <- length(phenovars)
 vcovmat = diag(k)*phenovars/3
 vcovmat

 onsel_1 <- list(
   G=list(G1=list(V=vcovmat, nu=2)),
   R=list(V=diag(k)/k, nu=2))
 onsel_1 

 sheepmt_1 <- MCMCglmm(cbind(typa, lcap, vca)~trait-1,
   random=~us(trait):animal,
   rcov=~us(trait):units,
   family=c("gaussian","gaussian", "gaussian"),
   ginverse=list(animal = Ainv), data=sheep,
   prior=onsel_1, 
   nitt=100000, burnin=10000, thin=10,
   verbose=FALSE)

#--------------------------------------------------------------

# Örnek 4.3.32: Modelin özetlenmesi
# Bağımlılık – Örnek 4.3.31
#
 summary(sheepmt_1)

#--------------------------------------------------------------
# Örnek 4.3.33: Sonsal varyans-kovaryans kestirimleri
# Bağımlılık – Örnek 4.3.31
#
 posterior.mode(sheepmt_1$VCV)

#--------------------------------------------------------------
# Örnek 4.3.34: Kalıtım derecelerinin hesaplanması
# Bağımlılık – Örnek 4.3.31
#
 h2_typa <- sheepmt_1$VCV[,"traittypa:traittypa.animal"]/
   (sheepmodel_1$VCV[,"traittypa:traittypa.animal"]+
    sheepmodel_1$VCV[,"traittypa:traittypa.units"])

 posterior.mode(h2_typa)

 h2_lcap <- sheepmt_1$VCV[,"traitlcap:traitlcap.animal"]/
   (sheepmodel_1$VCV[,"traitlcap:traitlcap.animal"]+
    sheepmodel_1$VCV[,"traitlcap:traitlcap.units"])

 posterior.mode(h2_lcap)

 h2_vca <- sheepmt_1$VCV[,"traitvca:traitvca.animal"]/
   (sheepmodel_1$VCV[,"traitvca:traitvca.animal"]+
    sheepmodel_1$VCV[,"traitvca:traitvca.units"])

 posterior.mode(h2_vca)

#--------------------------------------------------------------

# Örnek 4.3.35: Genetik korelasyonların hesaplanması
# Bağımlılık – Örnek 4.3.31
#
 gencors <- sheepmt_1$VCV[,"traittypa:traitlcap.animal"]/
   sqrt(sheepmt_1$VCV[,"traittypa:traittypa.animal"]* 
   sheepmt_1$VCV[,"traitlcap:traitlcap.animal"])

 gencor_typa_lcap <- mean(gencors)
 gencor_typa_lcap

 gencors <- sheepmt_1$VCV[,"traittypa:traitvca.animal"]/
   sqrt(sheepmt_1$VCV[,"traittypa:traittypa.animal"]* 
   sheepmt_1$VCV[,"traitvca:traitvca.animal"])

 gencor_typa_vca <- mean(gencors)
 gencor_typa_vca

 gencors <- sheepmt_1$VCV[,"traitlcap:traitlcap.animal"]/
   sqrt(sheepmt_1$VCV[,"traitlcap:traitlcap.animal"]* 
   sheepmt_1$VCV[,"traitvca:traitvca.animal"])

 gencor_lcap_vca <- mean(gencors)
 gencor_lcap_vca

#--------------------------------------------------------------

# Örnek 4.3.36: MCMCglmm modeline tüm etkilerin dahil edilmesi
# Bağımlılık – Örnek 4.3.29, 4.3.30
#	
# Özelliklerin fenotipik varyansları
 phenovars <- c(
   var(sheep$typa, na.rm=TRUE),
   var(sheep$lcap, na.rm=TRUE),
   var(sheep$vca, na.rm=TRUE))

# Özellik sayısı 
 k <- length(phenovars)

# Varyans-kovaryans matrisi 
 vcovmat = diag(k)*phenovars/3
 vcovmat

# Önselin tanımlanması
 onsel_2 <- list(
   G=list(
    G1=list(V=vcovmat, nu=2),  #1. etki için varyans-kovaryans matrisi
    G2=list(V=vcovmat, nu=2)), #2. etki için varyans-kovaryans matrisi
   R=list(V=diag(k)/k, nu=2))  #Kalıntı için varyans-kovaryans matrisi

# Paketin yüklenmesi
 suppressPackageStartupMessages(is_installed <- require(MCMCglmm))
 if (!is_installed) {
   install_packages("MCMCglmm", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MCMCglmm))
 }

# Model tanımı
 sheepmt_2 <- MCMCglmm(cbind(typa, lcap, vca)~trait-1 + 
   trait:cins + trait:dtip,
   random=~us(trait):animal + us(trait):dyil,
   rcov=~us(trait):units,
   family=c("gaussian","gaussian", "gaussian"),
   ginverse=list(animal = Ainv), data=sheep,
   prior=onsel_2, 
   nitt=100000, burnin=10000, thin=10,
   verbose=FALSE)

# Modelin özetlenmesi
 summary(sheepmt_2)

 plot(sheepmt_2$VCV[,"traittypa:traittypa.animal"])

#--------------------------------------------------------------
#--------------------------------------------------------------

# Örnek 4.4.1: Doğrusal regresyon için veri benzetimi 
 set.seed(123)
 n <-100  #Gözlem sayısı
 x1 <- rnorm(n, 40, 10)  #1. bağımsız değişken 
 x2 <- rnorm(n, 100, 20) #2. bağımsız değişken
 e <- rnorm(n, 5, 2)  # Rastlantısal hata
 a <- 50  # Kesme yüksekliği (intercept)
 b1 <- 3  # x1 için regresyon katsayısı
 b2 <- 2  # x2 için regresyon katsayısı
 y <- a + b1*x1 + b2*x2 + e  # Bağımlı değişken
 df <- data.frame(y, x1, x2)  # Veri çerçevesi
 pairs(df, col="dodgerblue")  # İlişki grafikleri

#--------------------------------------------------------------
# Örnek 4.4.2: Doğrusal regresyon için Stan modeli kodu
 linreg_code <-"
 data {
   int<lower=0> N;       // Gözlem sayısı
   int<lower=0> K;       // Bağımsız değişken sayısı
   matrix[N, K] X;       // Tasarım matrisi
   real y[N];            // Gözlemler
 }
 parameters {
   real alpha;           // Kesme yüksekliği (intercept)
   vector[K] beta;       // Regresyon katsayıları
   real<lower=0> sigma;  // Hata standart sapması
 }
 model {
   vector[N] mu;
   mu <- alpha + X * beta;
   y ~ normal(mu, sigma); // Model (Hedef yoğunluk)
   // target += normal_lpdf(y | mu, sigma);
 }
 generated quantities{
  vector[N] log_lik;
  for (n in 1:N) log_lik[n] = normal_lpdf(y[n] | alpha + X[n, ] * beta, sigma);
 }
 "

#--------------------------------------------------------------
# Örnek 4.4.3: Doğrusal regresyon için Stan modeli kodu
// Önseller
 mu ~ normal(0, 10);
 sigma ~ student_t(3, 0, 1);

#--------------------------------------------------------------
# Örnek 4.4.4: Stan verisini hazırlama
# Bağımlılık -  Örnek 4.4.1, 4.4.2
# Tasarım matrisi ve gözlemler vektörü
# X matrisi ve y vektörü
 X <- df[, c("x1","x2")]
 y <- df$y
#
# Stan verisi
 stan_data <- list(
     N = nrow(X),
     K = ncol(X),
     X = X,
     y = y
 )

#--------------------------------------------------------------

# Örnek 4.4.5: Stan programını çalıştırma 1 (Model kodu dizesiyle)
# Bağımlılık -  Örnek 4.4.4
#
 suppressPackageStartupMessages(installed <- require(rstan))
 if (!installed) {
   remove.packages(c("StanHeaders", "rstan"))
   install.packages("StanHeaders", repos="https://mc-stan.org/r-packages/")  
   install.packages("rstan", repos="https://mc-stan.org/r-packages/")  
   suppressPackageStartupMessages(require(rstan))
 }

# Stan'in çalıştırılması
 stanmodel1 <- rstan::stan(
    model_code=linreg_code, 
    data=stan_data
 )

#--------------------------------------------------------------

# Örnek 4.4.6: Stan programını çalıştırma 1 (Model kodu dizesiyle)
# Bağımlılık -  Örnek 4.4.2, 4.4.5
 setwd("D:/lmmebook/stan")
 write(linreg_code, "linearregression1.stan")
 stanc("linearregression1.stan")

#--------------------------------------------------------------

# Örnek 4.4.7a: Stan programını çalıştırma 1 (Stan kod dosyasıyla)
# Bağımlılık -  Örnek 4.4.6
# Stan'in çalıştırılması
 stanmodel1 <- rstan::stan(
    file="D:/lmmebook/stan/linearregression1.stan",
    data=stan_data)

#--------------------------------------------------------------

# Örnek 4.4.7b: Stan programını çalıştırma 1 (Stan kod dosyasıyla)
# Bağımlılık -  Örnek 4.4.6
#
 standso <- stan_model('D:/lmmebook/stan/linearregression1.stan',
  model_name = "Linear Regression")
 stanmodel1 <- sampling(standso, data=stan_data)

#--------------------------------------------------------------

# Örnek 4.4.8: Stan sonuç nesnesi yapısı
# Bağımlılık -  Örnek 4.4.5
#
 str(stanmodel1, max.level=2) 

#--------------------------------------------------------------

# Örnek 4.4.9: Stan sonuç nesnesi elemanlarına erişme
# Bağımlılık -  Örnek 4.4.5
#
 model_name <- stanmodel@model_name  # Stan model adı
 model_name

 modelcode <- stanmodel@stanmodel    # Stan model kodu
 modelcode

#--------------------------------------------------------------
# Örnek 4.4.10: Stan sonuç nesnesi elemanlarına erişim yöntemleri
 methods(class = "stanfit")

#--------------------------------------------------------------
# Örnek 4.4.11: Stan sonuç nesnesi slotlarına erişme
# Bağımlılık -  Örnek 4.4.5
#
 modelcode <- get_stancode(stanmodel1)
 cat(modelcode)


#--------------------------------------------------------------

# Örnek 4.4.12a: Başlatma değerlerini öğrenme
# Bağımlılık -  Örnek 4.4.5
#
 ivals <- get_inits(stanmodel1)
 ivals_chain2 <- ivals[[2]]

 names(ivals_chain2)

 ivals_chain2$alpha

#--------------------------------------------------------------
# Örnek 4.4.12b: RNG tohum sayısı
# Bağımlılık -  Örnek 4.4.5
 get_seed(stanmodel1)

#--------------------------------------------------------------
# Örnek 4.4.13: Zincirlere göre hesaplama süreleri
# Bağımlılık -  Örnek 4.4.5
#
 get_elapsed_time(stanmodel1)

#--------------------------------------------------------------

# Örnek 4.4.14: Örnekleyici parametrelerine erişme
# Bağımlılık -  Örnek 4.4.5
#
 samppars <- get_sampler_params(stanmodel1)
 str(samppars)

# 1. zincir için örnekleyici parametreleri
 chpars1 <- data.frame(samppars[1])
 head(chpars1)

#--------------------------------------------------------------

# Örnek 4.4.15: Stan analizi sonuçlarının incelenmesi
# Bağımlılık -  Örnek 4.4.5
#
 modelsum <- summary(stanmodel1)$summary
 round(head(modelsum),2)

 round(tail(modelsum,10),2)

# Zincirlere göre özetleme
 modelcsum <- summary(stanmodel1)$c_summary
 round(head(modelcsum),2)

#--------------------------------------------------------------
# Örnek 4.4.16: Model parametreleri
# Bağımlılık -  Örnek 4.4.5
#
 params <- c("alpha", "beta","sigma", "lp__")
 print(stanmodel1, pars=params, probs=c(.1,.5,.9))

#--------------------------------------------------------------

# Örnek 4.4.17: Parametrelerin çıkarılması
# Bağımlılık -  Örnek 4.4.5
#
# Parametrelerin sonsal ortalamaları 1
 postmeans <- get_posterior_mean(stanmodel1)
 head(postmeans)

# Parametrelerin sonsal ortalamaları 2
 postdf <- summary(stanmodel1)$summary
 head(postdf[,"mean"])

# Parametrelerin standart sapmaları
 head(postdf[,"sd"])

#--------------------------------------------------------------
# Örnek 4.4.18: Sonsalların çıkarılması
# Bağımlılık -  Örnek 4.4.5
#
# extract ile çıkarma
 posteriors1 <- rstan::extract(stanmodel1)
 names(posteriors1)
  
 alpha <- posteriors1$alpha
 head(alpha)

 mean(alpha)

 median(alpha)

 quantile(alpha)

 hist(alpha, col="gray", 
   xlab="Alpha", ylab="Frekans", main="Alpha sonsal histogramı")

# Matris veya veri çerçevesi olarak çıkarma
 posteriors2 <- as.matrix(stanmodel1, pars=c("alpha","beta","sigma"))
 #posteriors3 <- as.data.frame(stanmodel1, pars=c("alpha","beta","sigma"))

 head(posteriors2)

 mean(posteriors2[,"alpha"])

 mean(posteriors2[,"alpha"])

 median(posteriors2[,"alpha"])

 quantile(posteriors2[,"alpha"])

#--------------------------------------------------------------

# Örnek 4.4.19: Olasılıkların hesaplanması
# Bağımlılık -  Örnek 4.4.18
#
 sum(posteriors2[,"beta[1]"] > 0) / length(posteriors2[,"beta[1]"])

 sum(posteriors2[,"beta[1]"] > 4) / length(posteriors2[,"beta[1]"])

 sum(posteriors2[,"beta[2]"] > 0) / length(posteriors2[,"beta[2]"])

#--------------------------------------------------------------

# Örnek 4.4.20: Görselleştirme 1
# Bağımlılık -  Örnek 4.4.18
#
 suppressPackageStartupMessages(installed <- require(ggplot2))
 if (!installed) {
   install.packages("ggplot2", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ggplot2))
 }

 alpha_sonsal_df <- data.frame(list(alpha= posteriors2[,"alpha"]))
 alpha_hist <- ggplot(alpha_sonsal_df, aes(x=alpha)) +
    geom_histogram(bins=15, fill="dodgerblue", color="lightblue")
 alpha_hist

#--------------------------------------------------------------

# Örnek 4.4.21: Görselleştirme 2
# Bağımlılık -  Örnek 4.4.18
#
 opar <- par(mfrow=c(2,2))
 plot(density(posteriors2[,"alpha"]), main = "Alpha")
 abline(v = mean(posteriors2[,"alpha"]), col = 2, lty = 2)
 plot(density(posteriors2[,"sigma"]), main = "Sigma")
 abline(v = mean(posteriors2[,"sigma"]), col = 2, lty = 2)
 plot(density(posteriors2[,"beta[1]"]), main = "Beta-1")
 abline(v = mean(posteriors2[,"beta[1]"]), col = 2, lty = 2)
 plot(density(posteriors2[,"beta[2]"]), main = "Beta-2")
 abline(v = mean(posteriors2[,"beta[2]"]), col = 2, lty = 2)
 par(opar)

#--------------------------------------------------------------

# Örnek 4.4.22: Görselleştirme 3 (İz grafikleri)
# Bağımlılık -  Örnek 4.4.18
#
 opar <- par(mfrow=c(2,2))
 plot(posteriors2[,"alpha"], type = "l", ylab="Alpha")
 plot(posteriors2[,"sigma"], type = "l", ylab="Sigma")
 plot(posteriors2[,"beta[1]"], type = "l", ylab="Beta-1")
 plot(posteriors2[,"beta[2]"], type = "l", ylab="Beta-2")
 par(opar)

#--------------------------------------------------------------

# Örnek 4.4.23: Modeli kaydetme ve geri yükleme
# Bağımlılık -  Örnek 4.4.1
#
 save.image("stanlinearmodel1.RData")   # Kaydet
 load("stanlinearmodel1.RData")         # Yükle

#--------------------------------------------------------------

# Örnek 4.4.24: Bir modeli yeniden kullanma
# Bağımlılık -  Örnek 4.4.5
# 
 stanmodel2 <- stan(fit=stanmodel1, data=stan_data,
   iter=50, warmup=25, 
   init="random", init_r=5, verbose=TRUE)

 postmeans2 <- get_posterior_mean(stanmodel2)
 head(postmeans2)

#--------------------------------------------------------------

# Örnek 4.4.25: Fonksiyonla başlatma 1
# Bağımlılık -  Örnek 4.4.5
#
 initpars <- function() {
   list(alpha = 50, 
   beta=array(c(2.1,2.5), dim=c(2,1)),
   sigma = 2)
 }
#
 stanmodel3 <- stan(fit=stanmodel1, data=stan_data,
   init=initpars,
   iter=50, warmup=25, verbose=TRUE)

 postmeans3 <- get_posterior_mean(stanmodel3)
 head(postmeans3)

#--------------------------------------------------------------

# Örnek 4.4.26: Fonksiyonla başlatma 2
# Bağımlılık -  Örnek 4.4.5
#
 initpars2 <- function(chain_id=1) {
   list(alpha = 50, 
   beta=array(c(2.1,2.5), dim=c(2,1)),
   sigma = 2)
 }
 n_chains <- 4
 initchains <- lapply(1:n_chains, function(id) initpars2(chain_id = id))

 initchains

 stanmodel4 <- stan(fit=stanmodel1, data=stan_data,
   init = initchains,
   iter=50, warmup=25, verbose=TRUE)

 postmeans4 <- get_posterior_mean(stanmodel3)
 head(postmeans3)

#--------------------------------------------------------------

# Örnek 4.4.27: Mevcut bir modelin farklı veri setleriyle kullanılması
# Bağımlılık -  Örnek 4.4.5
#
# X matrisi ve y vektörü
 X <- df[, c("x1","x2")]
 y <- df$y
#
# Stan verisi 1
 stan_data <- list(
     N = nrow(X),
     K = ncol(X),
     X = X,
     y = y
 )

# Stan verisi 2
 stan_data2 <- list(
     N = nrow(X),
     K = ncol(X),
     X = X,
     y = rnorm(n, 300, 50)
 )

 basemodel <- stan_model(model_code = linreg_code, verbose = TRUE)
 stanmodel5 <- sampling(basemodel, data = stan_data)
 stanmodel6 <- sampling(basemodel, data = stan_data2)

#--------------------------------------------------------------

# Örnek 4.4.28: Histogramlar ve yoğunluk grafikleri
# Bağımlılık -  Örnek 4.4.5
#
 rstan_ggtheme_options(panel.background = 
    ggplot2::element_rect(fill = "white"), legend.position = "top")
 rstan_gg_options(fill = "skyblue", color = "skyblue4", pt_color = "red")

# Parametrelerin güven aralığı (sadece plot şeklinde de kullanılabilir)
 stan_plot(stanmodel1, pars=c("alpha","beta", "sigma"),
   ci_level = 0.80, outer_level = 0.95, fill_color = "green")

# Histogramlar ve yoğunluk grafikleri
 stan_hist(stanmodel1, ncol=4, pars=c("alpha","beta", "sigma"))
 stan_dens(stanmodel1, ncol=4, pars=c("alpha","beta", "sigma"))

# Serpilme grafiği
 stan_scat(stanmodel1,  pars=c("sigma","beta[1]"))

# Rhat grafiği
 stan_rhat(stanmodel1, pars=c("alpha","beta", "sigma"))

# Model tanılama grafiği
 stan_diag(stanmodel1)


#--------------------------------------------------------------

# Örnek 4.4.29: Grafiklerin plot ile çizilmesi
# Bağımlılık -  Örnek 4.4.5
#
 plot(stanmodel1, pars = c("alpha","beta")) + ggtitle("Güven aralıkları")
 plot(stanmodel1, plotfun = "hist", pars = c("alpha","beta"), 
   include = FALSE) + ggtitle("Histogram")
 plot(stanmodel1, show_density = TRUE, pars = c("alpha","beta"), 
   ci_level = 0.5, fill_color = "purple") + ggtitle("Yoğunluk grafiği")
 plot(stanmodel1, plotfun = "rhat", pars = c("alpha","beta")) + 
   ggtitle("Rhat grafiği")
 plot(stanmodel1, plotfun = "diag") + ggtitle("Tanılama Grafiği")
 plot(stanmodel1, plotfun = "trace", pars = c("alpha","beta"), inc_warmup = FALSE)

#--------------------------------------------------------------

# Örnek 4.4.30: Bayesplot paketinin kurulması
 suppressPackageStartupMessages(installed <- require(bayesplot))
 if (!installed) {
   remotes::install_github("stan-dev/bayesplot")
   suppressPackageStartupMessages(require(bayesplot))
 }

#--------------------------------------------------------------

# Örnek 4.4.31: Bayesplot paketindeki renk paletleri
# Bağımlılık -  Örnek 4.4.30
#
 opar <- par(ask=TRUE)
 color_scheme_view(c("blue", "gray", "green", "pink", 
  "purple", "red","teal","yellow"))

# Viridis paletleri
 color_scheme_view(c("viridis", "viridisA", "viridisB", 
   "viridisC", "viridisD", "viridisE"))

# Geçişli paletler
 scheme1 <-"mix-blue-red"
 scheme2 <-"mix-green-red"
 scheme3 <-"mix-orange-red"
 color_scheme_view(c(scheme1, scheme2, scheme3))
 par(opar)

#--------------------------------------------------------------

# Örnek 4.4.32: Bayesplot MCMC sonuçlarını görselleştirme fonksiyonları
# 
 available_mcmc()

 available_mcmc(pattern = "_neff")

 help("mcmc_combo", package=bayesplot)

#--------------------------------------------------------------

# Örnek 4.4.33: Bayesplot ile histogramlar
# Bağımlılık -  Örnek 4.4.5, 4.4.30
#
 color_scheme_set("green")
 ptitle <- ggtitle("Model katsayıları ve Sigma Histogramları (Tümleşik)")
 mcmc_hist(stanmodel1, pars = c("alpha", "beta[1]", "beta[2]","sigma")) +
   ptitle

 ptitle <- ggtitle("Model katsayıları ve Sigma Histogramları (Zincirlere göre)")
 mcmc_hist_by_chain(stanmodel1, 
   pars = c("alpha", "beta[1]", "beta[2]","sigma")) + ptitle

#--------------------------------------------------------------

# Örnek 4.4.34: Bayesplot ile güven aralıkları 1
# Bağımlılık -  Örnek 4.4.5, 4.4.24, 4.4.30
#
 color_scheme_set("blue")
 ptitle <- ggtitle("Katsayıların Güven Aralıkları – stanmodel1")
 mcmc_intervals(stanmodel1, pars = c("alpha","beta[1]", "beta[2]")) + ptitle
 color_scheme_set("red")
 ptitle <- ggtitle("Katsayıların Güven Aralıkları – stanmodel2")
 mcmc_intervals(stanmodel2, pars = c("alpha","beta[1]", "beta[2]")) + ptitle

#--------------------------------------------------------------

# Örnek 4.4.35: Bayesplot ile güven aralıkları 2
# Bağımlılık -  Örnek 4.4.5, 4.4.24, 4.4.30
#
 color_scheme_set("blue")
 ptitle <- ggtitle("Beta Alan Grafikleri – stanmodel1")
 mcmc_areas(stanmodel1, pars = c("beta[1]", "beta[2]")) + ptitle
 color_scheme_set("red")
 ptitle <- ggtitle("Beta Alan Grafikleri – stanmodel2")
 mcmc_areas(stanmodel2, pars = c("beta[1]", "beta[2]")) + ptitle

#--------------------------------------------------------------

# Örnek 4.4.36: Bayesplot ile yoğunluk grafikleri
# Bağımlılık -  Örnek 4.4.5, 4.4.30
#
 color_scheme_set("mix-red-blue")
 ptitle <- ggtitle("Beta Yoğunluk Grafikleri – Birleşik")
 mcmc_dens(stanmodel1, pars = c("beta[1]", "beta[2]")) + ptitle
 ptitle <- ggtitle("Beta Yoğunluk Grafikleri – Zincirlere göre")
 mcmc_dens_chains(stanmodel1, pars = c("beta[1]", "beta[2]")) + ptitle
 ptitle <- ggtitle("Beta Yoğunluk Grafikleri – Zincirlere göre")
 mcmc_dens_overlay(stanmodel1, pars = c("beta[1]", "beta[2]")) + ptitle

#--------------------------------------------------------------

# Örnek 4.4.37: Bayesplot ile keman grafikleri
# Bağımlılık -  Örnek 4.4.5, 4.4.30
#
 color_scheme_set("green")
 ptitle <- ggtitle("Beta Keman Grafikleri")
 mcmc_violin(stanmodel1, pars = c("beta[1]", "beta[2]"), 
   probs = c(0.05, 0.5, 0.95)) + ptitle

#--------------------------------------------------------------

# Örnek 4.4.38: Bayesplot ile serpilme grafikleri
# Bağımlılık -  Örnek 4.4.5, 4.4.30
#
 color_scheme_set("brightblue")
 ptitle <- ggtitle("Beta-1 ve Sigma Serpilme Grafiği")
 mcmc_scatter(stanmodel1, pars = c("beta[1]", "sigma")) + ptitle

 color_scheme_set("orange")
 ptitle <- ggtitle("Beta-1 ve Sigma Hex Grafiği")
 mcmc_hex(stanmodel1, pars = c("beta[1]", "sigma")) + ptitle

 color_scheme_set("purple")
 mcmc_pairs(stanmodel1, pars = c("beta[1]", "beta[2]", "sigma"),
   diag_fun="dens", off_diag_fun="hex")

#--------------------------------------------------------------

# Örnek 4.4.39: Bayesplot ile kombo grafikler
# Bağımlılık -  Örnek 4.4.5, 4.4.30
#
 color_scheme_set("brightblue")
 mcmc_combo(
  stanmodel1,
  combo = c("intervals", "dens", "hist"),
  pars = c("alpha", "beta[1]", "beta[2]"),
  widths = c(2, 1, 1)
 )

#--------------------------------------------------------------

# Örnek 4.4.40: İz grafikleri 1 (rstan traceplot ile)
# Bağımlılık -  Örnek 4.4.5, 4.4.24
#
# stanmodel1 için iz grafiği
 plot(stanmodel1, plotfun="trace", pars=c("alpha","beta"))
 traceplot(stanmodel1, pars=c("alpha","beta"), include = TRUE, 
   unconstrain = FALSE, inc_warmup = FALSE, window=NULL, 
   nrow = NULL, ncol = NULL)

# window argümanı istenen yineleme aralığını belirtir
 traceplot(stanmodel1, pars=c("alpha","beta"), include = TRUE, 
   unconstrain = FALSE, inc_warmup = FALSE, window = c(1000,2000), 
   nrow = 1, ncol = 3)

# stanmodel2 için iz grafiği
 traceplot(stanmodel2, pars=c("alpha","beta"))

#--------------------------------------------------------------

# Örnek 4.4.41: İz grafikleri 2 (ısınma aşaması dahil)
# Bağımlılık -  Örnek 4.4.5
#
 tp <- traceplot(stanmodel1, pars = c("alpha", "beta"), inc_warmup=TRUE)
 tp + scale_color_discrete() + theme(legend.position = "bottom")

#--------------------------------------------------------------

# Örnek 4.4.42: İz grafikleri 3 (bayesplot mcmc_trace ile)
# Bağımlılık -  Örnek 4.4.6, 4.4.27
#
 suppressPackageStartupMessages(installed <- require(bayesplot))
 if (!installed) {
   remotes::install_github("stan-dev/bayesplot")
   suppressPackageStartupMessages(require(bayesplot))
 }
 color_scheme_set("green")
 mcmc_trace(stanmodel1, pars=c("alpha","beta[1]","beta[2]"))
 color_scheme_set("red")
 mcmc_trace(stanmodel2, pars=c("alpha","beta[1]","beta[2]"))

#--------------------------------------------------------------

# Örnek 4.4.43: Zincirlere göre karşılaştırma
# Bağımlılık -  Örnek 4.4.5
#
 color_scheme_set("brightblue")
 mcmc_trace_highlight(stanmodel1, pars = "beta[1]", highlight = 1, size = 2)

#--------------------------------------------------------------

# Örnek 4.4.44: Rhat grafiği
# Bağımlılık -  Örnek 4.4.5
#
 color_scheme_set("darkgray") 
 rhats <- rhat(stanmodel1, pars=c("alpha","beta[1]", "beta[2]", "sigma"))
 rhats

 color_scheme_set("blue")
 ptitle <- ggtitle("Rhat grafiği")
 mcmc_rhat(rhats) + ptitle +yaxis_text(hjust = 1) 
#--------------------------------------------------------------

# Örnek 4.4.45: N_eff ve oranlarını hesaplama
# Bağımlılık -  Örnek 4.4.5
#
 n_effs <- summary(stanmodel1, pars=c("alpha", "beta"))$summary[,"n_eff"]
 N <- length(extract(stanmodel1, pars = "alpha")[[1]])
 head(n_effs)
 
 neffratios <- n_effs/N
 neffratios

#--------------------------------------------------------------

# Örnek 4.4.46: Neff oranlarının hesaplanması ve görselleştirilmesi
# Bağımlılık -  Örnek 4.4.5
#
 neffratios <- neff_ratio(stanmodel1)
 head(neffratios, 5)

 tail(neffratios, 5)

 color_scheme_set("brightblue") 
 # mcmc_neff(neffratios[1:3], size=2) #sadece ilk 3 parametre
 mcmc_neff(neffratios, size = 2)
 mcmc_neff_hist(neffratios, size = 2)

#--------------------------------------------------------------

# Örnek 4.4.47: Otokorelasyon grafikleri
# Bağımlılık -  Örnek 4.4.5
#
 color_scheme_set("brightblue") 
 posteriors <- as.array(stanmodel1)
 mcmc_acf(posteriors, pars = c("alpha","beta[1]", "beta[2]"), lags = 10)
 mcmc_acf_bar(posteriors, pars = c("alpha","beta[1]", "beta[2]"), lags = 10)

#--------------------------------------------------------------

# Örnek 4.4.48: NUTS parametreleri
# Bağımlılık -  Örnek 4.4.6
#
 posteriors <- as.arrray(stanmodel1)
 logposteriors <- log_posterior(stanmodel1, inc_warmup=FALSE)
 head(logposteriors)

 tail(logposteriors)

 npars <- nuts_params(stanmodel1, inc_warmup=FALSE)
 head(npars)

 tail(npars)

#--------------------------------------------------------------

# Örnek 4.4.49: Iraksayan geçişler
# Bağımlılık -  Örnek 4.4.5, 4.4.25
#
 color_scheme_set("viridisA")
 p1 <- mcmc_trace(posteriors, pars = "beta[1]", np = npars) + 
   xlab("Isınma sonrası yinelemeler") + ggtitle("Stanmodel1'de beta-1")

 posteriors3 <- as.array(stanmodel3)
 logposteriors3 <- log_posterior(stanmodel3, inc_warmup=FALSE)
 npars3 <- nuts_params(stanmodel3, inc_warmup=FALSE)
 p2 <- mcmc_trace(posteriors3, pars = "beta[1]", np = npars3) + 
   xlab("Isınma sonrası yinelemeler") + ggtitle("Stanmodel3'te beta-1")

 twoplots(p1, p2)

#--------------------------------------------------------------

# Örnek 4.4.50: NUTS ıraksama grafikleri 1
# Bağımlılık -  Örnek 4.4.5, 4.4.48
#
 color_scheme_set("green")
 mcmc_nuts_divergence(npars, logposteriors)
 color_scheme_set("red")
 mcmc_nuts_divergence(npars, logposteriors, chain=3)

#--------------------------------------------------------------

# Örnek 4.4.51: NUTS ıraksama grafikleri 2
# Bağımlılık -  Örnek 4.4.5, 4.4.48, 4.4.49
#
 color_scheme_set("red")
 mcmc_nuts_divergence(npars3, logposteriors3)
 color_scheme_set("red")
 mcmc_nuts_divergence(npars3, logposteriors3, chain=3)

#--------------------------------------------------------------

# Örnek 4.4.52: Paralel koordinat grafiği
# Bağımlılık -  Örnek 4.4.5, 4.4.48
#
 color_scheme_set("orange")
 #mcmc_parcoord(posteriors, np = npars)
 mcmc_parcoord(posteriors, pars=c("sigma", "beta[1]", "beta[2]", "alpha"), 
   np = npars)

#--------------------------------------------------------------

# Örnek 4.4.53: NUTS parametreleriyle ilişki grafiği
# Bağımlılık -  Örnek 4.4.5, 4.4.49
#
 color_scheme_set("brightblue")
 mcmc_scatter(posteriors3,  pars = c("beta[1]", "sigma"), 
   np = npars3) + ggtitle("NUTS parametre ilişkisi")

#--------------------------------------------------------------

# Örnek 4.4.54: NUTS enerji grafiği
# Bağımlılık -  Örnek 4.4.5, 4.4.48
#
 color_scheme_set("purple")
 npars <- nuts_params(stanmodel1)
 mcmc_nuts_energy(npars, binwidth=0.3) + 
   ggtitle("NUTS Enerji Tanılama")

#--------------------------------------------------------------

# Örnek 4.4.55: loo paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(loo))
 if (!installed) {
   remotes::install_github("stan-dev/loo")
   suppressPackageStartupMessages(require(loo))
 }

#--------------------------------------------------------------

# Örnek 4.4.56: Model değerlendirme 1
# Bağımlılık -  Örnek 4.4.5, 4.4.55
#
# Loglikelihood'ları matris biçiminde çıkarma
 LL_model1  <- extract_log_lik(stanmodel1, merge_chains=TRUE)

# LOO hesapla
 loo_model1 <- loo(LL_model1, 
    is_method="psis", 
    save_psis=TRUE,
    cores = getOption("mc.cores", 1))

#--------------------------------------------------------------

# Örnek 4.4.57: Model değerlendirme 2
# Bağımlılık -  Örnek 4.4.6, 4.4.56
#
# Loglikelihood'ları dizi (array) biçiminde çıkarma
 LL_model1  <- extract_log_lik(
    stanmodel1, 
    parameter_name = "log_lik",
    merge_chains=FALSE)

# Göreceli etkin büyüklük (relative effective size)
 reff <- relative_eff(exp(LL_model1))

 loo_model1 <- loo(LL_model1, 
    r_eff = reff,
    is_method="psis", 
    save_psis=TRUE,
    cores = getOption("mc.cores", 1))
 
 loo_model1

# PSIS tanılama grafiğini çiz
 plot(loo_model1, 
   xlab="Veri noktası", main="Stanmodel1 PSIS tanılama grafiği")

#--------------------------------------------------------------

# Örnek 4.4.58: Model değerlendirme 2
# Bağımlılık -  Örnek 4.4.6, 4.4.56
#
 LL_model3  <- extract_log_lik(stanmodel3, merge_chains=FALSE)
 reff <- relative_eff(exp(LL_model3))

 loo_model3 <- loo(LL_model3, 
    r_eff = reff,
    is_method="psis", 
    save_psis=TRUE,
    cores = getOption("mc.cores", 1))

 loo_model3

# PSIS tanılama grafiği
 plot(loo_model3, label_points = TRUE,  
   xlab="Veri noktası", main="Stanmodel3 PSIS tanılama grafiği")

#--------------------------------------------------------------

# Örnek 4.4.59: Model değerlendirme 3
# Bağımlılık -  Örnek 4.4.25, 4.4.56
#
 LL_model2  <- extract_log_lik(stanmodel2, merge_chains=FALSE)
 reff <- relative_eff(exp(LL_model2))

 loo_model2 <- loo(LL_model2, 
    r_eff = reff,
    is_method="psis", 
    save_psis=TRUE,
    cores = getOption("mc.cores", 1))

 loo_model2

# PSIS tanılama grafiği
 plot(loo_model2, label_points = TRUE,  
   xlab="Veri noktası", main="Stanmodel2 PSIS tanılama grafiği")

#--------------------------------------------------------------

# Örnek 4.4.60: Model karşılaştırma
# Bağımlılık -  Örnek 4.4.5, 4.4.57, 4.4.58, 4.4.59
 loo_compare(list(
   "stanmodel1"=loo_model1, 
   "stanmodel2"=loo_model2, 
   "stanmodel3"=loo_model3)
 ) 

#--------------------------------------------------------------

# Örnek 4.4.61. WAIC ile model değerlendirme ve karşılaştırma
# Bağımlılık -  Örnek 4.4.5, 4.4.25
#
# Loglikelihood'ları dizi (array) biçiminde çıkarma
 LL_model1  <- extract_log_lik(stanmodel1, parameter_name = "log_lik",
    merge_chains=FALSE)

 waic_model1 <- waic(LL_model1)
 waic_model1

 LL_model2  <- extract_log_lik(stanmodel2, parameter_name = "log_lik",
    merge_chains=FALSE)
 waic_model2 <- waic(LL_model2)

 waic_model2

 LL_model3  <- extract_log_lik(stanmodel3, parameter_name = "log_lik",
    merge_chains=FALSE)
 waic_model3 <- waic(LL_model3)

 waic_model3

 loo_compare(list(
   "stanmodel1"=waic_model1, 
   "stanmodel2"=waic_model2, 
   "stanmodel3"=waic_model3)
 )

#--------------------------------------------------------------

# Örnek 4.4.62: linearmodel2.stan kodu dosyası 
data {
  int<lower=0> N;       // Gözlem sayısı
  int<lower=0> K;       // Bağımsız değişken sayısı
  matrix[N, K] X;       // Tasarım matrisi
  real y[N];            // Gözlemler
}
parameters {
  real alpha;           // Kesme yüksekliği (intercept)
  vector[K] beta;       // Regresyon katsayıları
  real<lower=0> sigma;  // Hata standart sapması
}
model {
  vector[N] mu;
  mu <- alpha + X * beta;
  y ~ normal(mu, sigma); // Model (Hedef yoğunluk)
}
generated quantities{
  vector[N] log_lik;
  vector[N] y_rep;
  for (i in 1:N){
    log_lik[i] = normal_lpdf(y[i] | alpha + X[i, ] * beta, sigma);
    y_rep[i] = normal_rng(alpha + X[i, ] * beta, sigma);
  }
}

#--------------------------------------------------------------

# Örnek 4.4.63: linearmodel2.stan ile analiz 
# Bağımlılık -  Örnek 4.4.5
#
# Stan'in çalıştırılması
 stanmodel1 <- rstan::stan(
   file="D:/lmmebook/stan/linearregression2.stan", 
   data=stan_data
 )

 postmeans <- get_posterior_mean(stanmodel1)
 head(postmeans)

 tail(postmeans)

 color_scheme_set("brightblue")
 mcmc_combo(
  stanmodel1,
  combo = c("intervals", "dens", "trace"),
  pars = c("alpha", "beta[1]", "beta[2]"),
  widths = c(1, 1, 2)
 )

#--------------------------------------------------------------

# Örnek 4.4.64: Bayesplot ppc modülü görselleştirme fonksiyonları
# Bağımlılık -  Örnek 4.4.29
#
 bayesplot::available_ppc()

#--------------------------------------------------------------

# Örnek 4.4.65: Yoğunluk karşılaştırılması
# Bağımlılık -  Örnek 4.4.29, 4.4.63
# 
 color_scheme_set("green")
 y_rep <- as.matrix(stanmodel1, pars = "y_rep")
 dim(y_rep)

 ppc_dens_overlay(y, y_rep[1:200, ])

#--------------------------------------------------------------

# Örnek 4.4.66: İstatistiklerin karşılaştırılması
# Bağımlılık -  Örnek 4.4.5, 4.4.29, 4.4.63
#
 color_scheme_set("brightblue")
 p1 <- bayesplot::ppc_stat(y = y, yrep = y_rep, stat = "mean")
 p2 <- bayesplot::ppc_stat(y = y, yrep = y_rep, stat = "median")
 p3 <- bayesplot::ppc_stat(y = y, yrep = y_rep, stat = "var")
 q95 <- function(y) quantile(y, 0.95)
 p4 <- bayesplot::ppc_stat(y = y, yrep = y_rep, stat = "q95")
 bayesplot::bayesplot_grid(
       p1, p2, p3, p4 ,
       grid_args = list(ncol = 2)
 )

#--------------------------------------------------------------

# Örnek 4.4.67: Serpilme grafiği
# Bağımlılık -  Örnek 4.4.5, 4.4.29, 4.4.63
 color_scheme_set("purple")
 bayesplot::ppc_scatter_avg(y = y, yrep = y_rep)

#--------------------------------------------------------------

# Örnek 4.4.68: Kurdela grafiği
# Bağımlılık -  Örnek 4.4.5, 4.4.29, 4.4.63
#
 color_scheme_set("purple")
 bayesplot::ppc_ribbon(y = y, yrep = y_rep)

#--------------------------------------------------------------

# Örnek 4.4.69: Stan modelini yeni veri tahmininde kullanma
# Bağımlılık -  Örnek 4.4.5, 4.4.29, 4.4.63
#
# Test verisi (veya yeni veri)
 set.seed(43)
 n <- 50  # Yeni gözlem sayısı
 x1 <- rnorm(n, 40, 10)  #1. bağımsız değişken 
 x2 <- rnorm(n, 100, 20) #2. bağımsız değişken
 X_test <- cbind(x1, x2)
 y_test <- 50 + 3*x1 + 2*x2 + rnorm(n)

 postmeans <- get_posterior_mean(stanmodel1, pars=c("alpha","beta"))
 postmeans

 alpha <- postmeans[1,"mean-all chains"]
 beta <- c(postmeans[2,"mean-all chains"], postmeans[3,"mean-all chains"])

 y_hat <- as.vector(alpha + beta %*% t(X_test))
 head(y_hat)

 head(y_test)

 cor(y_test, y_hat)

 caret::RMSE(y_test, y_hat) 

 plot(y_test, y_hat)

#--------------------------------------------------------------

# Örnek 4.4.70: Stan programı içeriği (hayvanmodel.stan)

data {
  int<lower=1>    J; // Sabit etkilerin sayısı
  int<lower=1>    K; // Soyağacındaki hayvanların sayısı
  int<lower=1>    N; // Fenotip (gözlem) sayısı
  matrix[N,J]     X; // Sabit etkiler için tasarım matrisi
  matrix[N,K]     Z; // Rastlantısal etkiler için tasarım matrisi
  vector[N]       Y; // Fenotip (Bağımlı değişken) 
  matrix[K,K]     A; // Akrabalık matrisi
}
transformed data{
  matrix[K,K] LA;
  LA = cholesky_decompose(A);
}
parameters {
  vector[K]  u; // Damızlık değerleri
  vector[J] b; // Sabit etkiler
  real<lower=0> sigma_G; // Genetik standart sapma
  real<lower=0> sigma_E; // Hata standart sapması
}
model {
    vector[N] mu;
    vector[K] a;
    u ~ normal(0, 1);
    a = sigma_G * (LA * u);
    mu = X * b + Z * a;
    Y ~ normal(mu, sigma_E);
    to_vector(b) ~ normal(0, 1);
    sigma_G ~ student_t(4, 0, 1);
    sigma_E ~ student_t(4, 0, 1);
}
generated quantities{
  real sigma2_G;
  real sigma2_E;
  real h2;
  sigma2_G = sigma_G * sigma_G; // Genetik varyans
  sigma2_E = sigma_E * sigma_E; // Hata varyansı
  h2 = sigma2_G / (sigma2_G + sigma2_E); // Kalıtım derecesi
}

#--------------------------------------------------------------

# Örnek 4.4.71: Veri dosyasının okunması
 setwd("D:/lmmebook/datasets")
 sheep <- read.table(file="sheep3.dat",
   header = TRUE, stringsAsFactors = FALSE)

# Veri türleri
 sheep$animal <- as.factor(sheep$hayvan)
 sheep$sire <- as.factor(sheep$sire)
 sheep$dam <- as.factor(sheep$dam)
 sheep$cins <- as.factor(sheep$cins)
 sheep$dtip <- as.factor(sheep$dtip)
 sheep$dyil <- as.factor(sheep$dyil)

# Veri dosyası yapısı
 str(sheep)

# Verinin incelenmesi
 head(sheep, 3)

#--------------------------------------------------------------

# Örnek 4.4.72: A matrisinin oluşturulması
 suppressPackageStartupMessages(installed <- require(nadiv))
 if (!installed) {
   install.packages("nadiv", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nadiv))
 }

 sheepped <- read.table("D:/lmmebook/datasets/sheepped3.dat",
    header=TRUE)
 tail(sheepped)

# A matrisini nadiv ile oluşturma
 A <- as.matrix(nadiv::makeA(sheepped))
 A[1:5,1:5]

 A[36:42,36:42]

#--------------------------------------------------------------

# Örnek 4.4.73: Stan için veri matrislerinin hazırlanması
# Bağımlılık -  Örnek 4.4.69, 4.4.70
 n <- nrow(sheep)       # Toplam gözlem sayısı
 k <- nrow(sheepped)    # Akrabalık matrisindeki hayvan sayısı
#
# Sabit etkiler tasarım vektörleri
 xcins <- model.matrix(~ -1 + cins, data=sheep)
 xdtip <- model.matrix(~ -1 + dtip, data=sheep)
 xdyil <- model.matrix(~ -1 + dyil, data=sheep)
# Kovaryet 1 (Vücut ağırlığı)
 xvca <- sheep$vca
#
# X matrisinin oluşturulması
 X <- cbind(xcins,xdtip, xdyil, xvca) 
 j <- ncol(X)  #X matrisi sütun (sabit etki) sayısı

 X[1:5, c(1:5, 13)]

# Z matrisi
 Z <- matrix(0, n, k)
 for(i in 1:n)
   Z[i, k-n+i] <- 1

 Z[1:10, 1:10]

# Gözlem (fenotip) vektörleri
 y1 <- as.vector(scale(sheep$typa))
 y2 <- as.vector(scale(sheep$lcap))
 head(y1)

# Stan'e gönderilecek veri listesi
 data_sheep <- list(
   Y = y1, # Yeniden ölçeklenmiş fenotip vektörü
   X = X, # Sabit etkiler tasarım matrisi
   Z = Z, # Rastlantısal etkiler tasarım matrisi
   A = A, # Akrabalık matrisi
   J = j, # Sabit etki sayısı
   K = k, # A matrisi satır ve sütun sayısı
   N = n  # X matrisi satır sayısı
 )

#--------------------------------------------------------------

# Örnek 4.4.74: rstan'ın NUTS örnekleyicisi ile çalıştırılması
# Bağımlılık -  Örnek 4.4.68, 4.4.71
#
 suppressPackageStartupMessages(installed <- require(rstan))
 if (!installed) {
   remove.packages(c("StanHeaders", "rstan"))
   install.packages("rstan", repos="https://mc-stan.org/r-packages/")  
   suppressPackageStartupMessages(require(rstan))
 }
# 
 sheepmodel1 <- stan(
   model_name = "koyun_yapagi",  # Model adı
   file = 'D:/lmmebook/stan/hayvanmodel.stan',  # Stan programı
   data = data_sheep,  # Veri adı
   algorithm = "NUTS",    # Örnekleme algoritması adı
   chains = 4,            # Markov zincirleri sayısı
   iter = 5000,           # Zincir başına toplam yineleme sayısı
   warmup = 2500,  	   # Zincir başına ısınma yinelemeleri sayısı
   thin = 1,              # İnceltme sayısı
   # verbose = TRUE,	   # Geçici sonuçlar ve işlemleri görüntüleme
   # refresh = 1000,      # İlerleme durumu
   # cores = 4,           # Kullanılacak çekirdek sayısı (zincir başına bir)
   # seed = 911		   # RNG tohum değeri
 )

#--------------------------------------------------------------

# Örnek 4.4.75: Sonsalların çıkarılması
# Bağımlılık -  Örnek 4.4.72
#
 sheeppost1 <- rstan::extract(sheepmodel1)
 names(sheeppost1)

 h2 <- sheeppost1$h2
 head(h2)

 mean(h2)

#--------------------------------------------------------------

# Örnek 4.4.76: Sonsalların çıkarılması
# Bağımlılık -  Örnek 4.4.72
#
 round(sigma2_G, 2)

 sigma2_E <- summary(sheepmodel1, pars = "sigma2_E")$summary
 round(sigma2_E, 2)

 h2 <- summary(sheepmodel1, pars = "h2")$summary
 round(h2, 2)

#--------------------------------------------------------------

# Örnek 4.4.77: Tanılama grafikleri
# Bağımlılık -  Örnek 4.4.72
#
 suppressPackageStartupMessages(installed <- require(bayesplot))
 if (!installed) {
   install.packages("devtools", repos="https://cran.r-project.org")  
   devtools::install_github("stan-dev/bayesplot")
   suppressPackageStartupMessages(bayesplot)
 }
 color_scheme_set("brightblue")
 mcmc_combo(
  sheepmodel1,
  combo = c("intervals", "dens", "trace"),
  pars = c("sigma2_G", "sigma2_E", "h2"),
  widths = c(1, 1, 2)
 )

#--------------------------------------------------------------

# Örnek 4.4.78: Parametrelerin yoğunluk grafikleri
# Bağımlılık -  Örnek 4.4.72, 4.4.75
#
 library(ggplot2)
 color_scheme_set("purple")
 posteriors <- as.matrix(sheepmodel1)
 gtitle <- ggtitle("h2 ve varyanslar için sonsal dağılışlar 
   (Ortalama ve %90 Güven Aralığı)")
 color_scheme_set("purple")
 mcmc_areas(posteriors, pars = c("h2", "sigma2_G", "sigma2_E"),
   prob = 0.90, prob_outer = 0.95, point_est = "mean") + gtitle

#--------------------------------------------------------------

# Örnek 4.4.79: İz grafiği
# Bağımlılık -  Örnek 4.4.72, 4.4.75
#
 color_scheme_set("viridis")
 mcmc_trace(
   as.array(sheepmodel1),
   pars = c("sigma2_G","sigma2_E", "h2"),
   size = 0.5,
   facet_args = list(ncol = 1),
   np = nuts_params(sheepmodel1),
   np_style = trace_style_np(div_color = "red", div_size = 0.5)
 )

#--------------------------------------------------------------

# Örnek 4.4.80: Rhat değerlerinin incelenmesi
# Bağımlılık -  Örnek 4.4.72, 4.4.75
#
 rhats <- rhat(sheepmodel1, pars=c("sigma2_G", "sigma2_E", "h2"))
 rhats

 color_scheme_set("purple") 
 mcmc_rhat(rhats) + yaxis_text(hjust = 1)

#--------------------------------------------------------------

# Örnek 4.4.81: Neff/N oranlarının incelenmesi
# Bağımlılık -  Örnek 4.4.72, 4.4.75
#
> neff_ratios <- neff_ratio(sheepmodel1)

> head(neff_ratios, 5)

> tail(neff_ratios, 5)

> mcmc_neff(neff_ratios, size = 2)

#--------------------------------------------------------------

# Örnek 4.4.82: rstan'ın HMC örnekleyicisi ile çalıştırılması
# Bağımlılık -  Örnek 4.4.68, 4.4.71
#
 sheepmodel2 <- stan(
   model_name = "koyun_yapagi",  # Model adı
   file = 'D:/lmmebook/stan/hayvanmodel.stan',  # Stan programı
   data = data_sheep,  # Veri adı
   algorithm = "HMC",     # Örnekleme algoritması adı
   chains = 4,            # Markov zincirleri sayısı
   iter = 5000,           # Zincir başına toplam yineleme sayısı
   warmup = 2500,  	   # Zincir başına ısınma yinelemeleri sayısı
   thin = 1,              # İnceltme sayısı
   # verbose = TRUE,	   # Geçici sonuçlar ve işlemleri görüntüleme
   # refresh = 1000,      # İlerleme durumu
   # cores = 4,           # Kullanılacak çekirdek sayısı (zincir başına bir)
   # seed = 911		   # RNG tohum değeri
 )

#--------------------------------------------------------------

# Örnek 4.4.83: Varyanslar ve kalıtım derecesi
# Bağımlılık -  Örnek 4.4.80
#
 sigma2_G <- summary(sheepmodel2, pars = "sigma2_G")$summary
 round(sigma2_G, 2)

 sigma2_E <- summary(sheepmodel2, pars = "sigma2_E")$summary
 round(sigma2_E, 2)

 h2 <- summary(sheepmodel2, pars = "h2")$summary
 round(h2, 2)

 color_scheme_set("brightblue")
 mcmc_combo(
  sheepmodel2,
  combo = c("intervals", "dens", "trace"),
  pars = c("sigma_G", "sigma_E", "h2"),
  widths = c(1, 1, 2)
 )

#--------------------------------------------------------------

# Örnek 4.4.84: Brms paketinin kurulması
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

#--------------------------------------------------------------

# Örnek 4.4.85: Veri ve Soyağacının okunması
 setwd("D:/lmmebook/datasets")

# Veri dosyasının okunması
 cpsutver <- read.table(file="cpsutver2.dat",
   header = TRUE, stringsAsFactors = FALSE)

# Veri türleri
 cpsutver$hayvan <- as.factor(cpsutver$hayvan)
 cpsutver$baba <- as.factor(cpsutver$baba)
 cpsutver$ana <- as.factor(cpsutver$ana)
 cpsutver$bay <- as.factor(cpsutver$bay)
 cpsutver$byas <- as.integer(cpsutver$byas)
 cpsutver$sver305 <- as.numeric(cpsutver$sver305)

# Veri yapısı
 str(cpsutver)

# Verinin incelenmesi
 head(cpsutver)

#--------------------------------------------------------------

# Örnek 4.4.86: Soyağacını okuma ve A matrisinin tersini oluşturma
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }	
# Soyağacı dosyasının okunması
 cpped <- read.table(file="cppedigree2.dat",
    header = TRUE, stringsAsFactors=FALSE)
 for(i in 1:3) 
   cpped[,i] <- as.factor(cpped[,i])
 # A <- as.matrix(nadiv::makeA(cpped))
 A <- Amatrix(cpped)
 Ainv <- solve(A)

#--------------------------------------------------------------

# Örnek 4.4.87: brms ile hayvan modeli
# Bağımlılık -  Örnek 4.4.82, 4.4.82, 4.4.84
 cpsutmodel1 <- brm(formula = sver305 ~ byas + bay + (1|hayvan),
   cov = list(hayvan = Ainv),
   family = gaussian(),
   data = cpsutver,
   chains = 3, iter = 3000, cores = 3)

#--------------------------------------------------------------

# Örnek 4.4.88: brms ile hayvan modeli 2
# Bağımlılık -  Örnek 4.4.82, 4.4.83, 4.4.84
#
 cpsutmodel1 <- brm(formula = sver305 ~ byas + bay + (1|gr(hayvan, cov=Amat)),
   data = cpsutver,
   data2 = list(Amat=A),
   family = gaussian(),
   chains = 4, 
   iter = 5000,
   cores = 4,
   seed = 123)

# Model karşılaştırma için LOO ölçütünü ekle
 cpsutmodel1 <- add_criterion(cpsutmodel1, "loo")
 # cpsutmodel1 <- add_criterion(cpsutmodel1, "waic")

# Çalışmayı diske kaydet
 save(cpsutmodel1, file = "D:/lmmebook/models/cpsutmodel1.rda")

#--------------------------------------------------------------

# Örnek 4.4.89: Brms model sonucunun incelenmesi
# Bağımlılık -  Örnek 4.4.88

# Model dosyasını çalışma alanına yükle
 load("D:/lmmebook/models/cpsutmodel1.rda")
# Modeli özetle
 summary(cpsutmodel1)

#--------------------------------------------------------------

# Örnek 4.4.90: Brms modelinde sabit ve rastlantısal etkilerin özetlenmesi
# Bağımlılık -  Örnek 4.4.88
 summary(cpsutmodel1)$fixed

 summary(cpsutmodel1)$random

#--------------------------------------------------------------

# Örnek 4.4.91: Model sonuçlarının görselleştirilmesi
# Bağımlılık -  Örnek 4.4.89
#
 plot(cpsutmodel1, N = 2, ask = FALSE)

 mcmc_plot(cpsutmodel1, type = "acf",
   variable=c("b_Intercept", "sd_hayvan__Intercept","sigma"))

 mcmc_plot(cpsutmodel1, type = "pairs",
   variable=c("b_Intercept", "sd_hayvan__Intercept","sigma"))
 pp_check(cpsutmodel1, resp = "sver305")

#--------------------------------------------------------------

# Örnek 4.4.92: Modelin R2 değeri
# Bağımlılık -  Örnek 4.4.88
 bayes_R2(cpsutmodel1)

#--------------------------------------------------------------

# Örnek 4.4.93: Modele ait LOO sonuçları
# Bağımlılık -  4.4.88
#
 loo(cpsutmodel1)
 # print(cpsutmodel1$criteria$loo) #Alternatif yol

#--------------------------------------------------------------

# Örnek 4.4.94: Sabit etkilerin seviyelerinin incelenmesi
# Bağımlılık -  Örnek 4.4.85
 conditional_effects(cpsutmodel1, "byas", resp = "sver305")
 plot(conditional_effects(cpsutmodel1), points = TRUE)
 conditional_effects(cpsutmodel1, "bay", resp = "sver305")
 plot(conditional_effects(cpsutmodel1, effects = "bay", resp = "sver305"))

#--------------------------------------------------------------

# Örnek 4.4.95: Varyanslar ve kalıtım derecesi
# Bağımlılık -  Örnek 4.4.88

 VarCorr(cpsutmodel1)

 sigma2_G <- (VarCorr(cpsutmodel1, summary = FALSE)$hayvan$sd)^2
 sigma2_E <- (VarCorr(cpsutmodel1, summary = FALSE)$residual$sd)^2
 h2 <- mean(sigma2_G / (sigma2_G + sigma2_E))
 h2

 # as.mcmc kullanılarak kalıtım derecesi 
 h2 <- as.mcmc(sigma2_G / (sigma2_G + sigma2_E))
 summary(h2)

 plot(h2, col="blue")

#--------------------------------------------------------------

# Örnek 4.4.96: Kalıtım derecesinin önem testi
# Bağımlılık -  4.4.88
#
 hformul <- "sd_hayvan__Intercept^2 / (sd_hayvan__Intercept^2 + sigma^2) = 0"
 hipotez <- hypothesis(cpsutmodel1, hformul, class = NULL)
 hipotez

 plot(hipotez)

#--------------------------------------------------------------

# Örnek 4.4.97: yhat değerlerinin hesaplanması
# Bağımlılık -  Örnek 4.4.88
#
 y <- cpsutver$sver305 # Orijinal fenotipik değerler
# Tahminleri hesaplama
 yhat <- fitted(cpsutmodel1)
 head(yhat)

 cor(y,yhat[,1]) # Korelasyon

 caret::R2(y,yhat[,1]) #R2

 plot(y,yhat[,1])  # İlişki serpilme grafiği

#--------------------------------------------------------------

# Örnek 4.4.98: Model önsellerinin öğrenilmesi
# Bağımlılık -  Örnek 4.4.85
#
 prior_summary(cpsutmodel1)

#--------------------------------------------------------------

# Örnek 4.4.99: Önsel tanımlama
# Bağımlılık -  Örnek 4.4.80, 4.4.88

 onsel1 <- c(
    prior(normal(5000, 1500), class="Intercept"),
    prior(normal(0, 10), class="b"),
    prior(student_t(3, 0, 500), class="sd"),
    prior(student_t(3, 0, 400), class="sigma")
  )

 onsel2 <- c(
    prior(normal(5000, 1000), class="Intercept"),
    prior(normal(0, 10), class="b"),
    prior(cauchy(0, 1), class="sd"),
    prior(cauchy(0, 1), class="sigma")
  )

#--------------------------------------------------------------

# Örnek 4.4.100: Model içim önsel ekleme ve Hiper parametreleri iyileştirme
# Bağımlılık -  Örnek 4.4.82, 4.4.83, 4.4.84, 4.4.97
#
 cpsutmodel2 <- brm(formula = sver305 ~ 1 + byas + bay +
   (1|gr(hayvan, cov=Amat)),
   data = cpsutver,
   data2 = list(Amat = A),
   family = gaussian(),
   prior = onsel1,
   control = list(adapt_delta = 0.99, max_treedepth = 15),
   iter = 6000,
   warmup = 3000,
   chains = 4, 
   cores = 4,
   seed = 123)

 save(cpsutmodel2, file = "D:/lmmebook/models/cpsutmodel2.rda")

#--------------------------------------------------------------

# Örnek 4.4.101: Modelin incelenmesi
# Bağımlılık -  Örnek 4.4.80, 4.4.96
# Model dosyasını çalışma alanına yükle
 load("D:/lmmebook/models/cpsutmodel2.rda")
 summary(cpsutmodel2)

#--------------------------------------------------------------

# Örnek 4.4.102: Varyanslar ve kalıtım derecesi
# Bağımlılık -  Örnek 4.4.98
#
 sigma2_G <- (VarCorr(cpsutmodel2, summary = FALSE)$hayvan$sd)^2
 sigma2_E <- (VarCorr(cpsutmodel2, summary = FALSE)$residual$sd)^2
 h2 <- as.mcmc(sigma2_G / (sigma2_G + sigma2_E))
 summary(h2)

 plot(h2, col="blue")

#--------------------------------------------------------------

# Örnek 4.4.103: Modele rastlantısal etki ekleme
# Bağımlılık -  Örnek 4.4.82, 4.4.83, 4.4.84
# 
 cpsutmodel3 <- brm(formula = sver305 ~ 1 + byas +
   (1|gr(hayvan, cov=Amat)) + (1|bay),
   data = cpsutver,
   data2 = list(Amat = A),
   family = gaussian(),
   prior = onsel1, 
   control = list(adapt_delta = 0.99, max_treedepth = 15),
   iter = 6000,
   warmup = 3000,
   chains = 4, 
   cores = 4,
   seed = 123)

 cpsutmodel3 <- add_criterion(cpsutmodel3, "loo")
 save(cpsutmodel3, file = "D:/lmmebook/models/cpsutmodel3.rda")

#--------------------------------------------------------------

# Örnek 4.4.104: Modelin incelenmesi
# Bağımlılık -  Örnek 4.4.85, 4.4.101
#
# Model dosyasını çalışma alanına yükle
 load("D:/lmmebook/models/cpsutmodel3.rda")
 summary(cpsutmodel3)
#--------------------------------------------------------------

# Örnek 4.4.105: Varyanslar ve kalıtım derecesi
# Bağımlılık -  Örnek 4.4.101
#
 sigma2_G <- (VarCorr(cpsutmodel3, summary = FALSE)$hayvan$sd)^2
 sigma2_RF1 <- (VarCorr(cpsutmodel3, summary = FALSE)$bay$sd)^2
 sigma2_E <- (VarCorr(cpsutmodel3, summary = FALSE)$residual$sd)^2
 h2 <- as.mcmc(sigma2_G / (sigma2_G + sigma2_RF1 + sigma2_E))
 summary(h2)

 plot(h2, col="blue")

#--------------------------------------------------------------

# Örnek 4.4.106: Modeldeki varyansları gruplara göre ayrıştırma
# Bağımlılık -  Örnek 4.4.80, 4.4.81, 4.4.82
 cpsutmodel4 <- brm(formula = sver305 ~ 1 + byas + bay + 
   (0 + bay || gr(hayvan, cov=Amat)),
   data = cpsutver,
   data2 = list(Amat = A),
   family = gaussian(),
   prior = onsel1, 
   control = list(adapt_delta = 0.99, max_treedepth = 15),
   chains = 4, 
   iter = 6000,
   warmup = 3000,
   cores = 4)

 cpsutmodel4 <- add_criterion(cpsutmodel4, "loo")
 save(cpsutmodel4, file = "D:/lmmebook/models/cpsutmodel4.rda")

#--------------------------------------------------------------

# Örnek 4.4.107: Model sonuçlarının incelenmesi
# Bağımlılık -  4.4.106
#
# Model dosyasını çalışma alanına yükle
 load("D:/lmmebook/models/cpsutmodel4.rda")
 summary(cpsutmodel4)

#--------------------------------------------------------------

# Örnek 4.4.108: Grup seviyelerine göre kalıtım dereceleri
# Bağımlılık -  Örnek 4.4.80, 4.4.81, 4.4.82
# sigma'yı ayrıştırmak için dayanca fonksiyon tanımlama
 cpsutformul <- bf(
    sver305 ~ 1 + byas + bay + (0 + bay || gr(hayvan, cov = Amat)),
    sigma ~ bay - 1
 )

 cpsutmodel5 <- brm(formula=cpsutformul,
   data = cpsutver,
   data2 = list(Amat = A),
   family = gaussian(),
   prior   = onsel1,
   control = list(adapt_delta = 0.99, max_treedepth = 15),
   chains = 4, 
   iter = 6000,
   warmup = 3000,
   cores = 4)

 cpsutmodel5 <- add_criterion(cpsutmodel5, "loo")
# Çalışmayı diske kaydet
 save(cpsutmodel5, file = "D:/lmmebook/models/cpsutmodel5.rda")
#--------------------------------------------------------------

# Örnek 4.4.109: Varyanslar ve kalıtım dereceleri
# Bağımlılık -  Örnek 4.4.106
#
# Model dosyasını çalışma alanına yükle
 load("D:/lmmebook/models/cpsutmodel5.rda")
 summary(cpsutmodel5)

 vt <- as_draws_df(cpsutmodel5)
 vt$h2.1 <- as.mcmc((vt$sd_hayvan__bay1)^2 / 
  ((vt$sd_hayvan__bay1)^2 + (vt$b_sigma_bay1)^2))
 vt$h2.2 <- as.mcmc((vt$sd_hayvan__bay2)^2 / 
  ((vt$sd_hayvan__bay2)^2 + (vt$b_sigma_bay2)^2))
 vt$h2.3 <- as.mcmc((vt$sd_hayvan__bay3)^2 / 
  ((vt$sd_hayvan__bay3)^2 + (vt$b_sigma_bay3)^2))

 summary(vt$h2.1)
 plot(vt$h2.1)

 h2.bay <- rbind(
   cbind(
     summary(vt$h2.1)$statistics[1], 
     summary(vt$h2.1)$quantiles[1],
     summary(vt$h2.1)$quantiles[5]),
   cbind(
     summary(vt$h2.2)$statistics[1], 
     summary(vt$h2.2)$quantiles[1],
    summary(vt$h2.2)$quantiles[5]),

 )

 h2.bay

#--------------------------------------------------------------

# Örnek 4.4.110: Modellerin karşılaştırılması
# Bağımlılık -  Örnek 4.4.85, 4.4.96, 4.4.98, 4.4.101
#
 loo_compare(
   cpsutmodel1, cpsutmodel2, 
   cpsutmodel3, cpsutmodel4,
   criterion = "loo")

#--------------------------------------------------------------

# Örnek 4.4.111: Veri dosyasının okunması ve analize hazırlama
 setwd("D:/lmmebook/datasets")
 sheep <- read.table("sheep3.dat", sep="\t", header=TRUE)
 sheep$animal <- as.factor(sheep$animal)
 sheep$sire <- as.factor(sheep$sire)
 sheep$dam <- as.factor(sheep$dam)
 sheep$cins <- as.factor(sheep$cins)
 sheep$dyil <- as.factor(sheep$dyil)
 sheep$dtip <- as.factor(sheep$dtip)

# Düzenlenmiş veri yapısı
 str(sheep)

# Soayağacı ve A matrisi
 sheepped <- read.table("sheepped3.dat", sep="\t", header=TRUE)
 A <- as.matrix(nadiv::makeA(sheepped))

#--------------------------------------------------------------

# Örnek 4.4.112: Çok özellik için brms ile hayvan modeli 1
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

 sheepformul <- bf(mvbind(lcap, typa) ~ 1 + cins + dtip + vca +
  (1 | a | gr(animal, cov = Amat))) + set_rescor(TRUE)

 sheepmodel1 <- brm(
   formula = sheepformul,
   family = gaussian(),
   data = sheep,
   data2 = list(Amat = A),
   control = list(adapt_delta = 0.99, max_treedepth = 15),
   chains = 4, 
   iter = 5000,
   warmup = 2500,
   cores = 4,
   seed = 123)
 )

# LOO ölçütü
 sheepmodel1 <- add_criterion(sheepmodel1, "loo")
# Çalışmayı diske kaydet
 save(sheepmodel1, file = "D:/lmmebook/models/sheepmodel1.rda")

#--------------------------------------------------------------

# Örnek 4.4.113: Model sonuçlarının incelenmesi
# Bağımlılık – Örnek 4.4.110
#
 load("D:/lmmebook/models/sheepmodel1.rda")
 summary(sheepmodel1)

#--------------------------------------------------------------

# Örnek 4.4.114: Çok özellik için hayvan modeli (alternatif)
# Bağımlılık – Örnek 4.4.109
#
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

 lcapformul <- bf(lcap ~ 1 +  cins + dtip + vca + 
   (1 | a | gr(animal, cov = Amat)))
 typaformul <- bf(typa ~ 1 +  cins + dtip + vca +
   (1 | a | gr(animal, cov = Amat)))

 sheepmodel2 <- brm(
   formula = lcapformul + typaformul + set_rescor(TRUE),
   family = gaussian(),
   data = sheep,
   data2 = list(Amat = A),
   control = list(adapt_delta = 0.995, max_treedepth = 15),
   chains = 4, 
   iter = 6000,
   warmup = 3000,
   cores = 4,
   seed = 123)
# Karşılaştırma için loo'yu modele ekle
 sheepmodel2 <- add_criterion(sheepmodel2, "loo")

# LOO ölçütü
 sheepmodel2 <- add_criterion(sheepmodel2, "loo")
# Modeli diske kaydet
 save(sheepmodel2, file = "D:/lmmebook/models/sheepmodel2.rda")

#--------------------------------------------------------------

# Örnek 4.4.115: Model sonuçlarının incelenmesi
# Bağımlılık – Örnek 4.4.112
#
 load("D:/lmmebook/models/sheepmodel2.rda")
 summary(sheepmodel2)

#--------------------------------------------------------------
# Örnek 4.4.116: Model tanılama grafikleri ve başarımı
# Bağımlılık – Örnek 4.4.112
#
 bayes_R2(sheepmodel2)

 loo(sheepmodel2)

 plot(sheepmodel2, N=8)
 pp_check(sheepmodel2, resp = "lcap")
 pp_check(sheepmodel2, resp = "tpya")

#--------------------------------------------------------------
# Örnek 4.4.117: Varyansların incelenmesi
# Bağımlılık – Örnek 4.4.112
#
 VarCorr(sheepmodel2)

#--------------------------------------------------------------

# Örnek 4.4.118: Kalıtım derecesinin hesaplanması
# Bağımlılık – Örnek 4.4.112
#
 sigma2_G <- (VarCorr(sheepmodel2, summary = FALSE)$animal$sd)^2
 sigma2_E <- (VarCorr(sheepmodel2, summary = FALSE)$residual$sd)^2
 
 h2_lcap <- as.mcmc(sigma2_G[, 1] / (sigma2_G[, 1] + sigma2_E[, 1]))
 h2_typa <- as.mcmc(sigma2_G[, 2] / (sigma2_G[, 2] + sigma2_E[, 2]))
 
 summary(h2_lcap)

 summary(h2_typa)

 plot(h2_lcap, col=4, main="lcap h2")
 plot(h2_typa, col=4, main="typa h2")

#--------------------------------------------------------------

# Örnek 4.4.119: Kalıtım derecesinin hesaplanması
# Bağımlılık – Örnek 4.4.112
#
 cor_E <- as.mcmc((VarCorr(sheepmodel2, summary = FALSE)$residual$cor[, 1, 2]))

 summary(cor_E)

 plot(cor_E, col=4, main="Cor E")

#--------------------------------------------------------------

# Örnek 4.4.120: Varyanslar arası ilişkiler
# Bağımlılık – Örnek 4.4.112
#
 blups <- ranef(sheepmodel2)$animal
 blup <- as.data.frame(abind::abind(lapply(1:dim(blups)[[3]],
   function(x) blups[, c(1, 3, 4), x])))
 colnames(blup) <- paste0(rep(dimnames(blups)[[3]], each = 3),
   c("", "_alt", "_ust"))
 blup$animal <- rownames(blup)
 pairs(blup[,1:6], col=4, pch=20, cex=0.5)

#--------------------------------------------------------------

# Örnek 4.4.121: Çok özellik için brms ile hayvan modeline rastlantısal etki ekleme
# Bağımlılık - Örnek 4.4.109
#
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

 lcapformul <- bf(lcap ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))
 typaformul <- bf(typa ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))

 sheepmodel3 <- brm(
   lcapformul + typaformul + set_rescor(TRUE),
   data = sheep,
   data2 = list(Amat = A),
   control = list(adapt_delta = 0.995, max_treedepth = 15),
   chains = 4, 
   iter = 6000,
   warmup = 3000,
   cores = 4,
   seed = 123)

# LOO ölçütü
 sheepmodel3 <- add_criterion(sheepmodel3, "loo")
 save(sheepmodel3, file = "D:/lmmebook/models/sheepmodel3.rda")

#--------------------------------------------------------------

# Örnek 4.4.122: Model sonuçlarının incelenmesi
# Bağımlılık – Örnek 4.4.120
#
 load("D:/lmmebook/models/sheepmodel3.rda")
 summary(sheepmodel3)

 plot(sheepmodel3, N=12, ask=FALSE)

#--------------------------------------------------------------

# Örnek 4.4.123: Varyansların incelenmesi
# Bağımlılık – Örnek 4.4.120
#
 VarCorr(sheepmodel3)

#--------------------------------------------------------------

# Örnek 4.4.124: Kalıtım derecesinin hesaplanması
# Bağımlılık – Örnek 4.4.120
#
 sigma2_G <- (VarCorr(sheepmodel3, summary = FALSE)$animal$sd)^2
 sigma2_E <- (VarCorr(sheepmodel3, summary = FALSE)$residual$sd)^2
 sigma2_dyil <- (VarCorr(sheepmodel3, summary = FALSE)$dyil$sd)^2
 
 h2_lcap <- as.mcmc(sigma2_G[, 1] / (sigma2_G[, 1] + sigma2_E[, 1] +
    sigma2_dyil[,1]))
 
 h2_typa <- as.mcmc(sigma2_G[, 2] / (sigma2_G[, 2] + sigma2_E[, 2] +
    sigma2_dyil[,2]))

 summary(h2_lcap)

#--------------------------------------------------------------

# Örnek 4.4.125: Korelasyonların hesaplanması
# Bağımlılık – Örnek 4.4.120
#
 cor_G <- as.mcmc((VarCorr(sheepmodel3, summary=FALSE)$animal$cor[,1,2]))
 cor_E <- as.mcmc((VarCorr(sheepmodel3, summary=FALSE)$residual$cor[,1,2]))
 cor_dyil <- as.mcmc((VarCorr(sheepmodel3, summary=FALSE)$dyil$cor[,1,2]))

 summary(cor_G)

 summary(cor_E)

 summary(cor_dyil)

#--------------------------------------------------------------

# Örnek 4.4.126: Özellikler için farklı modeller tanımlama 
# Bağımlılık - Örnek 4.4.109
#
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

 lcapformul <- bf(lcap ~ 1 + cins + dtip + vca +
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil)) + 
    lf(sigma ~ 0 + cins) + skew_normal()
 typaformul <- bf(typa ~ 1 + cins + dtip + s(vca) +
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil)) +
    gaussian()

 sheepmodel4 <- brm(
   lcapformul + typaformul + set_rescor(FALSE),
   data = sheep,
   data2 = list(Amat = A),
   control = list(adapt_delta = 0.995, max_treedepth = 15),
   chains = 4, 
   iter = 6000,
   warmup = 3000,
   cores = 4,
   seed = 123)

# LOO ölçütü
 sheepmodel4 <- add_criterion(sheepmodel4, "loo")
 save(sheepmodel4, file = "D:/lmmebook/models/sheepmodel4.rda")

 conditional_effects(sheepmodel4, "vca", resp = "lcap")

#--------------------------------------------------------------

# Örnek 4.4.127: Başlangıç değerleri tanımlama 
# Bağımlılık - Örnek 4.4.109
#
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

 initvals <- list(
   Intercept = 10,
   sigma = 0.6,
   sd = 0.4
  )
 chaininits <- list(initvals, initvals, initvals, initvals)

 lcapformul <- bf(lcap ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))
 typaformul <- bf(typa ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))

 sheepmodel5 <- brm(
   formula = lcapformul + typaformul + set_rescor(TRUE),
   family = gaussian(),
   init = chaininits,
   data = sheep,
   data2 = list(Amat = A),
   control = list(adapt_delta = 0.995, max_treedepth = 15),
   chains = 4, 
   iter = 6000,
   warmup = 3000,
   cores = 4,
   seed = 123)

# LOO ölçütü
 sheepmodel5 <- add_criterion(sheepmodel5, "loo")

 save(sheepmodel5, file = "D:/lmmebook/models/sheepmodel5.rda")

#--------------------------------------------------------------

# Örnek 4.4.128: Başlatma değerleri oluşturma 
# Bağımlılık – Kod 4.2
#
 chaininits <- list(
   initvals(chain_id = 1),
   initvals(chain_id = 2),
   initvals(chain_id = 3),
   initvals(chain_id = 4)
 )

 str(chaininits)

#--------------------------------------------------------------

# Örnek 4.4.129: Başlangıç değerleriyle model tanımlama 
# Bağımlılık – Kod 4.2, Örnek 4.4.109
#
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

 chaininits <- list(initvals(1), initvals(2), initvals(3), initvals(4))

 lcapformul <- bf(lcap ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))
 typaformul <- bf(typa ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))

 sheepmodel6 <- brm(
   formula = lcapformul + typaformul + set_rescor(TRUE),
   family = gaussian(),
   init = chaininits,
   data = sheep,
   data2 = list(Amat = A),
   control = list(adapt_delta = 0.995, max_treedepth = 15),
   chains = 4, 
   iter = 3000,
   warmup = 1500,
   cores = 4,
   seed = 123)

# LOO ölçütü
 sheepmodel6 <- add_criterion(sheepmodel6, "loo")
 save(sheepmodel6, file = "D:/lmmebook/models/sheepmodel6.rda")

#--------------------------------------------------------------

# Örnek 4.4.130: Varsayılan önsellerin listelenmesi 
# Bağımlılık – Örnek 4.4.128
#
 get_prior(lcapformul + typaformul + set_rescor(TRUE),  
    data = sheep, data2 = list(Amat = A))

#--------------------------------------------------------------

# Örnek 4.4.131: Önsellerle model tanımlama
# Bağımlılık – Kod 4.2, Örnek 4.4.109
#
 suppressPackageStartupMessages(installed <- require(brms))
 if (!installed) {
   install.packages("brms", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(brms))
 }

 lcapformul <- bf(lcap ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))
 typaformul <- bf(typa ~ 1 + cins + dtip + vca + 
    (1 |a| gr(animal, cov = Amat)) + (1 |b| dyil))

 chaininits <- list(initvals(1), initvals(2), initvals(3), initvals(4))

 onsel <- c(
    prior(normal(0, 10), class="b"),
    prior(normal(15, 10), class="Intercept", resp="lcap"),
    prior(student_t(3, 0, 1), class="sd", resp="lcap"),
    prior(student_t(3, 0, 1), class="sigma", resp="lcap")
    prior(exgaussian(3, 10), class="Intercept", resp="typa"),
    prior(student_t(3, 0, 1), class="sd", resp="typa"),
    prior(student_t(3, 0, 1), class="sigma", resp="typa")
  )

 sheepmodel7 <- brm(
   formula = lcapformul + typaformul + set_rescor(TRUE),
   family = gaussian(),
   init = chaininits,
   prior = onsel,
   data = sheep,
   data2 = list(Amat = A),
   control = list(adapt_delta = 0.995, max_treedepth = 15),
   chains = 4, 
   iter = 6000,
   warmup = 3000,
   cores = 4,
   seed = 123)

# LOO ölçütü
 sheepmodel7 <- add_criterion(sheepmodel7, "loo")
 save(sheepmodel7, file = "D:/lmmebook/models/sheepmodel7.rda")

#--------------------------------------------------------------

# Örnek 4.4.132: Modellerin karşılaştırılması
# Bağımlılık -  Örnek 4.4.110, 4.4.112, 4.4.120, 4.4.125, 4.4.126, 4.4.128, 4.4.130
#
 library(brms)
 load("D:/lmmebook/models/sheepmodel1.rda")
 load("D:/lmmebook/models/sheepmodel2.rda")
 load("D:/lmmebook/models/sheepmodel3.rda")
 load("D:/lmmebook/models/sheepmodel4.rda")
 load("D:/lmmebook/models/sheepmodel5.rda")
 load("D:/lmmebook/models/sheepmodel6.rda")
 load("D:/lmmebook/models/sheepmodel7.rda")
 loo_compare(
   sheepmodel1, sheepmodel2, sheepmodel3, sheepmodel4,
   sheepmodel5, sheepmodel6, sheepmodel7, 
   criterion = "loo")

#--------------------------------------------------------------
#--------------------------------------------------------------
# BÖLÜM 5 -------------------------------------------------------------------

# Örnek 5.1.1: Genotipik ve fenotipik veri dosyalarının okunması
#
 setwd("D:/lmmebook/tinydata")

# Genotip dosyası
 geno <- read.table("CattleParentGeno.dat")
 colnames(geno) <- paste0("snp_",1:ncol(geno))
 dim(geno)

 geno[1:5, 1:10]

# Fenotip dosyası
 pheno <- read.table("CattleParentPheno.dat", header=TRUE)

 dim(pheno)

 pheno[1:5,]

# Soyağacı dosyası
 ped <- read.table("CattleParent.ped", header=TRUE)
 dim(ped)

 head(ped, 3)

 tail(ped,3)

# Döl/test populasyonu verileri
 genoPro <- read.table("CattleProgenyGeno.dat")
 colnames(genoPro) <- paste0("snp_",1:ncol(genoPro))
 phenoPro <- read.table("CattleProgenyPheno.dat", header=TRUE)

#--------------------------------------------------------------

# Örnek 5.1.2: Genotip kalite kontrolü ve tamamlama
# Bağımlılık – Örnek 5.1.1
#
 tMisSnp <- 0.2 #Eksik gözlemler için eşik yüzde
 misSnpRate <- colSums(is.na(geno))/dim(geno)[1]
 idxMisSnp <- which(misSnpRate > tMisSnp)
 impGeno <- geno 
 if(length(idxMisSnp) > 0)
   impGeno <- geno[,-idxMisSnp]
# Genotip tamamlama
 for (j in 1:ncol(geno)){
    impGeno[,j] <- ifelse(is.na(geno[,j]), mean(geno[,j], na.rm=TRUE), geno[,j])
 }

#--------------------------------------------------------------

# Örnek 5.1.3: MAF için kalite kontrolü
# Bağımlılık – Örnek 5.1.2
#
 tMaf <- 0.02
 p <- colSums(impGeno) / (2*nrow(impGeno))
 maf <- ifelse(p > 0.5, 1-p, p)
 idxMaf <- which(maf < tMaf)
 if(length(idxMaf)>0)
   impGeno <- impGeno[, -idxMaf]  

 impGeno[1:5, 1:10]

#--------------------------------------------------------------
# Örnek 5.1.4: rrBLUP ile eksik markör tamamlama
# Bağımlılık – Örnek 5.1.1
#
 suppressPackageStartupMessages(installed <- require(rrBLUP))
 if (!installed) {
   install.packages("rrBLUP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rrBLUP))
 }
 tMisSnp <- 0.2 # Maksimum eksik markör oranı
 tMaf <- 0.02   # Minimum MAF eşiği
 resImp <- A.mat(
    geno, 
    min.MAF = tMaf,
    max.missing = tMisSnp, 
    impute.method = "mean",
    return.imputed = TRUE)

 # Genomik ilişki matrisi
 G <- resImp$A

 # Tamamlanmış genotip matrisi
 impGeno <- resImp$imputed

 impGeno[1:5, 1:10]

 dim(impGeno)

#--------------------------------------------------------------

# Örnek 5.1.5: Monomorfik SNP'lerin atılması
# Bağımlılık – Örnek 5.1.3, 5.1.4
#
 uniqueSnp <- apply(impGeno, 2, function(x) {length(unique(x))})
 impGeno <- impGeno[,c(uniqueSnp > 1)]
 dim(impGeno)

#--------------------------------------------------------------

# Örnek 5.1.5: Fenotip dosyasının okunması
# Bağımlılık – Örnek 5.2.1
#
 idxPheno <- !is.na(pheno[,3]) 
 pheno[idxPheno,] <- pheno[idxPheno,] 

 dim(pheno)

 head(pheno)

#--------------------------------------------------------------

# Örnek 5.1.6: Genotip ve fenotip dosyasının eşleştirilmesi
# Bağımlılık – Örnek 5.1.2, 5.1.3, 5.1.5
# 
# Fenotip matrisindeki eksik gözlem olamayan bireylerin indisleri
 idxPheno <- !is.na(pheno[,3])
# veya aşağıdaki gibi match ile eşleştir
 # idxPheno <- match(row.names(pheno), row.names(as.data.frame(geno)))

 geno <- impGeno[idxPheno,] 
 dim(geno)

> ped[idxPheno,] <- ped[idxPheno,] 
> dim(ped)

> genoPro <- genoPro[, colnames(geno)] 
> dim(genoPro)

#--------------------------------------------------------------

# Örnek 5.1.7: MaxMin normalleştirmesi ve geri dönüştürme
# Bağımlılık – Kod 5.1, 5.2
#
 x1 <- c(0,1,2,2,1,0)
 x2 <- c(11,10,12,15,5,8)
 x3 <- c(100,210,202,40,50,52)
 x <- cbind(x1,x2,x3)
 rownames(x) <- paste0("i",1:nrow(x))
 x

# x'i normalleştir
 xn <- rescale(x, method="maxmin") 
 xn

# Orijinale çevir
 xo <- back2original(xn, method="maxmin")
 xo

#--------------------------------------------------------------

# Örnek 5.1.8: Genotip ve fenotip eğitim ve test verisinin hazırlanması
# Bağımlılık – Kod 5.1, Örnek 5.1.6
#
 suppressPackageStartupMessages(installed <- require(caret))
 if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

# Fenotip verisinde id ve sex sütunlarını faktöre çevir
 pheno$id <- as.factor(pheno$id)
 pheno$sex <- as.factor(pheno$sex)
 table(pheno$sex)

# Genomik ilişki matrisi
 colnames(geno) <- paste0("snp_", 1:ncol(geno))
 G <- vanRadenG(geno)

# Sabit etkiler tasarım matrisi
 Xf <- model.matrix(~0 + sex, data=pheno)

# Genotip tasarım matrisi
 Zg <- model.matrix(~0 + id, data=pheno)
 Zga <- Zg %*% geno

# GRM bilgisini genotip tasarım matrisine ekle
 Zl <- chol(G)  # GRM'in Cholesky faktörizasyonu
 Zgl <- Zg %*% Zl

# GenotipxÇevre interaksiyonu tasarım matrisi
 Zge <- model.matrix(~0 + Zgl:sex, data=pheno)

# Sabit çevre etkileri ve markörlerin birleştirilmesi
 X <- cbind(Xf, Zga)  		#Sabit etkiler ve markörler
 # X <- Zga 			#Sadece markörler
 # X <- cbind(Xf, Zgl) 		# GRM eklenmiş
 # X <- cbind(Xf, Zgl, Zge)  	# GRM ve GxE eklenmiş
 dim(X)

# Fenotip vektörü
 Y <- pheno$GCA

# Birleşik fenotip ve genotip verisi
 XY <- cbind(Y, X)  			# Orijinal veri
 XY[1:5, 1:5]

 set.seed(128)
 shfIdx <- sample(1:nrow(XY), nrow(XY))
 XY <- XY[shfIdx,]   			# Karıştırılmış veri
 XY [1:5, 1:5]

 XYnorm <- rescale(XY, method="maxmin") # Normalleştirilmiş veri
 XYnorm[1:5,1:5]

# Eğitim ve test setlerinin hazırlanması
 #rng=sample(1:100, 1)
 #rng
 set.seed(86)
#trainIdx <- sample(1:nrow(XY), round(nrow(XY)*0.7))
#testIdx <-setdiff(1: nrow(XY),trainIdx)
 trainIdx <- caret::createDataPartition(pheno$sex, p=0.70, list=F)
 table(pheno$sex[trainIdx])

# Eğitim ve test veri setlerini oluştur
 trainCombined <- XY[trainIdx,]
 testCombined <- XY[-trainIdx,]

# Normalleştirilmiş birleşik fenotip ve genotip verisi
 trainCombinedN <- XYnorm[trainIdx,]
 testCombinedN <- XYnorm[-trainIdx,]

# Eğitim ve test setlerinin örnekleme iyiliğini kontrolü
# Tanımlayıcı istatistiklerin kontrolü
 summary(trainCombined[,"Y"])

 summary(testCombined[,"Y"])

# Normallik testleri
 shapiro.test(trainCombined[,"Y"])

 shapiro.test(testCombined[,"Y"])

# Eğitim ve test setlerinin incelenmesi
 opar <- par(mfrow=c(2,2))
 hist(trainCombined[,"Y"], xlab="Y", main="Eğitim seti")
 hist(testCombined[,"Y"], xlab="Y", main="Test seti")
 hist(trainCombinedN[,"Y"], xlab="Norm.Y", main="Eğitim seti-Normal")
 hist(testCombinedN[,"Y"], xlab="Norm.Y", main="Test seti-Normal")
 par(opar)

#--------------------------------------------------------------
#--------------------------------------------------------------

# Örnek 5.2.1: Model başarım ölçütleri hesaplama
# Bağımlılık – Kod 5.3
#
 set.seed(123)
 y <- rnorm(n=100, mean=50, sd=sqrt(25)) 	#Gözlenen değerler
 yHat <- y+2*rnorm(n=100)		 	#Tahmin değerleri

 n <- length(y)  # Gözlem sayısı
 k <- 2          # Parametre sayısı (regresyon katsayıları sayısı + 1 gibi)

 modelMetrics <- modelPerformance(y=y, yhat=yHat, n=n, k=k)

# Başarım ölçütlerinin tümünün gösterilmesi
 modelMetrics <- round(modelMetrics,3)
 modelMetrics

# Başarım ölçütlerinin ayrı ayrı gösterilmesi
 modelMetrics$R2

 modelMetrics$RMSE

 modelMetrics[c(1, 3, 6, 8)]

 plot(y, yHat, pch=19, col="dodgerblue", cex=1.1,
    xlab="y", ylab=expression(hat(y)), 
    main="Gözlenen ve Tahmin Değerleri İlişkisi")
 abline(lm(yHat~y), col="red", lty=1, lwd=2)

#--------------------------------------------------------------
#--------------------------------------------------------------
# Örnek 5.3.1: vanRadenG fonksiyonu ile G matrisi hesaplama
# Bağımlılık – Kod 5.4, Örnek 5.1.6
#
 G <- vanRadenG(geno)
 G[1:5, 1:5]

# Tekillik önlemi için küçük sayı ekleme
 G <- G + diag(nrow(geno))*0.001

# G matrisinin tersini alma
 invG <- solve(G)
 invG[1:5, 1:5]

#--------------------------------------------------------------

# Örnek 5.3.2: G matrisi ısı haritası
# Bağımlılık – Örnek 5.3.1
#
# Standart ısı haritası
 heatmap(G)

# Farklı tercihlerle ısı haritası
 heatmap(G, col=topo.colors(255), 
    labRow=FALSE, labCol=FALSE, keep.dendro=TRUE)
#--------------------------------------------------------------

# Örnek 5.3.3: PCA analizi
# Bağımlılık – Örnek 5.3.1
#
 eigG <- eigen(G)
 pcaG <- eigG$vectors
 expVar <- round((eigG$values/sum(eigG$values))*100,3)
 plot(x=pcaG[,1], y=pcaG[,2], col="dodgerblue", pch=19, cex=1.2, 
   xlab=c(paste0("PC.1: %",expVar[1])),
   ylab=c(paste0("PC.2: %",expVar[2])),
   main="G matrisi PCA grafiği")
 abline(v=0, lty=3, lwd=2, col="gray")
 abline(h=0, lty=3, lwd=2, col="gray")
#--------------------------------------------------------------

# Örnek 5.3.4: PCA analizi
# Bağımlılık – Örnek 5.3.1
#
 suppressPackageStartupMessages(installed <- require(BGLR))
 if (!installed) {
   install.packages("BGLR", repos="https://cloud.r-project.org") 
   suppressPackageStartupMessages(require(BGLR))  
 }

# Çalışma klasörü 
 setwd("D:/lmmebook/models/temp")

# Özdeğerlerin hesaplanması
 eigG <- eigen(G)
 n <- dim(eigG$vectors)[1]
 PC <- eigG$vectors 
 for(i in 1:ncol(PC)){
   PC[,i] <- PC[,i]*sqrt(eigG$values[i])
 }

# Markör etkilerinin saptanması
 modelBRR <- BGLR(
    y=pheno[,3], 
    ETA=list(list(X=PC, model='BRR', saveEffects=TRUE)),
    nIter=6000, burnIn=1000, verbose=FALSE)
 B <- readBinMat('ETA_1_b.bin')
 varMeff <- matrix(nrow=nrow(B),ncol=ncol(B))
 for(i in 1:nrow(B)){
    for(j in 1:ncol(B)){ 
      varMeff[i,j] <- var(PC[,j]*B[i,j]) 
    }
 }

 varP <- mean(rowSums(varMeff)) + modelBRR$varE
 varP

 varExplained <- colMeans(varMeff)
 head(varExplained)

 opar <- par(mfrow=c(2,1))
 plot(cumsum(varExplained)/sum(varExplained), type='o', col="blue",
   xlab="PC", ylab="Açıklanan Varyans", 
   main="PC'lere göre kümülatif açıklanan varyans")
 lines(x=1:n, y=cumsum(eigG$values)/sum(eigG$values), col="red",
   lty=1, lwd=2)
 plot(varExplained~eigG$values, pch=20, col="dodgerblue",
   xlab="Özdeğerler", ylab="Açıklanan Varyans", 
   main="Özdeğerlere göre açıklanan varyans")
 par(opar)


#--------------------------------------------------------------

# Örnek 5.3.5: G matrisinin histogramla incelenmesi
# Bağımlılık – Örnek 5.3.1
#
 opar <- par(mfrow=c(1,2), mar=c(5,4,5,2))
 nBins <- nrow(G)/4
 if(nBins > 100) nBins <- 100
 hist(diag(G), breaks=nBins, col="dodgerblue", 
    xlab="Diyagonel değerler", ylab="Frekans",
    main=paste("G matrisi – van Raden"))
 hist(G[lower.tri(G)],breaks=nBins, col="skyblue",
    xlab="Diyagonel dışı değerler", ylab="Frekans", main="")
 par(opar)

#--------------------------------------------------------------

# Örnek 5.3.6: Forni yöntemiyle G matrisi hesaplama
# Bağımlılık – Kod 5.7, Örnek 5.1.6
#
 G <- forniG(geno, option=2)
 G[1:5, 1:5]

 heatmap(G, col=topo.colors(255))

#--------------------------------------------------------------

# Örnek 5.3.7: SNP-BLUP uygulaması
# Bağımlılık – Örnek 5.1.1, 5.1.6
#
# Varyanslar
 h2 <- 0.4
 varG <- 400
 varE <- (varG - h2*varG )/h2
 lambda <- varE/varG
 #lambda <- 1 #Varyanslar bilinmiyorsa eşit varsayılabilir

# Genotip ve fenotip
 W <- geno
 m <- ncol(W)
 n <- nrow(W)

# Fenotip vektörü
 y <- pheno[,3]

# Birim matris
 I <- diag(m)

# Sabit etkiler tasarım matrisi
 X <- model.matrix(~1 + sex, data=pheno)
 # X <- matrix(1, nrow = n, ncol = 1) # Yalnız intercept modeli uygulanırsa
 nf <- ncol(X)
 head(X) 

# Sol taraf ve sağ taraf matrisindeki alt matrislerin hesaplanması
 XX <- crossprod(X) #t(X) %*% X'den daha hızlı çalışır
 XW <- crossprod(X, W)
 WX <- crossprod(W, X)
 WW <- crossprod(W) + 1/lambda*I
 Xy <- crossprod(X, y)
 Wy <- crossprod(W, y)

# Sol ve sağ taraf alt matrislerinin birleştirilmesi
 LHS1 <- cbind(XX, XW)
 LHS2 <- cbind(WX, WW)
 LHS <- rbind(LHS1, LHS2)
 RHS <- rbind(Xy, Wy)

# Çözümlerin hesaplanması
 sol <- solve(LHS, RHS)
 head(sol)

# Sabit etkiler vektörü
 b <- sol[c(1:nf)]
 head(b)

# SNP etkileri vektörü
 a <- sol[-c(1:nf)]
 head(a)


#--------------------------------------------------------------

# Örnek 5.3.8: SNP-BLUP ile genomik tahmin
# Bağımlılık – Kod 5.3, Örnek 5.1.1, 5.3.7
#
 genoPro <- as.matrix(genoPro)
 genoPro[1:5, 1:5]

# Adayların GEBV'lerinin hesaplanması
 GEBV <- genoPro %*% a
 head(GEBV)

 head(phenoPro)

# Adayların fenotiplerinin tahmin edilmesi
 Xpro <- model.matrix(~1+sex, data=phenoPro)
 yPro <- phenoPro[,3] # Gelecekte ölçülen fenotipler
 yHat<- Xpro %*% b + genoPro %*% a
 head(yHat)

# Adayların tahmini ve gerçek fenotipleri arasındaki korelasyon
 cor(yPro, yHat)

 snpGEBV <- GEBV	

#--------------------------------------------------------------

# Örnek 5.3.9: gblup fonksiyonu ile BLUE ve BLUP çözümleri
# Bağımlılık – Kod 5.8, Örnek 5.1.1, 5.1.6
#
# Varyanslar
 h2 <- 0.4
 Vg <- 400
 Ve <- (Vg - h2*Vg )/h2 #Hata varyansı

# Birleşik genotip verisi
 cGeno <- rbind(geno, genoPro)
 G <- vanRadenG(cGeno)
 G <- G + diag(nrow(cGeno))*0.001
 y <- pheno[,3]
 X <- model.matrix(~1 + sex, data=pheno) 
 Z1 <- diag(nrow(geno))
 Z2 <- matrix(0, nrow(geno), nrow(genoPro))
 Z <- cbind(Z1, Z2)

# gblup ile çözümlerin elde edilmesi
 sol <- gblup(y = y, X = X, Z = Z, G = G, varG = Vg, varE = Ve)
 head(sol)

#--------------------------------------------------------------

# Örnek 5.3.10: Genç adayların GEBV tahminleri 
# Bağımlılık – Örnek 5.3.8
# 
 idx <- 1:(nrow(geno) + ncol(X))
 GEBV <- sol[-idx]
 head(GEBV)

 gblupGEBV <- GEBV

#--------------------------------------------------------------
# Örnek 5.3.11: Tahmin hata varyansları ve isabet hesaplama 
# Bağımlılık – Örnek 5.3.8
# 
 Ginv <- solve(G)
 lambda <- varE / varG
 Cii <- solve(crossprod(Z) + (Ginv * lambda))
 Cii[1:5,1:5]

 PEV <- Cii * varE

 indPEV <- diag(PEV)
 head(indPEV)

 r <- sqrt(1-indPEV/varG)
 head(r)

#--------------------------------------------------------------

# Örnek 5.3.12: SNP-BLUP ve GBLUP GEBV'lerinin karşılaştırılması 
# Bağımlılık – Örnek 5.3.8, 5.3.9
#
 plot(snpGEBV, gblupGEBV, col="dodgerblue", pch=20,
  xlab="SNP-BLUP", ylab="GBLUP", main="SNP-BLUP vs GBLUP EBV")
 abline(lm(gblupGEBV~snpGEBV))

 cor(snpGEBV, gblupGEBV)

#--------------------------------------------------------------

# Örnek 5.3.13: rrBLUP paketi ile GBLUP (Van Raden G)
# Bağımlılık – Kod 5.4, Örnek 5.1.1, 5.1.6
#
 suppressPackageStartupMessages(installed <- require(rrBLUP))
 if (!installed) {
   install.packages("rrBLUP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rrBLUP))
 }

# 
 cGeno <- rbind(geno, genoPro)
 y <- pheno[,3]
 X <- model.matrix(~1 + sex, data=pheno) 
 Z1 <- diag(nrow(geno))
 Z2 <- matrix(0, nrow(geno), nrow(genoPro))
 Z <- cbind(Z1, Z2)

# Van Raden GRM matrisiyle GBLUP
# Birleşik genotip verisi
 G <- vanRadenG(cGeno)
 G <- G + diag(nrow(cGeno))*0.001

 #gblupVR <- mixed.solve(y=y, X=X, Z=Z) #G fonksiyon tarafından hesaplanır
 gblupVR <- mixed.solve(
   method="REML",
   y = y, 
   X = X,
   Z = Z, 
   K = G, 
   SE = TRUE, 
   return.Hinv = TRUE)

#--------------------------------------------------------------

# Örnek 5.3.14: GBLUP sonuçlarının incelenmesi ve genetik parametreler
# Bağımlılık – Örnek 5.3.12
#
 names(gblupVR)

# Sabit etkiler
 gblupVR$beta

# Eklemeli genetik etkiler
 head(gblupVR$u) 	

# Standart hatalar
 head(gblupVR$u.SE)

# Eklemeli genetik varyans
 gblupVR$Vu 

# Hata varyansı 
 gblupVR$Ve 	

# Genomik h2
 h2g <- gblupVR$Vu / (gblupVR$Vu + gblupVR$Ve) 
 h2g

# Maksimize edilmiş log-olabilirlik (LL)
 gblupVR$LL

#--------------------------------------------------------------

# Örnek 5.3.15: rrBLUP paketi ile GBLUP (Forni G)
# Bağımlılık – Kod 5.7, Örnek 5.3.12
#
# Forni GRM matrisiyle GBLUP
 G <- forniG(cGeno, option=2)
 G <- G + diag(nrow(cGeno))*0.001

 gblupForni <- mixed.solve(
   method = "REML",
   y = y, 
   X = X,
   Z = Z, 
   K = G, 
   SE = TRUE, 
   return.Hinv = FALSE)

# Eklemeli genetik etkiler
 head(gblupForni$u) 

# Eklemeli genetik varyans
 gblupForni$Vu 

# Hata varyansı 
 gblupForni$Ve 

# Genomik h2
 h2g <- gblupForni$Vu / (gblupForni$Vu + gblupForni$Ve) 
 h2g

# Maksimize edilmiş log-olabilirlik (LL)
 gblupForni$LL

#--------------------------------------------------------------

# Örnek 5.3.16: Farklı GRM matrisleriyle GBLUP sonuçlarının karşılaştırılması
# Bağımlılık – Örnek 5.3.12, 5.3.14 
#
 plot(gblupVR$u, gblupForni$u, col="dodgerblue", pch=20,
   xlab="GBLUP-VanRaden", ylab="GBLUP-Forni.2", main="GEBV")
 cor(gblupVR$u, gblupForni$u)

#--------------------------------------------------------------

# Örnek 5.3.17: Fenotiplerin tahmin edilmesi ve karşılaştırılması
# Bağımlılık – Kod 5.3, Örnek 5.3.12 
#
 #u <- as.matrix(gblupVR$u)
 #b <- as.vector(gblupVR$beta)
 #yHat <- tcrossprod(u,Z) + tcrossprod(b,X)
 yHat <-  tcrossprod(gblupVR$u[1:180],
   Z[1:180,1:180])+tcrossprod(gblupVR$beta,X)
 yHat <- as.vector(yHat)
 summary(yHat)
 metrics <- modelPerformance(y, yHat)
 round(metrics, 3)

 plot(y, yHat, col="dodgerblue", cex=1, pch=20,
    xlab="y", ylab=expression(hat(y)), main="Gerçek-Tahmin Fenotip İlişkisi")
 abline(lm(yHat~y), lwd=2, lty=1, col="red")


#--------------------------------------------------------------

# Örnek 5.3.18: Çapraz doğrulama ile GBLUP
# Bağımlılık – Kod 5.9, Örnek 5.3.12
#
 niter <- 10 
 cvMetrics <- cvGBLUP(y, X, W, niter=niter)
 round(cvMetrics, 2)

 opar <- par(mfrow=c(round(ncol(cvMetrics))/2,2))
 for(i in 1:ncol(cvMetrics)){
   plot(cvMetrics[,i], type="l", col="dodgerblue",
   xlab="Örneklem", ylab="Değer",
   main=colnames(cvMetrics)[i])
   abline(h=cvMetrics[niter+1,i], col="red", lty=3)
 }

#--------------------------------------------------------------

# Örnek 5.3.19: BGLR paketi ile GBLUP
# Bağımlılık – Kod 5.3, 5.4, Örnek 5.1.1
#
 suppressPackageStartupMessages(installed <- require(BGLR))
 if (!installed) {
   install.packages("BGLR", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(BGLR))
 }

# Sonuçlar klasörü oluştur
 outDir <- "D:/lmmebook/models/temp"
 if (!file.exists(outDir)) 
   dir.create(outDir)
 setwd(outDir)

# Birleşik genotip matrisi
 cGeno <- rbind(geno, genoPro)

# Fenotip vektörü
 cPheno <- rbind(pheno, phenoPro)
 cPheno[(nrow(pheno)+1):nrow(cPheno), 3] <- NA

 head(cPheno, 3)

 tail(cPheno, 3)

# Genomik ilişki matrisi
 G <- vanRadenG2(cGeno)
 G[1:5,1:5]

# Sabit etkiler tasarım matrisi
 cPheno$sex <- as.factor(cPheno$sex)
 Xf <- as.matrix(model.matrix(~0 + sex, data=cPheno))
 head(Xf)

# Model tanımlama 
 EtaGBLUP <- list(
   fixEffs=list(X=Xf, model="FIXED", saveEffects=T),
   genEffs=list(K=G, model="RKHS", saveEffects=T)
 )

 sTime <- Sys.time()

# BGLR'yi çalıştırma 
 bglrGBLUP <- BGLR(
   y=cPheno[,3], response_type="gaussian",
   ETA=EtaGBLUP,
   nIter=2000, burnIn=1000, thin=5,
   saveAt='BGLR_GBLUP_',
   rmExistingFiles = TRUE,
   verbose = TRUE)

 eTime <- Sys.time()
 ct <- as.numeric(difftime(time1 = eTime, time2 = sTime, units = "mins"))
 cat(ct, "dakika sürdü.\n")

 str(bglrGBLUP)

#--------------------------------------------------------------

# Örnek 5.3.20: Model başarımı
# Bağımlılık – Kod 5.3, Örnek 5.3.18
#
 # Fenotip tahminleri
 y <- as.matrix(pheno[,3])
 yHat <- bglrGBLUP$yHat[1:nrow(geno)]
 #yHat <- predict(bglrGBLUP, geno)[1:nrow(geno)]
 head(yHat)

 n <- length(y)
 k <- ncol(Xf) + ncol(geno) + 1
 metrics <- modelPerformance(y, yHat, n, k)
 metrics <- data.frame(round(metrics, 2), CT=round(ct,2))
 metrics

 plot(y, yHat, col="dodgerblue", pch=20, 
    xlab="y", ylab=expression(hat(y)), 
    main="Gerçek ve Tahmini Fenotip İlişkisi")
 abline(lm(yHat~y), col="red", lty=1, lwd=2)

#--------------------------------------------------------------
# Örnek 5.3.21: # Döllerin fenotip tahminleri
# Bağımlılık – Örnek 5.3.18
#
# Damızlık değerleri
 ebvPro <-  bglrGBLUP$ETA$genEffs$u[(nrow(geno)+1):nrow(cGeno)]
 head(ebvPro)

# Fenotipik tahminler
 yHatPro <- bglrGBLUP$yHat[(nrow(geno)+1):nrow(cGeno)]
 #yHatPro <- predict(bglrGBLUP, genoPro)[(nrow(geno)+1):nrow(cGeno)]
 head(yHatPro)

#--------------------------------------------------------------

# Örnek 5.3.22: Varyans bileşenleri ve Genomik h2 
# Bağımlılık – Örnek 5.3.18
#
 # Toplam fenotipik varyans
 varP <- var(y)
 varP

 # Hata varyansı
 varE <- bglrGBLUP$varE 
 varE

 # Rastlantısal etkiler varyansı
 varU <- bglrGBLUP$ETA[[2]]$varU
 varU

# Genomik kalıtım derecesi
 gh2 <- (varP - varE) / varP
 gh2

 varEMCMC <- scan('BGLR_GBLUP_varE.dat')

 varUMCMC <- scan('BGLR_GBLUP_ETA_genEffs_varU.dat')

 h2 <- varUMCMC/( varUMCMC+varEMCMC)
 head(h2)

#--------------------------------------------------------------
# Örnek 5.3.23: RR-BLUP ile genetik parametrelerin tahmini
# Bağımlılık – Örnek 5.1.6
#
 suppressPackageStartupMessages(installed <- require(rrBLUP))
 if (!installed) {
   install.packages("rrBLUP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rrBLUP))
 }
 y <- as.matrix(pheno[,3], ncol=1)
 X <- model.matrix(~1 + sex, data=pheno) 
 Z <- diag(nrow(geno))

# rrBLUP için genotip matrisini 0,1,2 kodundan -1,0,1 koduna çevir
 rrGeno <- geno-1 
 dim(rrGeno)

 modelRrblup <- mixed.solve(y = y, X=X, Z=rrGeno, K=NULL)
 names(modelRrblup)

# Kesme yüksekliği (intercept)
 modelRrblup$beta

# Markör eklemeli genetik etkiler 
 head(modelRrblup$u, 5)  

# Markör eklemeli genetik varyans 
 modelRrblup$Vu  

#--------------------------------------------------------------
# Örnek 5.3.24: RR-BLUP ile EBV tahmini
# Bağımlılık – Örnek 5.3.22
#
 rrGEBV <- as.matrix(rrGeno) %*% as.vector(modelRrblup$u)
 head(rrGEBV, 3)

#--------------------------------------------------------------
#--------------------------------------------------------------

# Örnek 5.4.1: BGLR paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(BGLR))
 if (!installed) {
   install.packages("BGLR", repos="https://cloud.r-project.org") 
   suppressPackageStartupMessages(require(BGLR))  
 }

# Github'tan alternatif kurulum
 suppressPackageStartupMessages(installed <- require(BGLR))
 if (!installed) {
   install.packages("devtools", repos="https://cloud.r-project.org") 
   devtools::install_git('https://github.com/gdlc/BGLR-R')
   suppressPackageStartupMessages(require(BGLR))  
 }

#--------------------------------------------------------------

# Örnek 5.4.2: BayesA ile genetik parametrelerin tahmini
# Bağımlılık – Örnek 5.1.6, 5.4.1
#
# Veri olarak Örnek 5.1.6'nın çalıştırılması gerekir
# Çalışma klasörünü ayarlama
 setwd("D:/lmmebook/models/temp")

# Hiper parametrelerin ayarlanması
 df0 <- 5
 S0 <- NULL
 R2 <- 0.5
 rate0=NULL; shape0=NULL
 weights <- NULL
 nIter <- 2000  # İterasyon sayısını 20000'lere çıkarmak iyidir!
 burnIn <- 1500 # Yanma sayısını 1/3*niter yapmak iyi olabilir.
 thin <- 5  #İnceltme sayısı, varsayılan değer 5'te tutulabilir
 saveAt <- 'BayesA_'  #Etki kayıt dosyalarının öneki

# Sabit etkiler tasarım matrisi
 pheno$sex <- as.factor(pheno$sex)
 Xf <- as.matrix(model.matrix(~1 + sex, data=pheno)[,-1])
 head(Xf, 3)

# Fenotip vektörü
 y <- as.matrix(pheno[,3])
 y[1:5,]

 W <- geno
 # Ölçeklendirilmiş genotip isteniyorsa alt satırda # kaldır
 #W <- scale(geno)

# ETA tanımlama
 eta <- list(
   fixEffs = list(X=Xf, model='FIXED', saveEffects=TRUE),
   mrkEffs = list(X=W, model='BayesA', 
   shape0=shape0, rate0=rate0, saveEffects=TRUE)
 )

 startTime <- Sys.time()

# Modeli oluşturma
 modelBayesA <- BGLR(
   y=y, 
   response_type="gaussian",
   ETA=eta, 
   nIter=nIter, 
   burnIn=burnIn, 
   thin=thin, 
   saveAt=saveAt, 
   df0=df0, S0=S0, 
   weights=weights, 
   R2=R2,
   verbose=TRUE)

 endTime <- Sys.time()
 ct <- as.numeric(difftime(endTime, startTime, units = "mins"))
 ct <- round(ct, 3)
 cat("Elapsed runtime:", ct, "dakika\n")

# Modelin RDA formatında disk dosyasına kaydedilmesi
 save(modelBayesA, file="D:/lmmebook/models/ModelBayesA.rda")

#--------------------------------------------------------------
# Örnek 5.4.3: Bayes A modeli sonuçlarının incelenmesi
# Bağımlılık – Örnek 5.4.2
#
# BGLR Bayes model sonuçlarının özetlenmesi
 summary(modelBayesA)

 names(modelBayesA)

 str(modelBayesA)

#--------------------------------------------------------------

# Örnek 5.4.4: Sabit etkiler ve markör etkileri
# Bağımlılık – Örnek 5.4.2
#
 mu <- modelBayesA$mu		#intercept
 mu
  
 fB <- modelBayesA$ETA$fixEffs$b  #Sabit etkiler
 mB <- modelBayesA$ETA$mrkEffs$b  #Markör etkileri

 head(fB)

 head(mB)

 opar <- par(mfrow=c(2,1))
 hist(mB, col="dodgerblue", prob=T, breaks=30, 
   xlab="Etki", ylab="Olasılık", main="Markör etkileri histogramı")
 barplot(abs(mB), col="dodgerblue", 
   xaxt="n", xlab="SNP", ylab="Mutlak etki", main="Mutlak markör etkileri")
 par(opar)

#--------------------------------------------------------------

# Örnek 5.4.5: Hata iz grafiği
# Bağımlılık – Örnek 5.4.2
#
 varEMCMC <- scan('BayesA_varE.dat')
 varE <- mean(varEMCMC)
 varE

# Tahmin hata iz grafiği
 plot(varEMCMC, type="l", col="dodgerblue",
    xlab="MCMC örneklemi", ylab="Var(E)", main="Hata iz grafiği") 

#--------------------------------------------------------------

# Örnek 5.4.6: Varyans bileşenleri ve genomik kalıtım derecesi
# Bağımlılık – Örnek 5.4.2
# Kısa yoldan Genomik h2 hesaplama
# Fenotipik varyans
 varP <- var(y)
 varP

# Hata varyansı
 varE <- modelBayesA$varE
 varE

# Genetik varyans
 varG <- varP-varE
 varG

# Kalıtım derecesi
 h2 <- varG/varP
 h2

# MCMC yinelemelerinden genomik h2 hesaplama
 Xb <- modelBayesA$mu + Xf %*% modelBayesA$ETA$fixEffs$b
# Binary dosyaya kaydedilmiş markör etkilerinin okunması
 mB <- readBinMat('BayesA_ETA_mrkEffs_b.bin')
 h2Genomik <- rep(NA, nrow(mB))
 varU <- rep(NA, nrow(mB))
 varE <- rep(NA, nrow(mB))
 for(i in 1:length(h2Genomik)){
    u <- W%*%mB[i,] 		#Genetik değerler
    varU[i] <- var(u)		#Genetik varyans
    varE[i] <- var(y-(u+Xb))	#Hata varyansı
    h2Genomik[i] <- varU[i]/(varU[i]+varE[i])
 }
# Genomik h2 histogramı ve yoğunluk grafiği
 dh2Genomik <- density(h2Genomik)
 hist(h2Genomik, prob=TRUE, xlab="Genomik h2", ylab="Yoğunluk",
    main="Genomik h2 histogramı ve yoğunluk grafiği")
 lines(dh2Genomik, col="red")

 varP1 <- mean(varU +varE)
 varP1

 varE1 <- mean(varE)
 varE1

# Genomik kalıtım derecesi
# Yol 1
 h2G <- mean(varU)/varP1
 h2G

# Yol 2
 h2G <- mean(h2Genomik)
 h2G

 sdh2G <- sd(h2Genomik)
 sdh2G

# Genomik kalıtım derecesinin Gibbs örneklemlerine göre değişimi
 plot(h2Genomik, type='o', cex=.5, pch=20, col="dodgerblue",
    xlab="Gibbs örneklemi", ylab="Genomik h2")
 abline(h=c(h2, h2G), lty=2, col=c(1,2), lwd=2)

#--------------------------------------------------------------

# Örnek 5.4.7: Genomik tahmin
# Bağımlılık – Örnek 5.4.2
#
 mu <- modelBayesA$mu
 Xb <- Xf %*% modelBayesA$ETA$fixEffs$b
 Wb <- W %*% modelBayesA$ETA$mrkEffs$b
 yHat1 <- as.vector(mu + Xb + Wb)
 head(yHat1)

 yHat2 <- predict(modelBayesA)
 head(yHat2)

 yHat3 <- modelBayesA$yHat
 head(yHat3)

 sum(round(yHat3,2) != round(yHat1,2))

 sum(round(yHat3,2) != round(yHat2,2))

#--------------------------------------------------------------

# Örnek 5.4.8: Yeni genomik verilerle tahmin
# Bağımlılık – Örnek 5.1.6, 5.4.2 
#
# Modeli yükle
 load(file="D:/lmmebook/models/ModelBayesA.rda")
# Genotip ve fenotip dosyasını oku
 unseenPheno <- phenoPro
 unseenGeno <- genoPro
# Model matrisi
 Xf <- as.matrix(model.matrix(~1+sex, data=unseenPheno)[,-1])
 W <- as.matrix(unseenGeno)
# Model katsayıları ve model terimleri
 mu <- modelBayesA$mu
 Xb <- Xf %*% modelBayesA$ETA$fixEffs$b
 Wu <- W %*% modelBayesA$ETA$mrkEffs$b
 head(Wu)

 yHatUnseen <- as.vector(mu + Xb + Wu)
 head(yHatUnseen)

#--------------------------------------------------------------

# Örnek 5.4.9: Model başarımının incelenmesi 1
# Bağımlılık – Örnek 5.4.2
#
 LLAPM <- modelBayesA$fit$logLikAtPostMean
 PMLL <- modelBayesA$fit$postMeanLogLik
 PD <- modelBayesA$fit$pD
 DIC <- modelBayesA$fit$DIC
 modelGof <- data.frame(LLAPM, PMLL, PD, DIC)
 round(modelGof, 2)

#--------------------------------------------------------------

# Örnek 5.4.10: Model başarımının incelenmesi 2
# Bağımlılık – Kod 5.3, Örnek 5.4.2
#
 y <- modelBayesA$y
 yHat <- modelBayesA$yHat
 n <- length(y)
 k <- length(modelBayesA$ETA$fixEffs$b) + length(modelBayesA$ETA$mrkEffs$b) + 1
 testMetrics <- modelPerformance(y, yHat, n, k)
 testMetrics <- round(testMetrics, 2) 
 testMetrics$CT <- round(as.numeric(ct),3)
 testMetrics

 plot(y, yHat,
   col="dodgerblue", pch=20, cex=1,
   xlab="y", ylab=expression(hat(y)), 
   main="Gerçek-Tahmin Fenotip İlişkisi")
 abline(lm(yHat~y), col=2, lty=1, lwd=2)

#--------------------------------------------------------------

# Örnek 5.4.11: Çapraz doğrulama - 1
# Bağımlılık – Kod 5.3, Örnek 5.1.6, 5.4.1
#
 nFolds <- 5
 y <- pheno[,3]
 Xf <- as.matrix(model.matrix(~1+sex, data=pheno)[,-1])
 W <- as.matrix(geno)
 n <- length(y)
 nTrain <- round(n*0.7)
 nt <- 10000
 nb <- 5000
 cvMetrics <- as.data.frame(matrix(NA, nrow=nFolds, ncol=12))
 colnames(cvMetrics) <- c("Bias", "REL", "PCOR", "R2",
     "MAE","MAPE", "MAAPE", "RMSE", "AIC", "AICc", "BIC", "CT")
 rownames(cvMetrics) <- c(paste0("Fold-", 1:nFolds))
 for(i in 1:nFolds){
   trainIdx <- sample(1:n, size=nTrain, replace=FALSE)
   yTrain <- y[trainIdx]
   yTest <- y[-trainIdx]
   xTrain <- Xf[trainIdx,]
   xTest <- Xf[-trainIdx,]
   wTrain <- W[trainIdx,]
   wTest <- W[-trainIdx,]

   eta <- list(
     fixEffs = list(X=xTrain, model='FIXED', saveEffects=TRUE),
     mrkEffs = list(X=wTrain, model='BayesA', saveEffects=TRUE)
   )
   startTime <- Sys.time()
   modelBA <- BGLR::BGLR(
     y=yTrain, 
     ETA=eta, 
     nIter=nt,
     burnIn=nb,
     verbose=FALSE)
     endTime <- Sys.time()
     ct <- as.numeric(difftime(endTime, startTime, units = "mins"))
     ct <- round(ct, 3)
    # Test verisi
     Xtest <- as.matrix(xTest)
     Wtest <- as.matrix(wTest)
    # Model katsayıları ve model terimleri
    mu <- modelBA$mu
    Xb <- Xtest %*% modelBA$ETA$fixEffs$b
    Wu <- Wtest %*% modelBA$ETA$mrkEffs$b
    yHatTest <- as.vector(mu + Xb + Wu)
    n1 <- length(yTest)
    k <- length(modelBA$ETA$fixEffs$b) + length(modelBA$ETA$mrkEffs$b) + 1
    cvMetrics[i,1:11] <- round(modelPerformance(yTest, yHatTest, n1, k),2)
    cvMetrics[i, 12] <- ct
    cat(i, ". cv tamamlandı\n")
 }

 round(cvMetrics, 2)

 meanMetrics <- apply(cvMetrics, 2, mean, na.rm=TRUE)
 round(meanMetrics[-c(4,7,9)],2)

#--------------------------------------------------------------

# Örnek 5.4.12: Çapraz doğrulama - 2
# Bağımlılık – Kod 5.3, Örnek 5.1.6
#
 nFolds <- 5
 y <- pheno[,3]
 Xf <- as.matrix(model.matrix(~1+sex, data=pheno)[,-1])
 W <- as.matrix(geno)
 n <- length(y)
 nTrain <- round(n*0.7)
 nt <- 10000
 nb <- 5000
 cvMetrics <- as.data.frame(matrix(NA, nrow=nFolds, ncol=12))
 colnames(cvMetrics) <- c("Bias", "REL", "PCOR", "R2",
     "MAE","MAPE", "MAAPE", "RMSE", "AIC", "AICc", "BIC", "CT")
 rownames(cvMetrics) <- c(paste0("Fold-", 1:nFolds))
 eta <- list(
   fixEffs = list(X=Xf, model='FIXED', saveEffects=TRUE),
   mrkEffs = list(X=W, model='BayesA', saveEffects=TRUE)
 )
 folds <- sample(1:nFolds, size=n, replace=TRUE)
 for(i in 1:max(folds)){
    testIdx <- which(folds==i)
    yNA <- y
    yNA[testIdx]  <- NA
    sTime <- proc.time()[3]
    modelBA <- BGLR::BGLR(
      y=yNA,
      ETA=eta,
      nIter=nt, burnIn=nb, thin=5,
      verbose=FALSE)
    ct <- (proc.time()[3]-sTime)/60
    cat(i, ". örneklem tamamlandı\n")
    n1 <- length(testIdx)
    k <- length(modelBA$ETA$fixEffs$b) + length(modelBA$ETA$mrkEffs$b) + 1
    cvMetrics[i,1:11] <- modelPerformance(
      y[testIdx], modelBA$yHat[testIdx], n=n1, k=k)
    cvMetrics <- round(cvMetrics, 2)
    cvMetrics[i, "CT"] <- round(ct,3)
 }

 round(cvMetrics,2)

 meanMetrics <- apply(cvMetrics, 2, mean, na.rm=TRUE)
 round(meanMetrics[-c(4,7,9)],2)

#--------------------------------------------------------------

# Örnek 5.4.13: Bayes-B ve Bayes-Bpi yöntemleri
# Bağımlılık – Örnek 5.1.6, 5.4.1
#
# Çalışma klasörünü ayarlama
 setwd("D:/lmmebook/models/temp")

# Hiper parametrelerin ayarlanması
 df0 <- 5
 S0 <- NULL
 R2 <- 0.5
 rate0 <- NULL; shape0 <- NULL
 probIn <- 0.05
 weights <- NULL
 nIter <- 2000
 burnIn <- 1500
 thin <- 5

# Sabit etkiler tasarım matrisi
 pheno$sex <- as.factor(pheno$sex)
 Xf <- as.matrix(model.matrix(~1 + sex, data=pheno)[,-1])
# Fenotip vektörü
 y <- as.matrix(pheno[,3])
# Genotip matrisi
 W <- geno

# ETA tanımlama
 etaBB <- list(
   list(X=Xf, model='FIXED', saveEffects=TRUE),
   list(X=W, model='BayesB', probIn=0.05,
   rate0=rate0, shape0=shape0,
   saveEffects=TRUE)
)
 etaBBpi <- list(
   list(X=Xf, model='FIXED', saveEffects=TRUE),
   list(X=W, model='BayesB', 
   rate0=rate0, shape0=shape0,
   saveEffects=TRUE)
 )
# Bayes-B modeli oluşturma
 startTime <- Sys.time()
 modelBayesB <- BGLR::BGLR(
   y=y, 
   response_type="gaussian",
   ETA=etaBBpi, 
   nIter=nIter, 
   burnIn=burnIn, 
   thin=thin, 
   saveAt="BayesB_", 
   verbose=TRUE)

 endTime <- Sys.time()
 ctB <- as.numeric(difftime(endTime, startTime, units = "mins"))
 ctB <- round(ctB, 3)
 cat("Elapsed runtime:", ctB, "dakika\n")

# Bayes-Bpi modeli oluşturma
 startTime <- Sys.time()
 modelBayesBpi <- BGLR::BGLR(
   y=y, 
   response_type="gaussian",
   ETA=etaBB, 
   nIter=nIter, 
   burnIn=burnIn, 
   thin=thin, 
   saveAt="BayesBpi_", 
   verbose=TRUE)

 endTime <- Sys.time()
 ctBpi <- as.numeric(difftime(endTime, startTime, units = "mins"))
 ctBpi <- round(ctBpi, 3)
 cat("Elapsed runtime:", ctBpi, "dakika\n")

# Modellerin RDA formatında disk dosyasına kaydedilmesi
 save(modelBayesB, file="D:/lmmebook/models/ModelBayesB.rda")
 save(modelBayesBpi, file="D:/lmmebook/models/ModelBayesBpi.rda")

#--------------------------------------------------------------

# Örnek 5.4.14: Bayes B ve Bayes Bpi başarımları ve genetik parametreler
# Bağımlılık – Kod 5.3, Örnek 5.4.13
#
# Bayes-B ile genomik kalıtım derecesi
 Xb <- modelBayesB$mu + Xf %*% modelBayesB$ETA[[1]]$b
 mB <- BGLR::readBinMat('BayesB_ETA_2_b.bin')
 h2Genomik <- rep(NA, nrow(mB))
 varU <- rep(NA, nrow(mB))
 varE <- rep(NA, nrow(mB))
 for(i in 1:length(h2Genomik)){
    u <- W%*%mB[i,]
    varU[i] <- var(u)
    varE[i] <- var(y-(u+Xb))
    h2Genomik[i] <- varU[i]/(varU[i]+varE[i])
 }
 h2G <- mean(h2Genomik)
 h2G

# Model başarımı
 y <- modelBayesB$y
 yHat <- modelBayesB$yHat
 n <- length(y)
 k <- length(modelBayesB$ETA$fixEffs$b) + length(modelBayesB$ETA$mrkEffs$b)+1
 testMetrics <- modelPerformance(y, yHat, n, k)
 testMetrics <- round(testMetrics, 2) 
 testMetrics$CT <- round(as.numeric(ctB),3)
 round(testMetrics,2)

 opar <- par(mfrow=c(1,2))
 plot(y, yHat,
   col="dodgerblue", pch=20, cex=1,
   xlab="y", ylab=expression(hat(y)), 
   main="Bayes-B")
 abline(lm(yHat~y), col=2, lty=1, lwd=2)

#---------------------------------------------------------
# Bayes-Bpi ile genomik kalıtım derecesi
 Xb <- modelBayesBpi$mu + Xf %*% modelBayesBpi$ETA[[1]]$b
 mB <- BGLR::readBinMat('BayesBpi_ETA_2_b.bin')
 h2Genomik <- rep(NA, nrow(mB))
 varU <- rep(NA, nrow(mB))
 varE <- rep(NA, nrow(mB))
 for(i in 1:length(h2Genomik)){
    u <- W%*%mB[i,]
    varU[i] <- var(u)
    varE[i] <- var(y-(u+Xb))
    h2Genomik[i] <- varU[i]/(varU[i]+varE[i])
 }
 h2G <- mean(h2Genomik)
 h2G

# Model başarımı
 y <- modelBayesBpi$y
 yHat <- modelBayesBpi$yHat
 n <- length(y)
 k<-length(modelBayesBpi$ETA$fixEffs$b) + length(modelBayesBpi$ETA$mrkEffs$b)+1
 testMetrics <- modelPerformance(y, yHat, n, k)
 testMetrics <- round(testMetrics, 2) 
 testMetrics$CT <- round(as.numeric(ctBpi),3)
 round(testMetrics, 2)

 plot(y, yHat,
   col="dodgerblue", pch=20, cex=1,
   xlab="y", ylab=expression(hat(y)), 
   main="Bayes-Bpi")
 abline(lm(yHat~y), col=2, lty=1, lwd=2)
 par(opar)

#--------------------------------------------------------------

# Örnek 5.4.15: Bayes C ve Bayes Cpi yöntemleri
# Bağımlılık – Örnek 5.1.6, 5.4.1
#
# Çalışma klasörünü ayarlama
 setwd("D:/lmmebook/models/temp")

# Hiper parametrelerin ayarlanması
 df0 <- 5
 S0 <- NULL
 R2 <- 0.5
 probIn <- 0.05
 weights <- NULL
 nIter <- 2000
 burnIn <- 1500
 thin <- 5

# Sabit etkiler tasarım matrisi
 pheno$sex <- as.factor(pheno$sex)
 Xf <- as.matrix(model.matrix(~1 + sex, data=pheno)[,-1])
# Fenotip vektörü
 y <- as.matrix(pheno[,3])
# Genotip matrisi
 W <- geno

# ETA tanımlama
 etaBC <- list(
   list(X=Xf, model='FIXED', saveEffects=TRUE),
   list(X=W, model='BayesC', probIn=0.05, saveEffects=TRUE)
 )

 etaBCpi <- list(
   list(X=Xf, model='FIXED', saveEffects=TRUE),
   list(X=W, model='BayesC', saveEffects=TRUE)
 )

# Bayes-C modeli oluşturma
 startTime <- Sys.time()
 modelBayesC <- BGLR::BGLR(
   y=y, 
   response_type="gaussian",
   ETA=etaBC, 
   nIter=nIter, 
   burnIn=burnIn, 
   thin=thin, 
   saveAt="BayesC_", 
   verbose=TRUE)

 endTime <- Sys.time()
 ctC <- as.numeric(difftime(endTime, startTime, units = "mins"))
 ctC <- round(ctC, 3)
 cat("Elapsed runtime:", ctC, "dakika\n")

# Bayes-Bpi modeli oluşturma
 startTime <- Sys.time()
 modelBayesCpi <- BGLR::BGLR(
   y=y, 
   response_type="gaussian",
   ETA=etaBCpi, 
   nIter=nIter, 
   burnIn=burnIn, 
   thin=thin, 
   saveAt="BayesCpi_", 
   verbose=TRUE)

 endTime <- Sys.time()
 ctCpi <- as.numeric(difftime(endTime, startTime, units = "mins"))
 ctCpi <- round(ctCpi, 3)
 cat("Elapsed runtime:", ctCpi, "dakika\n")

# Modellerin RDA formatında disk dosyasına kaydedilmesi
 save(modelBayesC, file="D:/lmmebook/models/ModelBayesC.rda")
 save(modelBayesCpi, file="D:/lmmebook/models/ModelBayesCpi.rda")

#--------------------------------------------------------------

# Örnek 5.4.16: Bayes-C ve Bayes-Cpi başarımları ve genetik parametreler
# Bağımlılık – Kod 5.3, Örnek 5.4.15
#
# Bayes-C ile genomik kalıtım derecesi
 Xb <- modelBayesC$mu + Xf %*% modelBayesC$ETA[[1]]$b
 mB <- BGLR::readBinMat('BayesC_ETA_2_b.bin')
 h2Genomik <- rep(NA, nrow(mB))
 varU <- rep(NA, nrow(mB))
 varE <- rep(NA, nrow(mB))
 for(i in 1:length(h2Genomik)){
    u <- W%*%mB[i,]
    varU[i] <- var(u)
    varE[i] <- var(y-(u+Xb))
    h2Genomik[i] <- varU[i]/(varU[i]+varE[i])
 }
 h2G <- mean(h2Genomik)
 h2G

# Model başarımı
 y <- modelBayesC$y
 yHat <- modelBayesC$yHat
 n <- length(y)
 k <- length(modelBayesC$ETA$fixEffs$b) + length(modelBayesC$ETA$mrkEffs$b)+1
 testMetrics <- modelPerformance(y, yHat, n, k)
 testMetrics <- round(testMetrics, 2) 
 testMetrics$CT <- round(as.numeric(ctB),3)
 round(testMetrics, 2)

 opar <- par(mfrow=c(1,2))
 plot(y, yHat,
   col="dodgerblue", pch=20, cex=1,
   xlab="y", ylab=expression(hat(y)), 
   main="Bayes-C")
 abline(lm(yHat~y), col=2, lty=1, lwd=2)
#---
# Bayes-Cpi ile genomik kalıtım derecesi
 Xb <- modelBayesCpi$mu + Xf %*% modelBayesCpi$ETA[[1]]$b
 mB <- BGLR::readBinMat('BayesCpi_ETA_2_b.bin')
 h2Genomik <- rep(NA, nrow(mB))
 varU <- rep(NA, nrow(mB))
 varE <- rep(NA, nrow(mB))
 for(i in 1:length(h2Genomik)){
    u <- W%*%mB[i,]
    varU[i] <- var(u)
    varE[i] <- var(y-(u+Xb))
    h2Genomik[i] <- varU[i]/(varU[i]+varE[i])
 }
 h2G <- mean(h2Genomik)
 h2G

# Model başarımı
 y <- modelBayesCpi$y
 yHat <- modelBayesCpi$yHat
 n <- length(y)
 k<-length(modelBayesCpi$ETA$fixEffs$b) + length(modelBayesCpi$ETA$mrkEffs$b)+1
 testMetrics <- modelPerformance(y, yHat, n, k)
 testMetrics <- round(testMetrics, 2) 
 testMetrics$CT <- round(as.numeric(ctB),3)
 round(testMetrics, 2)

 plot(y, yHat,
   col="dodgerblue", pch=20, cex=1,
   xlab="y", ylab=expression(hat(y)), 
   main="Bayes-Cpi")
 abline(lm(yHat~y), col=2, lty=1, lwd=2)
 par(opar)

#--------------------------------------------------------------

# Örnek 5.4.17: Bayesian Ridge Regresyon (BRR) yöntemi
# Bağımlılık – Örnek 5.1.6, 5.4.1
#
# Çalışma klasörünü ayarlama
 setwd("D:/lmmebook/models/temp")

# Hiper parametrelerin ayarlanması
 nIter <- 10000
 burnIn <- 6000
 thin <- 5
 df0 <- 5
 S0 <- NULL
 weights <- NULL
 R2 <- 0.5
 saveAt <- 'BayesBRR_'

# Sabit etkiler tasarım matrisi
 pheno$sex <- as.factor(pheno$sex)
 Xf <- as.matrix(model.matrix(~1 + sex, data=pheno)[,-1])

# Fenotip vektörü
 y <- as.matrix(pheno[,3])

 W <- geno
 # Ölçeklendirilmiş genotip isteniyorsa alt satırda # kaldır
 #W <- scale(geno)

# ETA tanımlama
 eta <- list(
   fixEffs = list(X=Xf, model='FIXED', saveEffects=TRUE),
   mrkEffs = list(X=W, model='BRR', saveEffects=TRUE)
 )

 startTime <- Sys.time()

# Modeli oluşturma
 modelBayesBRR <- BGLR::BGLR(
   y=y, 
   response_type="gaussian",
   ETA=eta, 
   nIter=nIter, 
   burnIn=burnIn, 
   thin=thin, 
   saveAt=saveAt, 
   df0=df0, S0=S0, 
   weights=weights, 
   R2=R2,
   verbose=TRUE)

 endTime <- Sys.time()
 ct <- as.numeric(difftime(endTime, startTime, units = "mins"))
 ct <- round(ct, 3)
 cat("Elapsed runtime:", ct, "dakika\n")

# Modelin RDA formatında disk dosyasına kaydedilmesi
 save(modelBayesBRR, file="D:/lmmebook/models/ModelBayesBRR.rda")

#--------------------------------------------------------------

# Örnek 5.4.18: BRR ile genomik kalıtım derecesi ve model başarımı
# Bağımlılık – Kod 5.3, Örnek 5.4.17
#
# Markör etkileri 
 head(modelBayesBRR$ETA[[2]]$b) 	

# Markör genetik varyansı
 modelBayesBRR$ETA[[2]]$varB  	

# Hata varyansı
 modelBayesBRR$varE

# Genetik varyans 
 sigma2gBRR <- sum(2*p*(1-p)) * modelBayesBRR$ETA[[2]]$varB 
 sigma2gBRR 

# Genomik h2
 h2G <- sigma2gBRR / (sigma2gBRR + modelBayesBRR$varE)  
 h2G

# Model başarımı
 y <- modelBayesBRR$y
 yHat <- modelBayesBRR$yHat
 n <- length(y)
 k <- length(modelBayesBRR$ETA$fixEffs$b) +
   length(modelBayesBRR$ETA$mrkEffs$b)+1
 testMetrics <- modelPerformance(y, yHat, n, k)
 testMetrics <- round(testMetrics, 2) 
 testMetrics$CT <- round(as.numeric(ctB),3)
 round(testMetrics, 2)

 plot(y, yHat,
   col="dodgerblue", pch=20, cex=1,
   xlab="y", ylab=expression(hat(y)), 
   main="Gerçek-Tahmin Fenotip İlişkisi (Bayes-RR)")
 abline(lm(yHat~y), col=2, lty=1, lwd=2)

#--------------------------------------------------------------

# Örnek 5.4.19: Bayesci Lasso (Bayes-L) yöntemi
# Bağımlılık – Örnek 5.1.6, 5.4.1
#
# Çalışma klasörünü ayarlama
 setwd("D:/lmmebook/models/temp")

# Hiper parametrelerin ayarlanması
 nIter <- 10000
 burnIn <- 6000
 thin <- 5
 df0 <- 5
 S0 <- NULL
 weights <- NULL
 R2 <- 0.5
 saveAt <- 'BayesBL_'

# Sabit etkiler tasarım matrisi
 pheno$sex <- as.factor(pheno$sex)
 Xf <- as.matrix(model.matrix(~1 + sex, data=pheno)[,-1])

# Fenotip vektörü
 y <- as.matrix(pheno[,3])

 W <- geno
 # Ölçeklendirilmiş genotip isteniyorsa alt satırda # kaldır
 #W <- scale(geno)

# ETA tanımlama
 eta <- list(
   fixEffs = list(X=Xf, model='FIXED', saveEffects=TRUE),
   mrkEffs = list(X=W, model='BL', saveEffects=TRUE)
 )

 startTime <- Sys.time()

# Modeli oluşturma
 modelBayesBL <- BGLR::BGLR(
   y=y, 
   response_type="gaussian",
   ETA=eta, 
   nIter=nIter, 
   burnIn=burnIn, 
   thin=thin, 
   saveAt=saveAt, 
   df0=df0, S0=S0, 
   weights=weights, 
   R2=R2,
   verbose=TRUE)

 endTime <- Sys.time()
 ct <- as.numeric(difftime(endTime, startTime, units = "mins"))
 ct <- round(ct, 3)
 cat("Elapsed runtime:", ct, "dakika\n")

# Modelin RDA formatında disk dosyasına kaydedilmesi
 save(modelBayesBL, file="D:/lmmebook/models/ModelBayesBL.rda")

#--------------------------------------------------------------

# Örnek 5.4.20: Bayes L ile genomik kalıtım derecesi ve model başarımı
# Bağımlılık – Kod 5.3, Örnek 5.4.19
#
 head(modelBayesBL$ETA[[1]]$b)

 head(modelBayesBL$ETA[[2]]$b)

 # Kaydedilen etkiler dosyasını oku
 mB <- BGLR::readBinMat('BayesBL_ETA_mrkEffs_b.bin')
 dim(mB)

 modelBayesBL$varE

 E <- scan("BayesBL_varE.dat")

 E <- E[-c(1: (modelBayesBL$burnIn / modelBayesBL$thin))]
 length(E)

 # Gibbs örnekleyicisinin her yinelemesi için genomik h2 hesapla
 h2vec <- array()
 for (i in 1:nrow(mB)){
   ghat <- W %*% mB[i,]
   gbar <- mean(W %*% mB[i,])
   sigma2g <- sum( (ghat - gbar)^2 ) / (nrow(W) )
   h2vec[i] <- sigma2g / (sigma2g+E[i])
 }

# Genomik kalıtım derecesi
 h2G <- mean(h2vec)
 h2G  

# Model başarımı
 y <- modelBayesBL$y
 yHat <- modelBayesBL$yHat
 n <- length(y)
 k <- length(modelBayesBL$ETA$fixEffs$b) +
   length(modelBayesBL$ETA$mrkEffs$b)+1
 testMetrics <- modelPerformance(y, yHat, n, k)
 testMetrics <- round(testMetrics, 2) 
 testMetrics$CT <- round(as.numeric(ctB),3)
 round(testMetrics, 2)

 plot(y, yHat,
   col="dodgerblue", pch=20, cex=1,
   xlab="y", ylab=expression(hat(y)), 
   main="Gerçek-Tahmin Fenotip İlişkisi (Bayes-L)")
 abline(lm(yHat~y), col=2, lty=1, lwd=2)

#--------------------------------------------------------------

# Örnek 5.4.21: Veri okuma ve hazırlama
#
 suppressPackageStartupMessages(installed <- require(bigmemory))
 if (!installed) {
   install.packages("bigmemory", repos="https://cloud.r-project.org") 
   suppressPackageStartupMessages(require(bigmemory))  
 }
 suppressPackageStartupMessages(installed <- require(simer))
 if (!installed) {
   install.packages("simer", repos="https://cloud.r-project.org") 
   suppressPackageStartupMessages(require(simer))  
 }

 setwd("D:/lmmebook/datasets/")
# MAP dosyasını okuma
 map <- read.table(file="chicken_map.dat", sep="\t", header=TRUE)

# Büyük matris formatında Genotip dosyasını okuma
 geno <- bigmemory::read.big.matrix(file="chicken_geno.dat",
   header=TRUE, has.row.names=FALSE)

 dim(geno)

 geno[1:5, 1:10]

# Geno matrisinden M matrisi oluşturma 
 W <- t(simer::geno.cvt1(simer::geno.cvt2(geno)))
 rownames(W) <- pheno$id #bunu yapmak hibayes için gereklidir!

 dim(W)

 W[1:5, 1:10]

# Fenotip dosyasını okuna
 pheno <- read.table(file="chicken_pheno.dat", sep="\t", header=TRUE)
 pheno$sex <- as.factor(pheno$sex)
 pheno$F1 <- as.factor(pheno$F1)
 pheno$F2 <- as.factor(pheno$F2)
 pheno$R1 <- as.factor(pheno$F2)
 pheno$R2 <- as.factor(pheno$F2)
 pheno$C1 <- as.numeric(pheno$C1)
 colnames(pheno)[1] <- "id"
 dim(pheno)

 pheno[1:5, 1:15]

 # Genotip ve fenotip matrisindeki birey numaralarını oku
 geno.id <- map[, 1]
 pheno.id <- pheno[, 1]

#--------------------------------------------------------------

# Örnek 5.4.22: Çok özellik için Bayesci modelleme
# Bağımlılık – Örnek 5.4.21
#
 suppressPackageStartupMessages(installed <- require(BGLR))
 if (!installed) {
   install.packages("BGLR", repos="https://cloud.r-project.org") 
   suppressPackageStartupMessages(require(BGLR))  
 }

 setwd("D:/lmmebook/models/temp")
# Fenotip matrisi üç özellik içeriyor
 y <- as.matrix(pheno[,13:15])

# Ölçeklendirilmiş genotip matrisi kullanılacaksa
 #W <- scale(W)
# Genomik ilişki matrisi
 G <- tcrossprod(W)/ncol(W)

# Sabit çevre etkileri tasarım matrisleri
 XF1 <- model.matrix(~1+F1+F2+C1, data=pheno)[,-1]
 XF2 <- model.matrix (~1+F1+F2, data=pheno)[,-1]
 XF3 <- model.matrix (~1+F2+C1, data=pheno)[,-1]
 Xf <- cbind(XF1, XF1, XF1)

# Rastlantısal çevre etkileri tasarım matrisleri
 XR1 <- model.matrix (~0+R1+R2, data=pheno)
 XR2 <- model.matrix (~0+R1, data=pheno)
 XR3 <- model.matrix (~0+R2, data=pheno)
 Xr <- cbind(XR1, XR2, XR3)

# ETA tanımlama
 ETA <- list(
   fixEffs = list(X=Xf, model='FIXED', common=FALSE),
   randEffs = list(X=Xr, model='BRR'),
   mrkEffs = list(K=G, model='RKHS'))

# Çok özellik için model tanımlama
 modelMT <- Multitrait(
   y=y, 
   ETA=ETA, 
   nIter=1000, 
   burnIn=500,
   thin=5,
   verbose=TRUE
 )

#--------------------------------------------------------------

# Örnek 5.4.23: Sonuçların incelenmesi
# Bağımlılık – Örnek 5.4.22
#
 str(modelMT)

# Ortalamalar ve standart hataları
 modelMT$mu

 modelMT$SD.mu

# Sabit çevresel etkiler
 modelMT$ETA[[1]]$beta #veya modelMT$ETA$fixEffs$beta

# Rastlantısal çevresel etkiler
 modelMT$ETA[[2]]$beta #veya modelMT$ETA$randEffs$beta

# Markör etkileri
 head(modelMT$ETA[[3]]$u)  # veya head(modelMT$ETA$mrkEffs$u)

# Varyanslar ve standart sapmaları (SD)
# Hata kovaryans matrisi
 modelMT$resCov$R 

 modelMT$resCov$SD.R

# Genomik kovaryans matrisi 
 modelMT$ETA$mrkEffs$Cov$Omega 

 modelMT$ETA$mrkEffs$Cov$SD.Omega

#--------------------------------------------------------------

# Örnek 5.4.24: Fenotipik tahminler ve model tahmin başarımları
# Bağımlılık – Kod 5.3, Örnek 5.4.22
#
 head(modelMT$ETAHat, 3)

 n <- nrow(y)
 k <- nrow(modelMT$ETA[[1]]$beta) + nrow(modelMT$ETA[[2]]$beta) +
      nrow(modelMT$ETA[[3]]$u) + 1

 metricsBW16 <- modelPerformance(y[,"BW16"], modelMT$ETAHat[,"BW16"], n, k)
 round(metricsBW16[-c(4,9)], 2) 

 metricsBMW <- modelPerformance(y[,"BMW"], modelMT$ETAHat[,"BMW"], n, k)
 round(metricsBMW[-c(4,9)], 2) 

 metricsPH0 <- modelPerformance(y[,"PH0"], modelMT$ETAHat[,"PH0"], n, k)
 round(metricsPH0[,-c(4,9)], 2) 

#--------------------------------------------------------------

# Örnek 5.4.25: hibayes paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(hibayes))
 if (!installed) {
   install.packages("hibayes", repos="https://cloud.r-project.org") 
   suppressPackageStartupMessages(require(hibayes))  
 }
# Github'tan alternatif kurulum
 suppressPackageStartupMessages(installed <- require(hibayes))
 if (!installed) {
   install.packages("devtools", repos="https://cloud.r-project.org") 
   devtools::install_github("YinLiLin/hibayes")
   suppressPackageStartupMessages(require(hibayes))  
 }

#--------------------------------------------------------------

# Örnek 5.4.26: Bayes A yöntemi ile analiz
# Bağımlılık - Örnek 5.4.21, 5.4.25
#
# Modeli oluştur
 modelBayesA <- hibayes::bayes(
   formula = BW16 ~ sex + F1 + F2 + C1+ (1|R1) + (1|R2), data=pheno, 
   M = W, M.id = pheno$id, 
   method = "BayesA", 
   niter = 1000, nburn = 300, thin = 5,
   verbose = TRUE, printfreq = 1,  
   seed = 123)

#--------------------------------------------------------------

# Örnek 5.4.27: Sonuçların yapısı ve özetlenmesi
# Bağımlılık - Örnek 5.4.26
#
 str(modelBayesA)

 summary(modelBayesA)

#--------------------------------------------------------------

# Örnek 5.4.28: Etkiler ve GEBV değerlerinin incelenmesi
# Bağımlılık - Örnek 5.4.26
#
# Sabit ekiler
 modelBayesA$beta

# Rastlantısal çevresel etkiler
 modelBayesA$r

# Genomik damızlık değeri tahminleri (GEBV) 
 gebv <- modelBayesA$g							
 head(gebv)

# Damızlık değerlerinin tahmin hata varyansı (PEV)
 gebvPev <- apply(modelBayesA$MCMCsamples$g, 1, var)	
 head(gebvPev)

# Tahmin hataları std. sapması
 head(sqrt(gebvPev))

# GEBV ve PE standart sapmaları
 head(summary(modelBayesA)$g)

#--------------------------------------------------------------

# Örnek 5.4.29: Genomik damızlık değerleri ve varyans bileşenleri
# Bağımlılık - Örnek 5.4.26
#
# Varyans bileşenleri
# Genetik varyans
 (varG <- modelBayesA$Vg)

# Çevresel rastlantısal etkiler varyansı
 (varR <- modelBayesA$Vr)

 (varR <- sum(varR))

# Hata varyansı
 (varE <- modelBayesA$Ve)

# Toplam fenotipik varyans
 (varP <- varG + varR + varE)

# Genomik kalıtım derecesi
 (h2 <- modelBayesA$h2)

# Genetik parametreler veri çerçevesi
 genpars <- data.frame(varG, varR, varE, varP, h2)
 genpars

 opar <- par(mfrow=c(2,3))
 mcmcVe <- modelBayesA$MCMCsamples$Ve[1,]
 mcmcVg <- modelBayesA$MCMCsamples$Vg[1,]
 plot(mcmcVg, type="l", col="dodgerblue", 
   xlab="MCMC örneklemi", ylab="Genetik varyans", 
   main="MCMC-Genetik varyanslar iz grafiği")
 plot(mcmcVe, type="l", col="dodgerblue", 
   xlab="MCMC örneklemi", ylab="Hata varyansı", 
  main="MCMC-Hata varyansları iz grafiği")
 plot(modelBayesA$MCMCsamples$Ve, modelBayesA$MCMCsamples$Vg,
   col="dodgerblue",
   xlab="Hata varyansı", ylab="Genetik varyans", 
   main="Varyansların İlişkisi")

 hist(modelBayesA$MCMCsamples$Vg, col="dodgerblue",
   xlab="Genetik varyans", ylab="Frekans", 
   main="Genetik varyans")

 hist(modelBayesA$MCMC$Ve, col="dodgerblue",
   xlab="Hata varyansı", ylab="Frekans", 
   main="Hata varyansı")

 hist(modelBayesA$MCMC$h2, col="dodgerblue",
   xlab="Genomik h2 tahminleri", ylab="Frekans", 
   main="Genomik h2")
 par(opar)

#--------------------------------------------------------------

# Örnek 5.4.30: SNP etkilerinin incelenmesi
# Bağımlılık - Örnek 5.4.26
#
 snpEffects <- modelBayesA$alpha	
 head(snpEffects)

# SNP etki tahminlerinin standart sapması
 snpEffectsSd <- apply(modelBayesA$MCMCsamples$alpha, 1, sd)
 head(snpEffectsSd)

# SNP'lerin açıkladığı fenotipik varyans oranları
 percVarExp <- apply(as.matrix(W), 2, var) * 
   (modelBayesA$alpha^2) / as.numeric(var(pheno$BW16)) 
 head(percVarExp)

# SNP Etkileri Manhattan grafiği
 suppressPackageStartupMessages(installed <- require(CMplot))
 if (!installed) {
   install.packages("CMplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(CMplot))  
 }
 CMplot(cbind(map[,1:3], snpEffects), 
  type="h", plot.type="m", LOG10=FALSE, ylab="SNP Etkisi", 
  file.output=FALSE)

 highlight <- map[percVarExp > 1e-05, 1]
 pveData <- cbind(map[, 1:3], 100 * percVarExp)
 CMplot(pveData, type = "h", plot.type = "m", LOG10 = FALSE,
   ylab = "Açıklanan fenotipik varyans (%)",
   highlight = highlight, highlight.text = highlight, 
   file.output=FALSE)

#--------------------------------------------------------------

# Örnek 5.4.31: Modelin diske kaydedilmesi ve yüklenmesi
# Bağımlılık - Örnek 5.4.26
# Modeli kaydetme
 cwd <- getwd()
 setwd("D:/lmmebook/models")
 save(modelBayesA, file="modelBayesA.Rdata")
 setwd(cwd)
# Modeli daha sonra kullanmak için geri yükleme
 cwd <- getwd()
 setwd("D:/lmmebook/models")
 load(file="modelBayesA.Rdata")
 setwd(cwd)

#--------------------------------------------------------------

# Örnek 5.4.32: Genomik tahmin ve model başarım ölçütleri
# Bağımlılık - Örnek 5.4.26
#
# Gözlenen fenotip
 y <- pheno$BW16

# Genel ortalama 
 (mu <- modelBayesA$mu)

# Sabit çevresel etkiler
 (fixef <- modelBayesA$beta)

 beta <- rbind(mu, fixef)

# Rastlantısal çevre etkileri
 r <- modelBayesA$r
 r

 r <- r[,2]

# SNP etkileri
 a <- modelBayesA$alpha
 head(a)

# Tasarım matrislerinin oluşturulması
 X <- model.matrix(~1+sex+F1+F2+C1, data=pheno)
 R1 <- model.matrix(~0+R1, data=pheno)
 R2 <- model.matrix(~0+R2, data=pheno)
 R <- cbind(R1,R2)

# Fenotipik tahmin
 fixedPart <- X%*%beta
 randomPart <- R%*%r
 markersPart <- W%*%a
 yHat<- fixedPart + randomPart + markersPart
 head(yHat)

# Model başarım ölçütleri
 n <- dim(pheno)[1]
 k <- length(c(a, beta, r))
 testMetrics <- modelPerformance(y, yHat, n, k)
 round(testMetrics,2)

 plot(y, yHat, col="dodgerblue", pch=20, cex=1, 
   xlab="y", ylab=expression(hat(y)), 
   main="Gerçek-Tahmin Fenotip İlişkisi")
 abline(lm(yHat~y), col="red", lwd=2)

#--------------------------------------------------------------

# Örnek 5.4.33: Genotip, fenotip ve soyağacı dosyasını okuma ve veri hazırlama
#
 setwd("D:/lmmebook/datasets")
 # Fenotip dosyasını oku
 pheno <- read.table("sim_phenotype.dat", header=TRUE)
 nrow(pheno) # Fenotipi olan hayvan sayısı

 head(pheno, 3)

 # Soyağacı dosyasını oku
 ped <- read.table("sim_pedigree.dat", header=TRUE)
 head(ped, 3)

 # Genotip dosyasını oku 
 # sim_genotype.bim dosyası ve sim_genotype.fam dosyası olmalı
 # mode A eklemeli, mode D dominans etki moddunu gösterir
 genodata <- hibayes::read_plink(
    bfile="sim_genotype", mode="A", threads=4)
 # Genotip ve harita (map) matrisini oluştur
 fam <- genodata$fam
 map <- genodata$map
 map <- map[as.numeric(map$Pos)!=0,]
 dim(map)

 geno <- genodata$geno
 idx <- rownames(map)
 geno <- geno[,as.numeric(idx)]
 # Genotip dosyasındaki genotiplenmiş birey sayısı ve SNP sayısı 
 dim(geno) 

 # Genotip ve fenotip matrisindeki birey numaralarını oku
 geno.id <- fam[, 2]
 pheno.id <- pheno[, 1]

 # Sabit etkiler ve kovaryetler için tasarım matrisini oluştur
 pheno$sex <- as.factor(pheno$sex)
 pheno$season <- as.factor(pheno$season)
 pheno$bw <- as.numeric(pheno$bw)

#--------------------------------------------------------------

# Örnek 5.4.34: BayesR ile genomik tahmin
# Bağımlılık – Örnek 5.4.25, 5.4.33
#
 ssmodelBayesR <- hibayes::ssbayes(
   method="BayesR",
   formula = y1 ~ -1 + sex + season + bw +(1|dam) +(1|loc),
   data=pheno, pedigree=ped,  
   M=geno, M.id=geno.id,
   niter=20000, nburn=12000, thin=5,
   printfreq=100, threads=1,
   verbose=TRUE)

#--------------------------------------------------------------

# Örnek 5.4.35: Sonuçları inceleme
# Bağımlılık – Örnek 5.4.34
#
 str(ssmodelBayesR)

#--------------------------------------------------------------

# Örnek 5.4.36: Genomik damızlık değerleri
# Bağımlılık – Örnek 5.4.34
#
 SNPeffects <- ssmodelBayesR$alpha
 head(SNPeffects, 3)

 SNPeffects_SD <- apply(ssmodelBayesR$MCMCsamples$alpha, 1, sd)
 gebv <- ssmodelBayesR$g
 head(gebv, 3)

 gebv_pev <- apply(ssmodelBayesR$MCMCsamples$g, 1, var)
 head(gebv_pev)

# SNP'lerin açıkladığı fenotipik varyans oranları
 pve <- apply(as.matrix(geno), 2, var) * 
   (ssmodelBayesR$alpha^2) / as.numeric(var(pheno[,8])) 
 head(pve, 3)

 suppressPackageStartupMessages(installed <- require(CMplot))
 if (!installed) {
   install.packages("CMplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(CMplot))  
 }

# SNP Etkileri Manhattan grafiği
 CMplot(cbind(map[,1:3], SNPeffects), 
  type="h", plot.type="c", LOG10=FALSE, ylab="SNP Etkisi", 
  file.output=FALSE)

 highlight <- map[pve > 1e-03, 1]
 pdata <- cbind(map[, 1:3], 100 * pve)
 CMplot(pdata, type = "h", plot.type = "m", LOG10 = FALSE,
   ylab = "Açıklanan fenotipik varyans (%)",
   highlight = highlight, highlight.text = highlight, 
   file.output=FALSE)

#--------------------------------------------------------------

# Örnek 5.4.37: Bayes B yöntemi ile GWAS uygulaması
# Bağımlılık - Örnek 5.4.21, 5.4.25
#
 modelBayesB <- hibayes::bayes(
   formula = BW16 ~ sex + F1 + F2 + C1+ (1|R1) + (1|R2), data=pheno, 
   M = W, M.id = pheno$id, 
   method = "BayesB",
   map=map, windsize=1e6,
   niter = 2500, nburn = 1500, thin = 5,
   verbose = TRUE, printfreq = 5000,  
   seed = 123)

#--------------------------------------------------------------

# Örnek 5.4.39: Sonuçların incelenmesi
# Bağımlılık – Örnek 5.4.38
#
 gwas <- modelBayesB$gwas
 head(gwas, 3)

 tail(gwas, 3)

 suppressPackageStartupMessages(installed <- require(CMplot))
 if (!installed) {
   install.packages("CMplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(CMplot))  
 }

 highlight <- gwas[(1 - gwas[, "WPPA"]) < 0.001, 1]
 CMplot(cbind(gwas[, c(1, 2, 4)], 1 - gwas[, "WPPA"]), 
    type = "h", plot.type = "m", LOG10 = TRUE,
    ylab = expression(-log[10](1 - italic(WPPA))), 
    highlight = highlight, highlight.col = NULL,
    highlight.text = highlight, file.output=FALSE)

 idxChr15 <- map[, 2] == 15
 Chr15 <- cbind(map[idxChr15, 1:3], pip=(1-modelBayesB[["pip"]])[idxChr15])
 highlight <- Chr15[Chr15[,4] < 0.5, 1]
 CMplot(Chr15, plot.type = "m", width = 9, height = 5, threshold = 0.1,
    ylab = expression(-log[10](1 - italic(PIP))), LOG10 = TRUE, 
    ylim = c(0, 0.7), amplify = FALSE, highlight = highlight, 
    highlight.col = NULL, highlight.text = highlight,
    file.output=FALSE)

#--------------------------------------------------------------

# Örnek 5.4.40: Bayesci yöntemlerin karşılaştırılması
# Bağımlılık – Kod 5.3,  Örnek 5.4.21, 5.4.22, 5.4.26
#
# Karşılaştırılacak yöntemler
 bayesMethods <- c("BayesA", "BayesB", "BayesBpi", 
   "BayesC", "BayesCpi", "BayesL", "BayesR", "BayesRR", "BSLMM")
 nm <- length(bayesMethods)
# Model başarım ölçütleri matrisi
 metricsMat <- matrix(NA, nrow=nm, ncol=9)
 colnames(metricsMat) <- c("Bias",	"REL", "COR","MAE","MAPE","RMSE",
   "AICc","BIC", "CT")
 rownames(metricsMat) <- bayesMethods
# Varyans bileşenleri matrisi
 varMat <- matrix(NA, nrow=nm, ncol=4)
 colnames(varMat) <- c("Vg","Vr","Ve", "h2")
 rownames(varMat) <- bayesMethods
# Modelleri oluşturma döngüsü
 for(i in 1:nm){
   sTime <- Sys.time()
   modelBayes <- hibayes::bayes(
      formula = BW16 ~ sex + F1 + F2 + C1 + (1|R1) + (1|R2), data=pheno, 
      M = W, M.id = pheno$id, 
      method = bayesMethods[i], 
      Pi = c(0.90, 0.10), lambda = 0.001,
      fold = c(0.90, 0.10),
      niter = 1000, nburn = 400, thin = 5,
      #seed = 123,
      verbose = TRUE, printfreq = 50)  
   eTime <- Sys.time()
   ct <- as.numeric(difftime(time1 = eTime, time2 = sTime, units = "mins"))
   ct <- round(ct, 3)
   # Tasarım matrislerinin oluşturulması
   X <- model.matrix(~1+sex+F1+F2+C1, data=pheno)
   R1 <- model.matrix(~0+R1, data=pheno)
   R2 <- model.matrix(~0+R2, data=pheno)
   R <- cbind(R1,R2)
   beta <- c(modelBayes$mu, modelBayes$beta)
   r <- modelBayes$r[,2]
   a <- modelBayes$alpha
   yhat <- X%*%beta + R%*%r + W%*%a
   y <- pheno[,"BW16"]
   n <- dim(pheno)[1]
   k <- ncol(X)+ncol(R)+ncol(W)
   modelGof <- modelPerformance(y, yhat, n, k)
   metricsMat[i,] <- c(as.numeric(modelGof[1,c(1:3,6,8:11)]), ct)
   varMat[i,] <- round(c(modelBayes$Vg, 
     sum(modelBayes$Vr), modelBayes$Ve, modelBayes$h2),3)
 }
# Sonuçları göster
 print("Varyans bileşenleri")

 varMat

 print("Model başarımları")

 round(gofMat,2)

#--------------------------------------------------------------
#--------------------------------------------------------------
# Örnek 5.5.1: caret paketinin kurulması/yüklenmesi
# 
 suppressPackageStartupMessages(installed <- require(caret))
 if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

#--------------------------------------------------------------

# Örnek 5.5.2: caret paketindeki ML algoritmaları
# Bağımlılık – Örnek 5.5.1
# 
 names(getModelInfo())

 modelLookup("rf")

 modelLookup("xgbTree")

#--------------------------------------------------------------

# Örnek 5.5.3: Rastlantısal Ormanlar (RF) modeli
# Bağımlılık – Örnek 5.1.8, 5.5.1
#  
# Örnek 5.1.8'den eğitim ve test verisi oluşturma
 trainX <- trainCombined[,-1]
 trainY <- trainCombined[,1]
 testX <- testCombined[,-1]
 testY <- testCombined[,1]

# Ayarlar ızgarası (tunegrid) tanımlama
 # tGrid <- expand.grid(.mtry= seq(1, sqrt(ncol(trainX),50)))
 tGrid <- expand.grid(.mtry=c(10, 50, 250, 500, 1000))

 trControl <- trainControl(
   method = "cv", 
   number = 10, 
   savePredictions = TRUE, 
   classProbs = FALSE, 
   verboseIter = TRUE)

# Modelin tanımlanması
 modelRF <- train(
   x = trainX, y = trainY, 
   method = "rf",
   metric = "RMSE",
   trainControl = trControl,
   tuneGrid = tGrid)

#--------------------------------------------------------------

# Örnek 5.5.4: RF modelinin incelenmesi
# Bağımlılık – Örnek 5.5.3
# 
# Model sonuçlarını göster
 modelRF

# RMSE grafiği
 plot(modelRF, main = "RF Modeli")

 names(modelRF)

 modelRF$results

#--------------------------------------------------------------
#--------------------------------------------------------------

# Örnek 5.5.5: RF modelindeki değişken önemliliklerinin incelenmesi


#--------------------------------------------------------------
#--------------------------------------------------------------

# Örnek 5.5.6: RF modelinin test edilmesi
# Bağımlılık – Kod 5.3, Örnek 5.5.3
#
# Eğitim verisinde tahmin ve başarım
 trainYhat <- predict(modelRF, trainX)
 n <- nrow(trainX) ; k <- ncol(trainX)
 trainMetrics <- modelPerformance(trainY, trainYhat, n, k)
 round(trainMetrics, 2)

# Test verisinde tahmin ve başarım
 testYhat <- predict(modelRF, testX)
 head(testYhat)

# Başarım ölçütleri
 n <- nrow(testX) ; k <- ncol(testX)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

# Gerçek ve tahmin edilen test fenotiplerini karşılaştırma
 plot(testY, testYhat,
   pch=20, col="dodgerblue", cex=0.9, 
   xlab="y", ylab=expression(hat(y)), 
   main = "RF Model Test Gerçek ve Tahmin İlişkisi")
 abline(lm(testYhat~testY), col="red")

#--------------------------------------------------------------

# Örnek 5.5.7: RF modelinin farklı ağaç sayıları ile sınanması
# Bağımlılık – Örnek 5.1.8, 5.5.1
# 
 trControl <- trainControl(
   method = "cv", 
   number = 5, 
   savePredictions = TRUE, 
   classProbs = FALSE, 
   verboseIter = TRUE)
 tGrid <- expand.grid(.mtry=c(250))
 models <- list()
# Farklı ağaç sayıları
 for (nt in c(50, 100, 500, 1000)){
   rfModel <- train(
     x = trainX, y = trainY, 
     method = "rf",
     ntree = nt, 
     metric = "RMSE",
     tuneGrid = tGrid,
     trainControl=trControl)
   nts <- toString(nt)
   models[[nts]] <- rfModel
 }

# Sonuçları karşılaştırma
 rfModels <- resamples(models)
 summary(rfModels)

 dotplot(rfModels)

#--------------------------------------------------------------

# Örnek 5.5.8: OOB ile alternatif bir çözüm
# Bağımlılık – Örnek 5.1.8, 5.5.1
# 
 trControl <- trainControl(method = "none")
 tGrid <- data.frame(
    mtry = 50, 
    min.node.size = 5,
    splitrule="variance")

# Modelin eğitilmesi
 modelOOB <- train(
   Y~., data=trainCombined, 
   method="ranger",
   trControl=trControl,
   importance="permutation",
   tuneGrid=tGrid)

# Test genotiplerinde tahmin ve başarım
 testYhat <- predict(modelOOB, testX)
 head(testYhat)

 n <- nrow(testX); k <- ncol(testX)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

#--------------------------------------------------------------

# Örnek 5.5.9: randomForestSRC paketi ile RF modeli
# Bağımlılık – Örnek 5.1.8
#
 suppressPackageStartupMessages(installed <- require(randomForestSRC))
 if (!installed) {
   install.packages("randomForestSRC", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(randomForestSRC))
 }
 rfData <- as.data.frame(trainCombined)
 modelRF2 <- randomForestSRC::rfsrc(
   Y ~ ., data=rfData, splitrule ="mse",
   ntree = 50, mtry=500, nodesize= 10,
   importance=TRUE)

 modelRF2

 names(modelRF2)

# Önemlilik ve ağaçlara göre hata grafiği
 plot(modelRF2)

# Modelin test edilmesi
 testX <- as.data.frame(testX)
 testYhat <- predict(modelRF2, newdata=testX)$predicted
 head(testYhat)

 n <- nrow(testX); k <- ncol(testX)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)
#--------------------------------------------------------------

# Örnek 5.5.10: XGBoost modelinin eğitilmesi 
# Bağımlılık -  Örnek 5.1.6, 5.1.8, 5.5.1
#
# Örnek 5.1.8'den eğitim ve test verisi oluşturma
 trainX <- trainCombined[,-1]
 trainY <- trainCombined[,1]
 testX <- testCombined[,-1]
 testY <- testCombined[,1]

# Parametre ayarlama ve çapraz doğrulama
 tGrid <- expand.grid(
  nrounds = seq(from=50, to=200, by=10),
  max_depth = c(2, 3, 4, 5),
  eta = c(0.025, 0.05, 0.1, 0.3),
  gamma = 0,
  colsample_bytree = c(0.7, 1),
  min_child_weight = c(1, 2, 2.25),
  subsample = c(1)
 )

 trControl <- trainControl(
  method = "cv",
  number = 5, 
  allowParallel = TRUE,
  verboseIter = FALSE 
 )

 xgbModels <- caret::train(
   x = trainCombined[,-1], y = trainCombined[,1],
   trControl = trControl,
   tuneGrid = tGrid,
   method = "xgbTree",
   #preProc = c("center", "scale"),
   verbosity = 0)

 names(xgbModels)

# En iyi modelin alınması
 modelXGB <- xgbModels$finalModel
 modelXGB

 plot(xgbModels)

#--------------------------------------------------------------

# Örnek 5.5.11: XGBoost modelinin test edilmesi
# Bağımlılık – Kod 5.3, Örnek 5.1.8, 5.5.10
# 
 testYhat <- predict(modelXGB, as.matrix(testCombined[,-1]))

# Başarım ölçütleri
 n <- nrow(testX)
 k <- ncol(testX)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

# Gerçek ve tahmin edilen test fenotiplerini karşılaştırma
 plot(testY, testYhat,
   pch=20, col="dodgerblue", cex=1.0, 
   xlab="y", ylab=expression(hat(y)), 
   main = "XGBoost Modeli Test Gerçek ve Tahmin İlişkisi")
 abline(lm(testYhat ~ testY), col="red")

#--------------------------------------------------------------

# Örnek 5.5.12: SVR modelinin eğitilmesi 
# Bağımlılık -  Örnek 5.1.1, 5.1.8, 5.5.1
#
 suppressPackageStartupMessages(installed <- require(e1071))
 if (!installed) {
   install.packages("e1071", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(e1071))
 }

# SVR modellerinin eğitimi
 svrModels <- tune(svm, Y~., data=as.data.frame(trainCombined),
   kernel="linear",
   ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10)))

# Modellerin maliyet-hata grafiği
 plot(svrModels)

# En iyi modelin alınması
 modelSVR <- svrModels$best.model

 summary(modelSVR)

# Model nesnesi bileşenleri
 names(modelSVR)

#--------------------------------------------------------------

# Örnek 5.5.13: SVR modelinin testi ve başarım ölçütleri
# Bağımlılık -  Kod 5.3, Örnek 5.5.12
#
 testY <- testCombined[,1]
 testX <- testCombined[,-1]

 testYhat <- predict(modelSVR, newdata=testX)
 head(testYhat)

 n <- nrow(testX)
 k <- length(modelSVR$coefs)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

#--------------------------------------------------------------

# Örnek 5.5.14: MARS ile modelleme
# Bağımlılık -  Örnek 5.1.1, 5.1.8, 5.5.1
#
 if(!require(earth)) {
   install.packages('earth', repo='https://cloud.r-project.org');
   require(earth) }

 modelMARS <- earth(Y ~ .,  data = as.data.frame(trainCombined))

 ls(modelMARS)

 summary(modelMARS)

#--------------------------------------------------------------

# Örnek 5.5.15: MARS modeli eşitliğinin farklı biçimleri
# Bağımlılık -  Örnek 5.5.14
#
 summary(modelMARS, style = "max", 
   details = FALSE, digits = 2, fixed.point=TRUE)

#--------------------------------------------------------------

# Örnek 5.5.16: MARS modeli değişken önemlilik sonuçları
# Bağımlılık -  Örnek 5.5.14
#
 impVars <- evimp(modelMARS)
 impVars

 plot(impVars)

#--------------------------------------------------------------

# Örnek 5.5.17: MARS modelinin testi ve başarım ölçütleri
# Bağımlılık -  Kod 5.3, Örnek 5.5.14
#
 testY <- testCombined[,1]
 testX <- testCombined[,-1]
 testYhat <- predict(modelMARS, newdata=testX)
 head(as.numeric(testYhat))

 n <- length(testX)
 k <- length(modelMARS$coefficients)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

#--------------------------------------------------------------

# Örnek 5.5.18: MARS modeline ikili interaksiyonların eklenmesi
# Bağımlılık -  Örnek 5.1.1, 5.1.8, 5.5.1
#
 if(!require(earth)) {
   install.packages('earth', repo='https://cloud.r-project.org');
   require(earth) }

 modelMARS2 <- earth(Y ~ ., degree=2, data = as.data.frame(trainCombined))
 summary(modelMARS2)

#--------------------------------------------------------------

# Örnek 5.5.19: MARS modeli çapraz doğrulamayla parametre ayarlama
# Bağımlılık -  Örnek 5.1.1, 5.1.8, 5.5.1
#
 suppressPackageStartupMessages(installed <- require(caret))
 if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

# Parametre ayarlama ızgarası
 tGrid <- expand.grid(
   nprune = c(10, 15, 50, 100),     #terim sayısı
   degree = c(1:2))   		     #interaksiyon derecesi

 tGrid

 trControl <- trainControl(method="cv", number=5)

# caret ile çapraz doğrulama 
 set.seed(1923)  
 modelMarsCv <- train(
   x = subset(trainCombined, select= -Y),
   y = trainCombined[,1],
   method = "earth",
   metric = "RMSE",
   trControl = trControl,
   tuneGrid = tGrid)

# Çapraz doğrulama tablosu
 cvResults <- modelMarsCv$results
 head(cvResults)

 plot(modelMarsCv, which=1)

#--------------------------------------------------------------

# Örnek 5.5.20: En iyi üst parametre değerleri
# Bağımlılık: Örnek 5.5.19
#
 bestPars <- modelMarsCv$bestTune
 bestPars

#--------------------------------------------------------------

# Örnek 5.5.21: En iyi sonuç için seçilen ölçüte ilişkin istatistikler
# Bağımlılık: Örnek 5.5.19
#
 cvResults[cvResults$degree==bestPars$degree & 
   cvResults$nprune==bestPars$nprune, ]

# Veya daha pratik biçimde aşağıdaki gibi elde edilir.
 cvResults[which.min(cvResults[,"RMSE"]),]

# RMSE için çapraz doğrulama tanımlayıcı istatistikleri
 cvResultsRMSE <- modelMarsCv$results$RMSE
 summary(cvResultsRMSE)

#--------------------------------------------------------------

# Örnek 5.5.22: En iyi MARS modeli 
# Bağımlılık: Örnek 5.5.21
#
 modelMARS <- modelMarsCv$finalModel
 summary(modelMARS, style="max")

# Modelin kaydedilmesi
 save(modelMARS, file = "D:/lmmebook/models/marsmodel.rda")
# Modelin yüklenmesi
 #load("marsmodel.rda")

#--------------------------------------------------------------

# Örnek 5.5.23: reticulate, tensorflow ve kerası kurulması
 if(!require(reticulate)){
   install.packages("reticulate", repo="https://cloud.r-project.org")
 }
 library(reticulate) 

 if(!require(tensorflow)){
   install.packages("tensorflow", repo="https://cloud.r-project.org")
 }
 library(tensorflow) 

 if(!require(keras)){
   install.packages("keras", repo="https://cloud.r-project.org")
 }
 library(keras)

#--------------------------------------------------------------

# Örnek 5.5.24: Minicondanın kurulması
# Bağımlılık – Örnek 5.5.23
#
 pathPython <- miniconda_path()
 pathPython

 install_miniconda(path=pathPython, update=TRUE, force=FALSE)
 # reticulate::install_python() #veya Python kur
 virtualenv_create("r-reticulate", python=pathPython)

#--------------------------------------------------------------

# Örnek 5.5.25: Python tensorflow kütüphanesinin kurulması
# Bağımlılık – Örnek 5.5.23
#
 library(tensorflow)
 tensorflow::install_tensorflow(envname="r-reticulate")

#--------------------------------------------------------------

# Örnek 5.5.26: Python keras kütüphanesinin kurulması
# Bağımlılık – Örnek 5.5.23
#
 library(keras)
 install_keras(envname="r-reticulate")

#--------------------------------------------------------------

# Örnek 5.5.27: Python tensorflow kütüphanesinin kurulum testi
# Bağımlılık – Örnek 5.5.25, 5.5.26
#
 library(tensorflow)
 tf$constant("Merhaba Tensorflow!")

#--------------------------------------------------------------

# Örnek 5.5.28a: keras ile MLP modeli eğitimi
# Bağımlılık – Örnek 5.1.8
#
 if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }

# Eğitim ve test verisi (Maxmin ile normalleştirilmiş)
 trainY <- trainCombinedN[,1]
 trainX <- trainCombinedN[,-1]
 testY <- testCombinedN[,1]
 testX <- testCombinedN[,-1]

# Modelin tanımlanması
 modelMLP1 <- keras_model_sequential()
 modelMLP1 %>%
  layer_dense(units=64, input_shape=dim(trainX)[2], activation="relu") %>%
  layer_dense(units=32, activation="relu") %>%
  layer_dense(units= 1, activation="linear") 

#--------------------------------------------------------------

# Örnek 5.5.28b: Modelin derlenmesi
# Bağımlılık – Örnek 5.5.28a
 modelMLP1 %>% compile(
    loss = "mse",
    optimizer = optimizer_adam(learning_rate=0.001), ,
    metrics = c('mean_absolute_error','mean_squared_error')
 )

 summary(modelMLP1)

#--------------------------------------------------------------

# Örnek 5.5.28c: Modelin eğitilmesi
# Bağımlılık – Örnek 5.5.28b
#
 modelFit <- modelMLP1 %>% fit(
   x = trainX,
   y = trainY,
   epochs = 100,
   validation_split = 0.2,
   shuffle = TRUE,
   batch_size = 16,
   verbose=2
 ) 

# Model eğitim başarımı
 modelFit    

# Model başarım grafiği
 plot(modelFit)

#--------------------------------------------------------------

# Örnek 5.5.28d: Model başarımının değerlendirilmesi
# Bağımlılık – Örnek 5.5.28c
#
 names(modelMLP1)

# Modelin tahmin başarımı
# Eğitim başarımı
 #modelMLP1 %>% fit(trainX, trainY, epochs=50, verbose=0)
 trainMetrics <- modelMLP1 %>% evaluate(trainX, trainY, verbose=0)
 print(trainMetrics)

 testMetrics <- modelMLP1 %>% evaluate(testX, testY, verbose=0)
 print(testMetrics)

# Test verisiyle tahmin işlemi
 testYhat <- modelMLP1 %>% predict(testX) 

 colnames(testYhat) <- "Yhat"
 head(testYhat, 3)

# Model başarımını göster
 n <- nrow(testX)
 k <- count_params(modelMLP1)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

# Gerçek ve tahmin değerlerinin karşılaştırılması
 xvals <- seq(1:length(testYhat))
 plot(xvals, testY, type="l", col="green", 
   xlab="Id", ylab="Normalize Fenotip", lwd=2)
 lines(xvals, testYhat, col="blue", lwd=1)
 legend("bottomright", legend=c("y", expression(hat(y))),
   col=c("green", "blue"), lty=1, cex=0.8)

#--------------------------------------------------------------

# Örnek 5.5.28e: Orijinal değerlerle modelin test edilmesi
# Bağımlılık – Kod 5.2, 5.3, Örnek 5.1.8, 5.5.33c
# 
# Test verisinde tahmin işlemi
 testYhat <- predict(modelMLP1, testX) 

 attr(testYhat, "normalized:shift") <- attr(XYnorm,'normalized:shift')[1]
 attr(testYhat, "normalized:scale") <- attr(XYnorm,'normalized:scale')[1]
 testYhatOrig <- t(back2original(testYhat,"maxmin"))
# Orijinal ölçekteki test tahmini
 head(testYhatOrig, 3)

 testYOrig <- as.matrix(testCombined[,"Y"])
# Model başarımını göster
 n <- length(testYhat)
 k <- count_params(modelMLP1)
 testMetrics <- modelPerformance(testYOrig, testYhatOrig, n, k)
 round(testMetrics, 2)

# Gerçek ve tahmin edilen test fenotiplerini karşılaştırma
 plot(testYOrig, testYhatOrig,
   pch=20, col="dodgerblue", cex=0.9, 
   xlab="y", ylab=expression(hat(y)), 
   main = "MLP Modeli")
 abline(lm(testYhatOrig~testYOrig), col="red")

#--------------------------------------------------------------

# Örnek 5.5.29: Ağın derinleştirilmesi
# Bağımlılık – Kod 5.3, Örnek 5.1.8, 5.5.28a
# 
 modelMLP2 <- keras_model_sequential()
 modelMLP2 %>%
  layer_dense(units=256, input_shape=dim(trainX)[2], activation="relu") %>%
  layer_dense(units=128, activation="relu") %>%
  layer_dense(units=32, activation="relu") %>%
  layer_dense(units= 1, activation="linear") 

 modelMLP2 %>% compile(
    loss = "mse",
    optimizer = optimizer_adam(learning_rate=0.001), 
    metrics = c('mean_absolute_error')
 )

 modelFit <- modelMLP2 %>% fit(
   x = trainX,
   y = trainY,
   epochs = 100,
   validation_split = 0.2,
   shuffle = TRUE,
   batch_size = 32,
   verbose=2
 ) 

# Test verisinde tahmin işlemi
 n <- nrow(testX)
 k <- count_params(modelMLP2)
 testYhat <- predict(modelMLP2, testX)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

#--------------------------------------------------------------

# Örnek 5.5.30: Düzenleyiciler ekleme
# Bağımlılık – Kod 5.3, Örnek 5.1.8, 5.5.28a
# 
 modelMLP3 <- keras_model_sequential()
 modelMLP3 %>%
  layer_dense(units=128, input_shape=dim(trainX)[2], activation="relu") %>%
  layer_dense(units=64, activation="relu", 
     kernel_regularizer=regularizer_l2(0.01)) %>%
  layer_dense(units=32, activation="relu") %>%
  layer_dense(units= 1, activation="linear") 

 modelMLP3 %>% compile(
    loss = "mse",
    optimizer = optimizer_adam(learning_rate=0.001), 
    metrics = c('mean_absolute_error')
 )

 modelFit <- modelMLP3 %>% fit(
   x = trainX,
   y = trainY,
   epochs = 200,
   validation_split = 0.2,
   shuffle = TRUE,
   batch_size = 16,
   verbose=2
 ) 

# Test verisinde tahmin işlemi
 n <- nrow(testX)
 k <- count_params(modelMLP3)
 testYhat <- predict(modelMLP3, testX)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

#--------------------------------------------------------------

# Örnek 5.5.31: Bırakma uygulaması
# Bağımlılık – Kod 5.3, Örnek 5.1.8, 5.5.28a
# 
 modelMLP4 <- keras_model_sequential()
 modelMLP4 %>%
  layer_dense(units=128, input_shape=dim(trainX)[2], activation="relu") %>%
  layer_dropout(rate=0.2)  %>%
  layer_dense(units=64, activation="relu") %>%
  layer_dropout(rate=0.1)  %>%
  layer_dense(units=32, activation="relu") %>%
  layer_dropout(rate=0.1)  %>%
  layer_dense(units= 1, activation="linear") 

 modelMLP4 %>% compile(
    loss = "mse",
    optimizer = optimizer_adam(learning_rate=0.001), 
    metrics = c('mean_absolute_error')
 )
 modelFit <- modelMLP4 %>% fit(
   x = trainX,
   y = trainY,
   epochs = 200,
   validation_split = 0.2,
   shuffle = TRUE,
   batch_size = 32,
   verbose=2
 ) 

# Test verisinde tahmin işlemi
 n <- nrow(testX)
 k <- count_params(modelMLP4)
 testYhat <- predict(modelMLP4, testX)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

#--------------------------------------------------------------

# Örnek 5.5.32: mlpgridsearch.R dosyası içeriği

PARAMS <- flags(
  # Dugumler
  flag_numeric("nodes1", 256),
  flag_numeric("nodes2", 128),
  flag_numeric("nodes3", 64),
  # Birakma oranlari
  flag_numeric("dropout1", 0.4),
  flag_numeric("dropout2", 0.3),
  flag_numeric("dropout3", 0.2),
  # Ogrenme oranlari
  flag_string("optimizer", "rmsprop"),
  flag_numeric("lr_annealing", 0.1),
  # Aktivasyon fonksiyonlari
  flag_string("activation", "relu")
)
modelMLP <- keras_model_sequential() %>%
  layer_dense(units = PARAMS$nodes1, activation = "relu", 
  input_shape = ncol(trainX)) %>%
  layer_batch_normalization() %>%
  layer_dropout(rate = PARAMS$dropout1) %>%
  layer_dense(units = PARAMS$nodes2, activation = PARAMS$activation) %>%
  layer_batch_normalization() %>%
  layer_dropout(rate = PARAMS$dropout2) %>%
  layer_dense(units = PARAMS$nodes3, activation = PARAMS$activation) %>%
  layer_batch_normalization() %>%
  layer_dropout(rate = PARAMS$dropout3) %>%
  layer_dense(units = 1, activation = "linear") %>%
  compile(
    loss = 'mse',
    metrics = c('mean_absolute_error'),
    optimizer = PARAMS$optimizer
  ) %>%
  fit(
    x = testX,
    y = testY,
    epochs = 100,
    batch_size = 32,
    validation_split = 0.2,
    callbacks = list(
      callback_early_stopping(patience = 5),
      callback_reduce_lr_on_plateau(factor = PARAMS$lr_annealing)
    ),
    verbose = FALSE
  )

#--------------------------------------------------------------

# Örnek 5.5.33: MLP modellerinde hiperparametre ayarlama
# Bağımlılık – Örnek 5.5.32
# 
 suppressPackageStartupMessages(installed <- require(tfruns))
 if (!installed) {
   install.packages("tfruns", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(tfruns))
 }
 library(keras)

 setwd("D:/lmmebook/keras/")
# Varsa eski run çıktılarını sil
 runs_dir <- "D:/lmmebook/keras/runs"
 if (file.exists(runs_dir)) {
   unlink(runs_dir,recursive = TRUE)
   cat("Önceki run dosyaları silindi. Yeni run başlıyor...\n")
 }

 runsMLP <- tuning_run("mlpgridsearch.R", 
   flags = list(
    nodes1 = c(64, 128, 256),
    nodes2 = c(64, 128, 256),
    nodes3 = c(64, 128, 256),
    dropout1 = c(0.1, 0.2, 0.3),
    dropout2 = c(0.1, 0.2, 0.3),
    dropout3 = c(0.1, 0.2, 0.3),
    activation = c("relu", "softplus"),
    optimizer = c("rmsprop", "adam", "Adamax", "Nadam"),
    lr_annealing = c(0.1, 0.05)
   ),
   sample=0.005, confirm=F
 )

 PARAMS <- flags(
   # Dugumler
   flag_numeric("nodes1", 256),
   flag_numeric("nodes2", 128),
   flag_numeric("nodes3", 64),
   # Birakma oran .... [TRUNCATED] 

 PARAMS <- flags(
   # Dugumler
   flag_numeric("nodes1", 256),
   flag_numeric("nodes2", 128),
   flag_numeric("nodes3", 64),
   # Birakma oran .... [TRUNCATED] 

 modelMLP <- keras_model_sequential() %>%
   layer_dense(units = PARAMS$nodes1, activation = "relu", 
   input_shape = ncol(trainX)) %>%
   layer_ .... [TRUNCATED] 

#--------------------------------------------------------------

# Örnek 5.5.34: Arama sonuçlarının görüntülenmesi
# Bağımlılık – Örnek 5.5.33
#
 bestIdx <- which.min(runsMLP$metric_val_loss)
 runsMLP[bestIdx,]

# Sonuçların görselleştirilmesi
 bestRunName <- runsMLP[bestIdx,]$run_dir
 view_run(run_dir = bestRunName, viewer = getOption("tfruns.viewer")) 

#--------------------------------------------------------------

# Örnek 5.5.35: Model en iyi parametrelerle eğitme
# Bağımlılık – Örnek 5.5.33
#
 paramsMLP <- run_info(run_dir = bestRunName)
 paramsMLP

# Modeli en iyi parametre kombinasyonu ile eğitme
 modelBestMLP <- keras_model_sequential() %>%
   layer_dense(units = paramsMLP$flag_nodes1, input_shape = ncol(trainX),
     activation = "relu") %>%
   layer_dropout(rate = paramsMLP$flag_dropout1) %>%
   layer_dense(units = paramsMLP$flag_nodes2, 
     activation = paramsMLP$flag_activation) %>%
   layer_dropout(rate = paramsMLP$flag_dropout2) %>%
   layer_dense(units = paramsMLP$flag_nodes3, 
     activation = paramsMLP$flag_activation) %>%
   layer_dropout(rate = paramsMLP$flag_dropout3) %>%
   layer_dense(units = 1, activation = "linear") %>%
 compile(
     loss = 'mse',
     metrics = c('mean_absolute_error'),
     optimizer = paramsMLP$flag_optimizer
 ) 
 modelFit <- modelBestMLP %>% fit(
     x = testX,
     y = testY,
     epochs = 100,
     batch_size = 16,
     validation_split = 0.2,
     verbose = FALSE
 )

 evaluate(modelBestMLP, trainX, trainY) 

 evaluate(modelBestMLP, testX, testY)

#--------------------------------------------------------------

# Örnek 5.5.36a: Modeli kaydetme
 setwd("D:/lmmebook/models")
 save_model_hdf5(modelBestMLP, "modelMLP_100_epochs.h5", overwrite=TRUE)

#--------------------------------------------------------------

# Örnek 5.5.36b: Modeli çalışma alanına yükleme
 setwd("D:/lmmebook/models")
 load_model_hdf5("modelMLP_100_epochs.h5")

 testYhat <- predict(modelBestMLP, testX)
 head(testYhat, 3)

#--------------------------------------------------------------

# Örnek 5.5.37: Tensörler ve dönüşümleri
 library(reticulate)
 snp1 <- c(1, 0, 0, 1)
 snp2 <- c(0, 0, 1, 1)
 snp3 <- c(0, 1, 1, 0)
 snpmat <- cbind(snp1, snp2, snp3)
 snpmat

 tensor1d <- array_reshape(snpmat, dim=c(1,12))
 tensor1d
 tensor2d <- array_reshape(tensor1d, dim=c(4,3))
 tensor2d
 tensor3d <- array_reshape(tensor2d, dim=c(1,4,3))
 tensor3d
 tensor4d <- array_reshape(tensor2d, dim=c(1,4,3,1))
 tensor4d

#--------------------------------------------------------------

# Örnek 5.5.38a: 1D tensörlerle CNN modeli
# Bağımlılık – Örnek 5.1.8, 5.5.23
 library(keras)

# Eğitim ve test verisi (Maxmin ile normalleştirilmiş)
 trainY <- trainCombinedN[,1]
 trainX <- trainCombinedN[,-1]
 testY <- testCombinedN[,1]
 testX <- testCombinedN[,-1]

# Yeniden şekillendirilmiş eğitim ve test verisi ile de çalışılabilir
 trainXa <- array_reshape(trainX, dim=c(dim(trainX)[1], dim(trainX)[2], 1))
 testXa <- array_reshape(testX, dim=c(dim(testX)[1], dim(testX)[2], 1))
 trainYa <- array_reshape(trainY, dim=c(length(trainY), 1, 1))
 testYa <- array_reshape(testY, dim=c(length(testY), 1, 1))

# Model parametreleri
 nFeatures <- dim(trainX)[2] # Tahminci / özellik sayısı
 nStrides <- 3 # Evrişimler arasındaki adım sayısı,kayma genişliği
 nFilters <- 32 # Evrişimlerin sayısı
 nKernels <- 3 # Çekirdek boyutu

 modelCNN1 <- keras_model_sequential() 
 modelCNN1 %>%
   layer_conv_1d(filters=nFilters, kernel_size=nKernels, 
     strides=nStrides, input_shape=c(nFeatures, 1), activation="softplus") %>%
   layer_max_pooling_1d(pool_size=2) %>%
   layer_flatten() %>%
   layer_dense(units=64, activation="relu") %>%
   layer_dense(units=32, activation="softplus") %>%
   layer_dense(units=1)
# Modelin derlenmesi
 modelCNN1 %>% compile(
    loss = "mse",
    optimizer = optimizer_adam(learning_rate=0.001),
    metrics = c('mean_absolute_error','mean_squared_error')
 )
 modelCNN1 %>% summary()
# Modelin eğitilmesi
 modelFit <- modelCNN1 %>% fit(x = trainX,  y = trainY,
   epochs = 200, validation_split = 0.2, shuffle = FALSE,
   batch_size=32, verbose=2) 

 modelFit %>% plot()

#--------------------------------------------------------------

# Örnek 5.5.38b: 1D CNN modeli ile test verisinde tahmin
# Bağımlılık – Kod 5.3, Örnek 5.38a
#
 testYhat <- modelCNN1 %>% predict(testX)
 testYhat <- as.matrix(testYhat)
 head(testYhat,3)

 n <- nrow(testX)
 k <- count_params(modelCNN1)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

# Orijinal veri ölçeklerini belirle
 attr(testYhat, "normalized:shift") <- attr(XYnorm,'normalized:shift')[1]
 attr(testYhat, "normalized:scale") <- attr(XYnorm,'normalized:scale')[1]
 testYhatOrig <- t(back2original(testYhat,"maxmin"))
# Orijinal ölçekteki test tahmini
 head(testYhatOrig, 3)

# Gerçek ve tahmin edilen test fenotiplerini karşılaştırma
 testYOrig <- testCombined[,"Y"]
 plot(testYOrig, testYhatOrig,
   pch=20, col="dodgerblue", cex=0.9, 
   xlab="y", ylab=expression(hat(y)), 
   main = "CNN Modeli")
 abline(lm(testYhatOrig~testYOrig), col="red")

#--------------------------------------------------------------

# Örnek 5.5.38c: Test verisinde çapraz doğrulama
# Bağımlılık – Kod 5.3, Örnek 5.5.38a
# 
 n <- nrow(testX)
 k <- count_params(modelCNN1)
 rep <- 5 # Tekrar sayısı
 testMetrics <- as.data.frame(matrix(NA, nrow=rep+1, ncol=11))
 colnames(testMetrics) <- c("Bias","REL","PCOR","AdjR2", "MAE", 
  "MAPE", "MAAPE", "RMSE", "AIC", "AICc", "BIC")
 rownames(testMetrics) <- c(paste0("CV.",1:rep),"Genel")
 for(i in 1:rep){
   trainIdx <- sample(1:nrow(XYnorm), round(.7*nrow(XYnorm)))
   trainX <- XYnorm[trainIdx, -1]
   trainY <- XYnorm[trainIdx, 1]
   testX <- XYnorm[-trainIdx, -1]
   testY <- XYnorm[-trainIdx, 1]
   modelCNN1 %>% fit(trainX, trainY, epochs=200, verbose=0)
   testYhat <- predict(modelCNN1, testX)
   testMetrics[i,] <- modelPerformance(testY, testYhat, n, k)[1,]
   cat(i,".", "tekrar tamamlandı\n")
 }
 meanPerf <- apply(testMetrics[1:rep,], 2, 
  FUN = function(x){ mean(x[!is.infinite(x)])})
 testMetrics[rep+1,] <- meanPerf
 round(testMetrics, 2)

 boxplot(testMetrics[,c(5:8)], col=rainbow(4), main="CV Hataları")

#--------------------------------------------------------------
# Örnek 5.5.39a. Hiperparametre ayarlama dosyası tanımlama
# (cnngridsearch.R dosyası)
#
PARAMS <- flags(
  flag_numeric("epoch", 100),
  flag_numeric("filter", 32),
  flag_numeric("nodes1", 64),
  flag_numeric("nodes2", 32),
  flag_numeric("stride", 3),
  flag_numeric("kernelsize", 3),
  flag_numeric("poolsize", 2),
  flag_string("optimizer", "rmsprop"),
  flag_numeric("lr_annealing", 0.001),
  flag_string("activation1", "relu"),
  flag_string("activation2", "softplus")
)
modelCNN <- keras_model_sequential() %>% 
  layer_conv_1d(filters=PARAMS$filter, kernel_size=PARAMS$kernelsize, 
    strides=PARAMS$stride, input_shape=c(nFeature, 1)) %>%
   layer_max_pooling_1d(pool_size=PARAMS$poolsize) %>%
   layer_flatten() %>%
   layer_dense(units=PARAMS$nodes1, activation=PARAMS$activation1) %>%
   layer_dense(units=PARAMS$nodes2, activation=PARAMS$activation2) %>%
   layer_dense(units=1) %>% 
  compile(
    loss = 'mse',
    metrics = c('mean_absolute_error'),
    optimizer = PARAMS$optimizer
  ) %>%
  fit(
    x = testX,
    y = testY,
    epochs = PARAMS$epoch,
    batch_size = 32,
    validation_split = 0.2,
    callbacks = list(
      callback_early_stopping(patience = 15),
      callback_reduce_lr_on_plateau(factor = PARAMS$lr_annealing)
    ),
    verbose = FALSE
  )

#--------------------------------------------------------------
# Örnek 5.5.39b: Hiperparametre ayarlamayı çalıştırma
# Bağımlılık – Örnek 5.5.39a
# 
 suppressPackageStartupMessages(installed <- require(tfruns))
 if (!installed) {
   install.packages("tfruns", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(tfruns))
 }
 library(keras)

 setwd("D:/lmmebook/keras/")
# Varsa eski run çıktılarını sil
 runs_dir <- "D:/lmmebook/keras/runs"
 if (file.exists(runs_dir)) {
   unlink(runs_dir,recursive = TRUE)
   cat("Önceki run dosyaları silindi. Yeni run başlıyor...\n")
 }

 nFeature <- dim(trainX)[2]
 runsCNN <- tuning_run("cnngridsearch.R", 
   flags = list(
     epoch = c(100, 200),
     filter = c(16, 32),
     kernelsize = c(3),
     nodes1 = c(32, 64, 128),
     nodes2 = c(32, 64),
     stride = c(3, 5),
     poolsize = c(2, 3),
     activation1 = c("relu", "softplus"),
     activation2 = c("relu", "softplus"),
     optimizer = c("rmsprop", "adam", "nadam"),
     lr_annealing = c(0.1, 0.2)
   ),
   sample=0.05, confirm=F
 )

 runs <- runsCNN[order(runsCNN$metric_val_mean_absolute_error, 
    decreasing = FALSE), ]
 bestRunName <- run_info(run_dir = runs[1,1])

 bestParams <- run_info(run_dir = bestRunName)
 bestParams

 view_run(bestRunName)

#--------------------------------------------------------------

# Örnek 5.5.39c: Modelin en iyi parametrelerle eğitilmesi
# Bağımlılık – Örnek 5.5.39b
# 
# Eğitim ve test verisi (Maxmin ile normalleştirilmiş)
 trainY <- trainCombinedN[,1]
 trainX <- trainCombinedN[,-1]
 testY <- testCombinedN[,1]
 testX <- testCombinedN[,-1]

 modelCNN2 <- keras_model_sequential() 
 modelCNN2 %>%
   layer_conv_1d(filters=bestParams$flag_filter, 
     kernel_size= bestParams$flag_kernelsize, 
     strides= bestParams$flag_stride, input_shape=c(nFeatures, 1),
     activation= bestParams$flag_activation1) %>%
   layer_max_pooling_1d(pool_size=bestParams$flag_poolsize) %>%
   layer_flatten() %>%
   layer_dense(units=bestParams$flag_nodes1, 
     activation=bestParams$flag_activation2) %>%
     layer_dense(units= bestParams$flag_nodes2,
     activation= bestParams$flag_activation3) %>%
   layer_dense(units=1)

# Modelin derlenmesi
 modelCNN2 %>% compile(
    loss = "mse",
    optimizer = bestParams$flag_optimizer,
    metrics = c('mean_absolute_error','mean_squared_error')
 )
 modelCNN2 %>% summary()

# Modelin eğitilmesi
 modelFit <- modelCNN2 %>% fit(
   x = trainX,
   y = trainY,
   epochs = bestParams$flag_epoch,
   validation_split = 0.2,
   shuffle = FALSE,
   batch_size=32,
   verbose=2
 )
 
# Model başarımının incelenmesi

 evaluate(modelCNN2, testX, testY)

#--------------------------------------------------------------

# Örnek 5.5.40a: 2D CNN Modeli
# Bağımlılık – Kod 5.3, Örnek 5.1.1, 5.1.6
#
 library(tensorflow)
 library(keras)

 unique(as.factor(geno))

 nclasses <- length(unique(as.factor(geno)))
 nclasses

 n <- nrow(geno)
 m <- ncol(geno)
 shapedGeno <- matrix(0, nrow=n, ncol=3*m)
 for (i in 1:n){
   tmp1 <- to_categorical(geno[i,], nclasses)
   tmp2 <- t(tmp1)
   shapedGeno[i,] <- array_reshape(tmp2, dim=c(1, 3*m))
 }
 dim(shapedGeno)

 shapedGeno[1:5, 1:10]

 dim(ZF)

 ZG <- G %*% shapedGeno
 dim(ZG)

 # Modellemede kullanılacak X ve y
 ZGMar <- array_reshape(ZG, dim=c(nrow(ZG), m, 3, 1), order="F")
 dim(ZGMar)

 ZGMar[1:5, 1:5, 1, 1]

 X <- ZGMar
 dim(X)

 y <- pheno$GCA

 testIdx <- sample(1:length(y), round(length(y)*0.3))
 trainX <- X[-testIdx, , ,]
 trainX <- array_reshape(trainX, dim=c(dim(trainX)[1], m, 3, 1))
 testX <- X[testIdx, , ,]
 testX <- array_reshape(testX, dim=c(dim(testX)[1], m, 3, 1))
 trainY <- y[-testIdx]
 testY <- y[testIdx]
 dim(trainX)

 dim(testX)

  modelCNN3 <-keras_model_sequential()
  modelCNN3 %>%
  layer_conv_2d(filters=56, activation="relu", kernel_size=c(3,3), 
    kernel_regularizer=regularizer_l2(0.001),
    input_shape=c(dim(trainX)[2], dim(trainX)[3], dim(trainX)[4])) %>%
  layer_max_pooling_2d(pool_size = c(1,1)) %>%
  layer_flatten() %>%
  layer_dense(units = 128, activation = "relu",
    kernel_regularizer=regularizer_l2(0.001)) %>%
  layer_dropout(rate = 0.1) %>%
  layer_dense(units = 64, activation = "relu",   
    kernel_regularizer=regularizer_l2(0.001)) %>%
  layer_dropout(rate = 0.1) %>%
  layer_dense(units = 1)

 modelCNN3 %>% compile(
    loss = "mae",
    optimizer = optimizer_adam(learning_rate=0.001),
    metrics = c("mae"))

 summary(modelCNN3)

 print_dot_callback <- callback_lambda(
   on_epoch_end = function(epoch, logs) {
     if (epoch %% 2 == 0) cat("\n")
        cat(".")
    }
 )

 modelFitCNN3 <-modelCNN3 %>% fit(
   x=trainX, y=trainY,
   epochs=50,
   batch_size=32, 
   validation_split=0.2,
   callbacks=list(print_dot_callback),
   verbose=2)

 plot(modelFitCNN3)

#--------------------------------------------------------------

# Örnek 5.5.40b: Modelin test başarımı
# Bağımlılık – Kod 5.3, Örnek 5.5.40a
#
 testYhat <- modelCNN3 %>% predict(testX)

 n <- length(testYa)
 k <- count_params(modelCNN3)
 testMetrics <- modelPerformance(testY, testYhat, n, k)
 round(testMetrics, 2)

#--------------------------------------------------------------
# BÖLÜM 6 -------------------------------------------------------------------

# Örnek 6.1.1: Normal dağılışlı bir fenotip simülasyonu 
 ngrup <- 5  		#Grup sayısı
 npgrup <- 20		#Her bir gruptaki birey sayısı
 n <- ngrup*npgrup	#Toplam birey sayısı
 sigma2_u <- 0.2 	#Genetik varyans
 sigma2_e <- 0.8 	#Hata varyansı
 mu <- 10		#Genel ortalama
 f1 <- c(0.2, -0.2)	#Sabit etkili faktörün seviye etkileri
 # 
 grup <- c()
 for(i in 1:ngrup) 
    grup <- c(grup, rep(i, npgrup))
 fixef <- vector(length=n)
 set.seed(123)
 idx <- sample(1:n, n/2, replace=FALSE)
 fixef[idx] <- 1	#Sabit faktörün 1. seviyesi 
 fixef[-idx] <- 2	#Sabit faktörün 2. seviyesi 
 df <- as.data.frame(cbind(fixef, grup))
 df$fixef <- as.factor(df$fixef)
 df$grup <- as.factor(df$grup)
 head(df)
 # X matrisinin oluşturulması
 X <- cbind(model.matrix(~ 1, df), model.matrix(~ -1+fixef, df))
 #
 head(X)

 tail(X)

# Z matrisinin oluşturulması
 #Z <- diag(ngrup) %x% rep(1, npgrup)
 Z <- model.matrix(~ -1+grup, df)
 head(Z)

 tail(Z)

 # Sabit etkiler vektörünün oluşturulması
 b <- c(mu, f1)
 b

 # Rastlantısal etkiler vektörünün oluşturulması
 set.seed(123)
 u <- rnorm(ngrup, 0, sqrt(sigma2_u))
 head(u)

 # Hata vektörünün oluşturulması
 e <- rnorm(n, 0, sqrt(sigma2_e))
 head(e)

 # Fenotip vektörünün oluşturulması
 y1 <- X%*%b + Z%*%u + e
 head(y1)

# Normallik kontrolü için histogram ve kutu grafiği
 opar <- par(mfrow=c(1,2))
 hist(y1, prob=TRUE, col="orange", 
  xlab="Fenotip", ylab="Frekans", main="Fenotip histogramı")
 lines(density(y1), col="dodgerblue", lwd=2, lty=2)
 boxplot(y1, col="orange", medcol="dodgerblue",
   xlab="Fenotip", main="Fenotip kutu-bıyık grafiği", horizontal=TRUE)
 par(opar)

# Shapro-Wilk normallik testi uygula
 shapiro.test(y1)

 df$y1 <- y1
 head(df)

#--------------------------------------------------------------

# Örnek 6.1.2: Heterojen hata varyanslı fenotip simülasyonu
# Bağımlılık – Örnek 6.1.1
#
 set.seed(61)
 xbin <- rbinom(n, 1, 0.5)
 head(xbin)

 # Hatalar vektörünün oluşturulması
 set.seed(65)
 betaDisp <- 5
 e <- rnorm(n, 0, sqrt(sigma2_e*exp(betaDisp*xbin)))
 head(e)

# Fenotip vektörünün oluşturulması
 y2 <- X%*%b + Z%*%u + e
 head(y2)

# Fenotipi veri çerçevesine ekle
 df$y2 <- y2
# Normallik testi yap
 shapiro.test(y2)

# Varyans homojenliği testi yap
 bartlett.test(y2~grup, df)

# Doğrusal model tanımla
 model <- lm(y2~grup, df)
# Tanılama grafiklerini çiz
 opar <- par(mfrow=c(2,2))
 hist(y2, col="orange", 
    xlab="y", ylab="Frekans", main="Y Histogramı")
 qqnorm(y2, pch=19, col="blue")
 qqline(y2, lwd=2, col="red")
 plot(model$fitted, scale(model$residuals), 
    col="dodgerblue", pch=19,
    xlab="y-tahmin", ylab="Std.Kalıntılar", main="Y-tahmin vs Kalıntı")
 boxplot(y2~grup, data=df, 
    col=rainbow(5), pch=19,
    xlab="Grup", ylab="y", main="Gruplara göre kutu-bıyık grafiği")
 par(opar)

#--------------------------------------------------------------

# Örnek 6.1.3: Poisson modeli fenotip simülasyonu
# Bağımlılık – Örnek 6.1.1
#
 u <- rgamma(ngrup, 1)
 eta <- exp(X%*%b + Z%*%u)
 y3 <- rpois(length(eta), eta)
 head(y3)

 df$y3 <- y3
 shapiro.test(y3)

 bartlett.test(y3~grup, df)

# Doğrusal model tanımla
 model <- lm(y3~grup, df)
# Tanılama grafiklerini çiz
 opar <- par(mfrow=c(2,2))
 hist(y3, col="orange", 
    xlab="y", ylab="Frekans", main="Y Histogramı")
 qqnorm(y3, pch=19, col="blue")
 qqline(y3, lwd=2, col="red")
 plot(model$fitted, scale(model$residuals), 
    col="dodgerblue", pch=19,
    xlab="y-tahmin", ylab="Std.Kalıntılar", main="Y-tahmin vs Kalıntı")
 boxplot(y3~grup, data=df, 
    col=rainbow(5), pch=19,
    xlab="Grup", ylab="y", main="Gruplara göre kutu-bıyık grafiği")
 par(opar)

#--------------------------------------------------------------

# Örnek 6.1.4: Genotip ve fenotip simülasyonu
# 
 n <- 100 	# Birey sayısı
 m <- 2000	# Markör sayısı
 h2 <- 0.5 	# Kalıtım derecesi

# Markör matrisi oluştur
 set.seed(1)
 M <- matrix(sample(c(0:2), m, replace=TRUE), nrow=n, ncol=m) 
 colnames(M) <- paste0("m", 1:m)
 rownames(M) <- paste0("Ind", 1:n)
 head(M[1:5, 1:10])

# Genotip veri çerçevesi
 geno <- data.frame(marker=1:m, chrom=rep(1,m), pos=1:m*100, 
   t(M), check.names=FALSE)
 geno[1:10,1:8]

# Genotipleri kaydet
 write.table(geno, file="simgeno1.dat", sep="\t",
    col.names=TRUE, row.names=FALSE, quote=FALSE)

# Rastlantısal markör etkileri vektörü oluştur
 u <- rep(0, m) # Markör etkileri vektörü 
 qtl <- TRUE    # Bazı lokusları QTL olarak tanımla
 if(qtl){
   nQtl <- 20  # QTL sayısı
   set.seed(1)
   qtlIdx <- sample(1:m, nQtl, replace=FALSE)  #QTL indisleri
   qtlEff <- 1  #QTL etkileri
   u[qtlIdx] <- qtlEff
 } else {
   set.seed(123)
   u <- rnorm(m) #QTL istenmiyorsa tüm lokuslara rastlantısal etki ata
 }
 head(u)

# Genetik etkiler vektörü
 g <- as.vector(crossprod(t(M), u)) #M'u
# Hatalar vektörü
 e <- rnorm(n, mean=0, sd=sqrt((1-h2)/h2*var(g)))
 #e <- rnorm(n, sd=sqrt(0.5))  # h2 bilinmiyorsa alternatif bir yaklaşım
 y <- g + e
# Binary özellik (istenirse sonraki satır başındaki #'i kaldır)
 #yBin <- ifelse(y > 0, 1, 0)

# Fenotip matrisi
 pheno <- data.frame(ind=paste0("Ind", 1:n), pheno1=y)
 head(pheno)
# Fenotipi kaydet
 write.table(pheno, file="simpheno1.dat", sep="\t",
    col.names=TRUE, row.names=FALSE, quote=FALSE)

# Normallik kontrolü için histogram ve kutu grafiği
 opar <- par(mfrow=c(1,2))
 hist(pheno$pheno1, prob=TRUE, col="orange", 
  xlab="Fenotip", ylab="Frekans", main="Fenotip histogramı")
 lines(density(pheno$pheno1), col="dodgerblue", lwd=2, lty=2)
 boxplot(pheno$pheno1, col="orange", medcol="dodgerblue",
   xlab="Fenotip", main="Fenotip kutu-bıyık grafiği", horizontal=TRUE)
 par(opar)

# Shapiro-Wilk normallik testi uygula
 shapiro.test(pheno$pheno1)

#--------------------------------------------------------------

# Örnek 6.2.1: Simer paketinin kurulması/çalışma alanına yüklenmesi
# Paketin kurulması (CRAN)
 suppressPackageStartupMessages(installed <- require(simer))
 if (!installed) {
   install.packages("simer", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(simer))
 }
# Paketin kurulması (GitHub)
 suppressPackageStartupMessages(installed <- require(simer))
 if (!installed) {
   install.packages("devtools", repos="https://cloud.r-project.org")  
   devtools::install_github("xiaolei-lab/SIMER")
   suppressPackageStartupMessages(require(simer))
 }

#--------------------------------------------------------------

# Örnek 6.2.2: Genel parametrelerin tanımlanması
# Bağımlılık – Örnek 6.2.1
 SP <- param.global(
     seed.sim = 123,
     replication = 1, 
     pop.gen = 1, 
     out.geno.gen = 1, 
     out.pheno.gen = 1, 
     useAllGeno = FALSE, 
     ncpus = 6, 
     out = "simer",
     outpath = getwd(),
     out.format = "numeric", #"plink" de olabilir
     verbose = TRUE
 )

 str(SP)

#--------------------------------------------------------------

# Örnek 6.2.3: MAP verisi oluşturma
# Bağımlılık – Örnek 6.2.2
#
 set.seed(123)
 popMap <- generate.map(
    pop.marker = 1e+04, 	# Markör sayısı
    num.chr = 29, 		# Kromozom sayısı
    len.chr = 1.5e+08)		# Kromozom uzunluğu (bp)

 head(popMap)

 tail(popMap)

#--------------------------------------------------------------

# Örnek 6.2.4: Açımlama (annotation) parametreleri
# Bağımlılık – Örnek 6.2.3
#
 set.seed(123)
 SP <- param.annot(
   SP = SP, 
   pop.map = popMap,		#MAP nesnesi adı
   #species = "cattle", 	#MAP için tür adı
   pop.marker = 10000, 
   num.chr = 18, 
   len.chr = 1.5e+08, 
   qtn.model = "A",		#QTN modeli
   qtn.num = list(tr1 = 10),	#QTN sayısı
   qtn.index = NULL, 		#QTN indisleri vektörü adı
   qtn.dist = list(tr1 = "norm"), #QTN dağılışı (norm, beta, gamma, geom)
   qtn.var = list(tr1 = 1), 	#QTN varyansı
   qtn.prob = list(tr1 = NA),  # QTN olasılık
   qtn.shape1 = list(tr1 = NA), 
   qtn.shape2 = list(tr1 = NA), 
   qtn.ncp = list(tr1 = NA), 
   qtn.spot = FALSE, 
   len.block = 5e+07, 
   maf = NULL, 
   recom.spot = FALSE, 
   range.hot = 4:6, 
   range.cold = 1:5
 )

 str(SP)

#--------------------------------------------------------------

# Örnek 6.2.5a: Genotip simulasyon parametreleri
# Bağımlılık – Örnek 6.2.4
#
 SP <- param.geno(
    SP = SP, 
    pop.marker = 1e4,  # Markör sayısı
    pop.ind = 1e2, 	# Birey/örneklem sayısı
    rate.mut = list(qtn=1e-8, snp=1e-4), # Mutasyon oranı
    incols = 1,
    cld = FALSE
 )

 str(SP)

#--------------------------------------------------------------

# Örnek 6.2.5b: Genotipin dış dosyadan okunması
# Bağımlılık – Örnek 6.2.4
#
# Sayısal genotip matrisi dosyasından okuma
 genoFile <- "D:/lmmebook/simulation/CattleGenoNumeric.dat"
 popGeno1 <- read.table(genoFile)

# Sayısal büyük matris dosyasından okuma
 genoBig <- "D:/lmmebook/simulation/Cattle.geno.desc"
 popGeno2 <- bigmemory::attach.big.matrix(genoBig)

# Rastlantısal olarak Genotip matrisi oluşturma
 popGeno3 <- matrix(sample(0:2), nrow = 1e4, ncol = 1e2, byrow = TRUE)

# Hazır genotip matrisini pop.geno'ya atama
 SP <- param.geno(
    SP = SP, 
    pop.geno = popGeno1, 
    rate.mut = list(qtn=1e-8, snp=1e-4), # Mutasyon oranı
    incols = 1,
    cld = FALSE
 )

#--------------------------------------------------------------

# Örnek 6.2.6: Çevre faktörlerine ait parametreler
# Bağımlılık – Örnek 6.2.5
 popEnv <- list(
   F1 = list( # fixed effect 1
      level = c("a1", "a2"),
      effect = list(tr1 = c(30, -30))
   ),
   F2 = list( # fixed effect 2
      level = c("b1", "b2", "b3"),
      effect = list(tr1 = c(5, 10, -15))
   ),
   C1 = list( # covariate 1
      level = c(70, 80, 90),
      slope = list(tr1 = 1.5)
   ),
   R1 = list( # random effect 1
     level = c("g1", "g2", "g3"),
     ratio = list(tr1 = 0.1)
   )
 )

 str(popEnv)

#--------------------------------------------------------------

# Örnek 6.2.7: Fenotipik parametreler
# Bağımlılık – Örnek 6.2.6
 SP <- param.pheno(
   SP = SP,
   pop.env = popEnv,
   pop.ind = 100,
   pop.rep = 1, # Tekrarlanan kayıt sayısı
   pop.rep.bal = TRUE, # Tekrarlan kayıtların denge durumu
   phe.type = list(tr1 = "continuous"), #Kantitatif sürekli fenotip
   phe.model = list(tr1 = "T1 = A + F1+ F2+ C1+ R1 + E"), 
   phe.h2A = list(tr1 = 0.3), #Kalıtım derecesi
   phe.h2D = list(tr1 = NA), 
   phe.h2GxG = list(tr1 = NULL), 
   phe.h2GxE = list(tr1 = NULL),
   phe.h2PE = list(tr1 = NA), 
   phe.var = list(tr1 = NA), 
   phe.corA = NULL, 
   phe.corD = NULL, 
   phe.corGxG = NULL, 
   phe.corPE = NULL, 
   phe.corE = NULL
 )
           
 str(SP)

#--------------------------------------------------------------

# Örnek 6.2.8: Simülasyonları gerçekleştir
# Bağımlılık – Örnek 6.2.4, 6.2.5, 6.2.7
#
# Açımlama simülasyonu
 SP <- annotation(SP=SP, verbose = TRUE)

# Genotip simülasyonu
 SP <- genotype(SP=SP, verbose = TRUE)

# Fenotip simülasyonu
 SP <- phenotype(SP=SP, verbose = TRUE)

str(SP

#--------------------------------------------------------------

# Örnek 6.2.9: MAP verisinin incelenmesi ve kaydedilmesi
# Bağımlılık – Örnek 6.2.8
#
 map <- SP$map$pop.map

 dim(map)

 map[1:10, ]

 SP$map$qtn.index

 map[SP$map$qtn.index$tr1,]

 qtnSnp <- map[!is.na(map$QTN1_A),"SNP"]
 qtnSnp

# Map verisinin dosyaya kaydedilmesi
 outPath <- "D:/lmmebook/simulation"
 setwd(outPath)
 write.table(map, file="simmap.dat", sep="\t", 
    row.names=F, col.names=T, quote=F)

#--------------------------------------------------------------

# Örnek 6.2.10: Genotip verisinin incelenmesi ve kaydedilmesi
# Bağımlılık – Örnek 6.2.8
#
 geno <- SP$geno$pop.geno$gen1 

 dim(geno)

 geno[1:10, 1:10]

# Büyük matristen (0, 1, 2) kodunda matrise dönüştürme
 geno1 <- geno.cvt1(geno)  

 dim(geno1)

 geno1[1:10, 1:10]

# (0, 1, 2) kodlu matristen (0, 1) kodunda matrise dönüştürme
 geno2 <- geno.cvt2(geno1)  
 geno2[1:10, 1:10]

# Genotip matrisinin diske kaydedilmesi
 outPath <- "D:/lmmebook/simulation"
 setwd(outPath)
 write.table(geno1, file="simgeno1.dat", row.names=F, col.names=F, sep="\t")
 write.table(geno2, file="simgeno2.dat", row.names=F, col.names=F, sep="\t")

#--------------------------------------------------------------

# Örnek 6.2.11: Fenotip verisinin incelenmesi ve kaydedilmesi
# Bağımlılık – Örnek 6.2.8
#
 pheno <- SP$pheno$pop$gen1  
 dim(pheno)

 str(pheno)

 pheno[1:10, 1:12]

# Fenotip matrisinin diske kaydedilmesi
 outPath <- "D:/lmmebook/simulation"
 setwd(outPath)
 write.table(pheno[,1:12], file="simpheno.dat", sep="\t",
    row.names=F, col.names=T, quote=F)

#--------------------------------------------------------------

# Örnek 6.2.12: Fenotip verisinin incelenmesi ve kaydedilmesi
# Bağımlılık – Örnek 6.2.2, 6.2.8
#
# Sayısal formatta kayıt
 SP <- param.global(
    SP=SP,
    out = "simer",
    outpath = "D:/lmmebook/simulation",
    out.format = "numeric", 
    verbose = TRUE
 )
 simer(SP)

# PLINK formatında kayıt
 SP <- param.global(
    SP=SP,
    out = "simer",
    outpath = "D:/lmmebook/simulation",
    out.format = "plink", 
    verbose = TRUE
 )
 simer(SP)

#--------------------------------------------------------------

# Örnek 6.2.13: Seleksiyon uygulaması
# Bağımlılık – Örnek 6.2.8
#
# Seleksiyon parametreleri
 SP <- param.sel(
  SP = SP, 
  sel.single = "ind"
)

# Seleksiyon uygula
 SP <- selects(SP)
 str(SP)

#--------------------------------------------------------------

# Örnek 6.2.14: Çiftleştirme/üreme uygulaması
# Bağımlılık – Örnek 6.2.12
#
# Çiftleşme parametreleri
 SP <- param.reprod(
   SP = SP, 
   reprod.way = "randmate",
   sex.rate = 0.5,
   prog = 1
 )

# Çiftleştirme/üreme uygula
 SP <- reproduces(SP)
 str(SP)

#--------------------------------------------------------------

# Örnek 6.2.15: Kısa yoldan tüm parametreleri tanımlama
# Bağımlılık – Örnek 6.2.1
#
# Parametreleri tanımla
 SP2 <- param.simer(
    pop.ind = 1e2,
    pop.marker = 1e4,
    qtn.num = list(tr1 = 10), 
    sel.single = "ind", 
    reprod.way = "randmate",
    seed.sim = 123,
    ncpus = 6) 

# Simülasyon yap
 SP2 <- simer(SP2)

# Simulasyonu görüntüle
 str(SP2)

#--------------------------------------------------------------

# Örnek 6.2.16: Çok sayıda popülasyon oluşturma
# Bağımlılık – Örnek 6.2.1, 6.2.7
#
# Populasyon sayısı
 nPop <- 3
 # Populasyon listesini oluştur
 SPs <- rep(list(NULL), nPop)
 for (i in 1:nPop) {
   # Popülasyon parametrelerini tanımla
   SP <- param.simer(
      pop.ind = 200,
      pop.marker = 10000,
      pop.env = popEnv,
      replication = i,
      seed.sim = i, 
      out = "simer",
      outpath = "D:/lmmebook/simulation",
      out.format = "plink"
   )
   # i. popülasyonu oluştur
   SPs[[i]] <- simer(SP)
 }

#--------------------------------------------------------------

# Örnek 6.2.17: Parametrelerin tanımlanması
#
# Paketin kurulması (GitHub)
 suppressPackageStartupMessages(installed <- require(simer))
 if (!installed) {
   install.packages("devtools", repos="https://cloud.r-project.org")  
   devtools::install_github("xiaolei-lab/SIMER")
   suppressPackageStartupMessages(require(simer))
 }

# Sonuçlar klasörü
 outPath <- "D:/lmmebook/simulation"
 if (!file.exists(outPath))
    dir.create(outPath)
 seed <- 28 #RNG tohum sayısı
 
# Boyutların tanımlanması
 nInd <- 100  		# Birey sayısı
 nSnp <- 5000 		# SNP sayısı
 nChr <- 29 		# Kromozom sayısı
 nChrLen <- 1.5e+08	# Kromozom uzunluğu
 nQtl <- 10 		# Simüle edilecek QTL sayısı

# Map parametreleri
 popMap <- generate.map(
   pop.marker = nSnp,
   num.chr = nChr,
   len.chr = nChrLen)

# Açımlama parametreleri
 # Açımlama parametreleri
 SP <- param.annot(
    pop.map = popMap, 
    qtn.var = list(tr1=1, tr2=1, tr3=1, tr4=1),
    qtn.num = list(tr1=nQtl, tr2=nQtl, tr3=nQtl, tr4=nQtl),
    qtn.model = "A")

# Kurucu popülasyonu oluştur
# İlk %10 hayvan erkek, diğerleri dişi
 pop <- generate.pop(pop.ind = nInd, from = 1, ratio = 0.1)
 table(pop$sex)

# Genotipik parametreler
 SP <- param.geno(
    SP = SP, 
    pop.marker = nSnp, 
    pop.ind = nInd)

# Çevre faktörlerine ait parametreler
 popEnv <- list(
   F1 = list( # fixed effect 1
      level = c("a1", "a2"),
      effect = list(tr1 = c(30, -30))
   ),
   F2 = list( # fixed effect 2
      level = c("b1", "b2", "b3"),
      effect = list(tr1 = c(5, 10, -15))
   ),
   C1 = list( # covariate 1
      level = c(70, 80, 90),
      slope = list(tr1 = 1.5)
   ),
   R1 = list( # random effect 1
     level = c("g1", "g2", "g3"),
     ratio = list(tr1 = 0.1)
   )
 )

# Fenotipik simülasyon parametreleri
 SP <- param.pheno(
    SP = SP, 
    #pop = pop,
    phe.type = list(
      tr1 = "continuous", 
      tr2 = "continuous", 
      tr3 = "continuous", 
      tr4 = "continuous"),
    phe.model = list(
      tr1 = "Trait1 = A + F1 + F2 + C1 + R1 + E", 
      tr2 = "Trait2 = A + F1 + F2 + C1 + R1 + E", 
      tr3 = "Trait3 = A + F1 + F2 + C1 + R1 + E",     
      tr4 = "Trait4 = A + F1 + F2 + C1 + R1 + E"),
    phe.h2A = list(tr1=0.10, tr2=0.30, tr3=0.5, tr4=0.05),  #Kalıtım dereceleri
    phe.corA = matrix(c( # Eklemeli genetik korelasyon matrisi
     1, 0, 0, 0,
     0, 1, 0, 0,
     0, 0, 1, 0,
     0, 0, 0, 1),
    nrow=4, ncol=4) # Korelasyon yok, ilişkisiz
 )

#--------------------------------------------------------------

# Örnek 6.2.18: Simülasyonu gerçekleştir
# Bağımlılık – Örnek 6.2.17
#
 set.seed(seed)
 SP <- annotation(SP)

 set.seed(seed)
 SP <- genotype(SP)

 set.seed(seed)
 SP <- phenotype(SP)

#--------------------------------------------------------------

# Örnek 6.2.19: Simülasyon sonuçları – MAP verisi
# Bağımlılık – Örnek 6.2.18
#
# Map  yapısı ve içeriği 
 map <- SP$map$pop.map

 dim(map)

 map[1:10, ]

# Simer'in rastlantısal olarak atadığı QTN etki değerleri 
 map[!is.na(map$QTN1_A), c(1:5, 6)]

 map[!is.na(map$QTN2_A), c(1:5, 7)]

 map[!is.na(map$QTN3_A), c(1:5, 8)]

 map[!is.na(map$QTN4_A), c(1:5, 9)]
# Simer'in rastlantısal olarak belirlediği QTL indisleri
 qtnIdx1 <- SP$map$qtn.index$tr1
 qtnIdx2 <- SP$map$qtn.index$tr2
 qtnIdx3 <- SP$map$qtn.index$tr3
 qtnIdx4 <- SP$map$qtn.index$tr4

# Etkileri değiştir
 a <- 1 #QTN değeri, NULL atanmışsa Simer'in atadığı etkiler kullanılır
 if(!is.null(a)){
   avec1 <- c(seq(-2*a, 2*a, length.out=6)) #Senaryo 1
   avec2 <- rep(a, 6) #Senaryo 2
   avec3 <- rep(-a, 6) #Senaryo 3
   avec4 <- rep(2*a, 6) #Senaryo 4
   pvec <- rep(1/6, 6)
   # Senaryo uygula
   map$QTN1_A[qtnIdx1] <- sample(avec1, nQtl, replace=TRUE, prob=pvec)
   map$QTN2_A[qtnIdx2] <- sample(avec3, nQtl, replace=TRUE, prob=pvec)
   map$QTN3_A[qtnIdx3] <- sample(avec4, nQtl, replace=TRUE, prob=pvec)
   map$QTN4_A[qtnIdx4] <- sample(avec4, nQtl, replace=TRUE, prob=pvec)
   # Genotip ve fenotipi yeni QTN'lerle güncelle
   SP <- genotype(SP)
   SP <- phenotype(SP)
 }

# QTL indisleri tablosu
 qtlIdx <- cbind(qtnIdx1, qtnIdx2, qtnIdx3, qtnIdx4)
 colnames(qtlIdx) <- c("Trait1", "Trait2", "Trait3", "Trait4")
 qtlIdx

 qtlVals <- cbind(
    map$QTN1_A[qtnIdx1], 
    map$QTN2_A[qtnIdx2],
    map$QTN3_A[qtnIdx3], 
    map$QTN4_A[qtnIdx4])
 colnames(qtlVals) <- colnames(qtlIdx)
 qtlVals

# QTN verisini kaydet
 setwd(outPath)
 write.table(qtlIdx, file="multitraitQtlIdx.dat", sep="\t",
   row.names=F, col.names=T, quote=F)
 write.table(qtlVals, file="multitraitQtlVals.dat", sep="\t",
   row.names=F, col.names=T, quote=F)

#--------------------------------------------------------------

# Örnek 6.2.20: Simülasyon sonuçları – Genotip ve fenotip verisi
# Bağımlılık – Örnek 6.2.18
#
# Genotip (SNP) matrisi
 dim(geno)

 geno[1:10, 1:10]

# Genotipi 0,1,2 kodlu matrise dönüştür
 geno1 <- simer::geno.cvt1(geno)   
 geno1[1:10, 1:10]

# Fenotip matrisi
 bpheno <- SP$pheno$pop$gen1  
 dim(bpheno)

 str(bpheno)

 bpheno[1:10, 1:11]

 pheno <- bpheno[,c(1,8:11)]
 head(pheno)

# Verileri dosyaya kaydet
 setwd(outPath)
 write.table(map, file="multitraitmap.dat", sep="\t",
   row.names=F, col.names=T, quote=F)
 write.table(geno1, file="multitraitgeno.dat", sep="\t",
   row.names=F, col.names=F, quote=F)
 write.table(pheno, file="multitraitpheno.dat", sep="\t",
   row.names=F, col.names=T, quote=F)

#--------------------------------------------------------------

# Örnek 6.2.21: Simülasyon sonuçları – Genotip ve fenotip verisi
# Bağımlılık – Örnek 6.2.18
#
# Büyük matris ve PLINK formatında kaydet
# Sayısal formatta kayıt
 S1 <- SP
 SP <- param.simer(
    SP = S1,
    out = "multitrait",
    outpath = outPath,
    out.format = "numeric", 
    verbose = TRUE
 )
 simer(SP)

# PLINK formatında kayıt
 SP <- param.global(
    SP = S1,
    out = "multitrait",
    outpath = outPath,
    out.format = "plink", 
    verbose = TRUE
 )
 simer(SP
#--------------------------------------------------------------
#--------------------------------------------------------------
# Örnek 6.3.1: AlphaSimR paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(AlphaSimR))
 if (!installed) {
   install.packages("AlphaSimR", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AlphaSimR))
 }

#--------------------------------------------------------------

# Örnek 6.3.2: Kurucu popülasyonu map verisini tanımlama 1
# Bağımlılık – Örnek 6.3.1
#
 set.seed(123)
 founderPop <- quickHaplo(
    nInd=25, 
    nChr=29, 
    segSites=100,
    genLen=1.5e+04, 
    ploidy=2L, 
    inbred=FALSE)
 genMap <- getGenMap(object=founderPop)
 head(genMap)

#--------------------------------------------------------------

# Örnek 6.3.3: Kurucu popülasyon map verisini tanımlama 2
# Bağımlılık – Örnek 6.3.1
#
# Kurucu popülasyon map verisini oluştur
 set.seed(123)
 founderPop <- runMacs(
   nInd = 25,
   nChr = 29,
   segSites = NULL,
   inbred = FALSE,
   species = "GENERIC",
   split = NULL,
   ploidy = 2L,
   manualCommand = NULL,
   manualGenLen = NULL,
   nThreads = NULL
 )

#--------------------------------------------------------------

# Örnek 6.3.4: Kurucu popülasyon map verisini inceleme
# Bağımlılık – Örnek 6.3.3
#
# Özetleme
 show(founderPop)

# MapPop türü nesnenin slotları
 slotNames(founderPop)

# Genetik MAP
 genMap <- getGenMap(object=founderPop)
 head(genMap)

# Aşağıdaki seçenekler newPop ile popülasyon oluşturunca kullanılabilir
 #genMap2 <- getGenMap(object = founderPop, sex = "A")
 #genMap3 <- getGenMap(object = founderPop, sex = "F")

# Haplotipin çekilmesi
 founderHaplo <- pullSegSiteHaplo(founderPop)

 dim(founderHaplo)

 founderHaplo[1:6, 1:5]

 founderHaplo[47:50, (ncol(founderHaplo)-4): ncol(founderHaplo)]

 # Genotipin çekilmesi
 founderGeno <- pullSegSiteGeno(founderPop)
 dim(founderGeno)

 founderGeno[1:3, 1:5]

 founderGeno[23:25, (ncol(founderHaplo)-4): ncol(founderHaplo)]

#--------------------------------------------------------------

# Örnek 6.3.5: Popülasyonu oluştur ve özetle
# Bağımlılık – Örnek 6.3.3
#
# Simülasyon parametrelerini ayarla
 set.seed(123)
 SP <- SimParam$new(founderPop)
 SP$addTraitA(
   nQtlPerChr = 10,
   mean = 500,
   var = 250)
 SP$addSnpChip(nSnpPerChr=5)
 #SP$traitNames <- (c("GCA"))
 SP$setSexes("yes_sys")
 SP$setVarE(h2 = 0.4)

# Populasyonu oluştur
 pop <- newPop(rawPop=founderPop, simParam=SP)

# Populasyonu özetle
 show(pop)

#--------------------------------------------------------------

# Örnek 6.3.6: Popülasyonu incele
# Bağımlılık – Örnek 6.3.5
#
 slotNames(pop)

# Birey kimlikleri
 pop@id

# Bireylerin cinsiyetleri
 pop@sex

# Kromozomlara göre lokus sayıları
 pop@nLoci

# Fenotip
 pop@pheno

# Fenotipik varyans
 var(pop@pheno)

# Fenotip grafikleri
 opar <- par(mfrow=c(1,2))
 hist(pop@pheno, col="orange", 
    xlab="Fenotipik Değer", main="Fenotip histogramı")
 boxplot(pop@pheno ~ pop@sex, col=c("pink","skyblue"),
    xlab="Cinsiyet", ylab="Fenotip")
 par(opar)

# Soyağacını elde etme
 pedPop <- getPed(pop)
 head(pedPop)

#--------------------------------------------------------------

# Örnek 6.3.7: Genotip ve fenotipi çekme
# Bağımlılık – Örnek 6.3.5
#
# Özel lokuslar
 custGeno <- pullMarkerGeno(
   pop=pop, 
   markers=c("1_1","1_2", "2_1","2_2"),
   asRaw = FALSE, 
   simParam = SP)

 custGeno[1:5, ]

# Belli bir kromozomun tüm lokusları
 chrom <- "1"
 chroGeno <- pullMarkerGeno(
   pop=pop, 
   markers=paste0(chrom,"_", 1:pop@nLoci[1]),
   asRaw = FALSE, 
   simParam = SP)
 chroGeno[1:5,1:10]

# Tüm kromozomlar ve lokuslar
 fullGeno <- pullMarkerGeno(
   pop=pop, 
   markers=genMap$id,
   asRaw = FALSE, 
   simParam = SP)

 dim(fullGeno)

 fullGeno[1:5,1:10]

#SNP lokusları genotipi
 snpGeno <- pullSnpGeno(
   pop=pop,
   snpChip = 1, 
   chr = NULL, 
   asRaw = FALSE, 
   simParam = SP)

 dim(snpGeno)

 snpGeno[1:5, 1:8]

# QTL lokusları genotipi
 qtlGeno <- pullQtlGeno(
   pop=pop,
   trait = 1, 
   chr = NULL, 
   asRaw = FALSE, 
   simParam = SP)

 dim(qtlGeno)

 qtlGeno[1:5, 1:8]

# Fenotipin çekilmesi
 phe <- pheno(pop)
 head(phe)

#--------------------------------------------------------------

# Örnek 6.3.8: Genetik parametreleri hesapla
# Bağımlılık – Örnek 6.3.5
#
 genicVarA(pop)

 # Eklemeli epistatistik varyans
 genicVarAA(pop)

 # Dominans genetik varyans
 genicVarD(pop)

 # Genotipik (toplam genetik) varyans
 genicVarG(pop)

#--------------------------------------------------------------

# Örnek 6.3.9: Genetik parametreleri hesapla
# Bağımlılık – Örnek 6.3.5
#
# Tüm parametrelerin elde edilmesi 
 genParams <- genParam(pop, simParam=SP)

# Genetik parametre listesinin elemanları
 names(genParams)

# Listedeki parametrelere erişim
 varA <- genParams$varA
 varA

#--------------------------------------------------------------

# Örnek 6.3.10: Bireysel seleksiyon uygula
# Bağımlılık – Örnek 6.3.3
#
# Erkeklerin seleksiyonu
 popSelM <- selectInd(
    pop = pop,
    nInd = 2,
    trait = 1,
    use = "pheno",
    sex = "M",
    selectTop = TRUE,
    returnPop = TRUE,
    candidates = NULL,
    simParam = SP
 )
 popSelM@id

#Dişilerin seleksiyonu
 popSelF <- selectInd(
    pop = pop,
    nInd = 10,
    trait = 1,
    use = "pheno",
    sex = "F",
    selectTop = TRUE,
    returnPop = TRUE,
    candidates = NULL,
    simParam = SP
 )
 popSelF@id

# Birleşik seçilenler populasyonu
 popSel <- c(popSelM, popSelF)
 popSel@id

#--------------------------------------------------------------

# Örnek 6.3.11: Rastlantısal çiftleştirme
# Bağımlılık – Örnek 6.3.10
#
 popPro <- randCross(
    pop = popSel,
    nCrosses = 10,
    nProgeny = 1,
    balance = TRUE,
    parents = NULL,
    ignoreSexes = FALSE,
    simParam = SP
 )

 popPro@id

 getPed(popPro)

#--------------------------------------------------------------

# Örnek 6.3.12: Seleksiyon + Rastlantısal çiftleştirme
# Bağımlılık – Örnek 6.3.10
#
 popPro <- selectCross(
    pop = pop, 
    nMale = 2, 
    nFemale = 10,
    nProgeny = 1, 
    nCrosses = 10,
    balance = TRUE,
    trait = 1,
    selectTop = TRUE,
    use = "pheno", 
    simParam = SP)
#--------------------------------------------------------------

# Örnek 6.3.13: İkinci generasyon için seleksiyon
# Bağımlılık – Örnek 6.3.11
#
# Ebeveyn ve yavru popülasyonunu birleştir
 popComb <- c(popSel, popPro)
 popComb@id

# Birleşik popülasyonda erkekleri seç
 popSelM <- selectInd(
    pop = popComb,
    nInd = 2,
    trait = 1,
    use = "pheno",
    sex = "M",
    selectTop = TRUE,
    returnPop = TRUE,
    candidates = NULL,
    simParam = SP
 )
# Birleşik popülasyonda dişileri seç
 popSelF <- selectInd(
    pop = popComb,
    nInd = 10,
    trait = 1,
    use = "pheno",
    sex = "F",
    selectTop = TRUE,
    returnPop = TRUE,
    candidates = NULL,
    simParam = SP
 )
# Seçilenlerden popülasyon olutur
 popSel <- c(popSelM, popSelF)
 popSel@id

#--------------------------------------------------------------

# Örnek 6.3.14: Seleksiyon ve üreme simülasyonu
# Bağımlılık – Örnek 6.3.1
#
# Senaryo parametrelerini atama
 k <- 5 # Generasyon sayısı
 mRate <- 1e-6 #Mutasyon oranı, NULL atanırsa uygulanmaz
 aRate <- 0.05 #Kayıp oranı, NULL atanırsa uygulanmaz
 fRate <- 0.8  #Seçilen dişilerin oranı
 mRate <- 0.2  #Seçilen erkeklerin oranı
 indTrait <- 1 # Özellik numarası
 nPro <- 1 # Çiftleşme başına yavru sayısı
 selCrit <- "bv"  #Seleksiyon kriteri: "gv","bv", "ebv", "pheno"
 nPopSize <- 50 # Populasyonda birey sayısı
 t1h2 <- 0.4   # Özellik 1 kalıtım derecesi
 t1Mean <- 0.4   # Özellik 1 ortalama
 t1Var <- 0.4   # Özellik 1 varyans

# Generasyonlar listesi oluşturma
 rm(pop)
 pop <- vector(mode="list", length=k)

# Başlangıç/temel popülasyon
 print("Başlangıç popülasyonu oluşturuluyor.")
 set.seed(123)
 founderPop <- runMacs(
   nInd = nPopSize,
   nChr = 29,
   segSites = NULL,
   inbred = FALSE,
   species = "GENERIC",
   split = NULL,
   ploidy = 2L,
   manualCommand = NULL,
   manualGenLen = NULL,
   nThreads = NULL
 )

# Simülasyon parametrelerini ayarla
 set.seed(123)
 SP <- SimParam$new(founderPop)
 SP$addTraitA(
   nQtlPerChr = 10,
   mean = t1Mean,
   var = t1Var)
 SP$addSnpChip(nSnpPerChr=5)
 #SP$traitNames <- (c("GCA"))
 SP$setSexes("yes_sys")
 SP$setVarE(h2 = t1h2)

# 1. popülasyonu oluştur
 pop[[1]] <- newPop(
   founderPop,
   simParam = SP)    

# Ebeveyn bireylerin sayıları
 nMale <- round(length(pop[[1]]@sex=="M")*mRate)
 nFemale <- round(length(pop[[1]]@sex=="F")*fRate)

# Seleksiyon ve çiftleştirme uygulaması
 print("Generasyonlar oluşturuluyor...")
 for (generation in 2:k) {
    print(paste0("---", generation, ". generasyon oluşturuluyor."))
    popSelM <- selectInd(
      pop = pop[[generation-1]],
      nInd = nMale,
      trait = indTrait,
      use = selCrit,
      sex = "M",
      selectTop = TRUE,
      returnPop = TRUE,
      candidates = NULL,
      simParam = SP)
   popSelF <- selectInd(
      pop = pop[[generation-1]],
      nInd = nFemale,
      trait = indTrait,
      use = selCrit,
      sex = "F",
      selectTop = TRUE,
      returnPop = TRUE,
      candidates = NULL,
      simParam = SP)
# Seçilenler popülasyonu oluşturma
   popSel <- c(popSelM, popSelF)
# Seçilenleri çiftleştirme
   set.seed(123)
   popPro <- randCross(
      pop = popSel,
      nCrosses = nFemale,
      nProgeny = nPro,
      simParam = SP)
# Mutasyon uygulama
   if(!is.null(mRate)){
      popPro <- mutate(
        pop = popPro, 
        mutRate = mRate,
        returnPos = FALSE, 
        simParam = SP)
   }
# Doğum sonrası kayıplar
   if(!is.null(aRate)){
     popPro <- attrition(popPro, p = aRate)
   }  
   pop[[generation]] <- popPro
 }

#--------------------------------------------------------------

# Örnek 6.3.15: Generasyonlardaki değişmeleri incele
# Bağımlılık – Örnek 6.3.14
#
 vect <- numeric(k)
 h2 <- vA <- vP <- mG <- mP <- vect
 for(i in 1:k){
   vA[i] <- varA(pop[[i]])
   vP[i] <- varP(pop[[i]])
   mG[i] <- meanG(pop[[i]])
   mP[i] <- meanP(pop[[i]])
   h2[i] <- varA(pop[[i]])/varP(pop[[i]])
 }
 print("Generasyonlara popülasyon parametreleri")
 genGain <- data.frame(Gen=1:k, meanG=mG, meanP=mP, VarA=vA, VarP=vP, h2=h2)
 genGain

# Generasyonlara göre varyanslar ve ortalamalar
 opar <- par(mar = c(5, 4, 4, 4) + 0.3, mfrow=c(1,2)) 
 plot(vP, type="b", col="red", lwd=2, ylim=c(0,max(vP)), 
   xlab="Generasyonlar", ylab="Varyans", 
   main="Generasyonlara Göre Varyanslar")
 lines(vA, type="b", col="orange", lwd=2, lty=2,)
 legend("bottomleft",legend=c("Var(P)", "Var(A)", "h2"), 
   lty=c(1:3), col=c("red","orange", "blue"))
 par(new = TRUE)                             
 plot(h2, type="b", col = "blue", lwd=2, lty=3, 
   axes = FALSE, xlab = "", ylab = "")
 axis(side = 4, at = pretty(range(h2)))      
 mtext("h2", side = 4, line = 3)
 plot(mG, type="b", col="red", lwd=2, 
   xlab="Generasyonlar", ylab="G ort.", 
   main="Generasyonlara Göre Ortalamalar")
 legend("bottomright", legend=c("G Ort.", "P Ort."), 
   lty=c(1,2), col=c("red","blue"))
 par(new = TRUE)                             
 plot(mP, type="b", col = "blue", lwd=2, lty=2, 
   axes = FALSE, xlab = "", ylab = "")
 axis(side = 4, at = pretty(range(mP)))      
 mtext("P Ort.", side = 4, line = 3)      
 par(opar)

#--------------------------------------------------------------

# Örnek 6.3.16: Farklı populasyonları birleştirme
# Bağımlılık – Örnek 6.3.14
#
# Reduce ile birleştir
 mPop1 <- Reduce(c, pop)
 isPop(mPop1)

# mergePops ile birleştir
 #popList <- list(pop[[1]], pop[[3]]) #Belli popülasyonları birleştir
 popList <- pop #Tüm popülasyonları birleştir
 mPop2 <- mergePops(popList)
 isPop(mPop2)

# newMegaPop ile birleştir
 mPop3 <- newMegaPop(pop[[1]], pop[[2]], pop[[3]], pop[[4]], pop[[5]])
 isPop(mPop3)

 isMegaPop(mPop3)

 mPop3@pops[[1]]

#--------------------------------------------------------------

# Örnek 6.3.17: Genotip ve fenotip çekme
# Bağımlılık – Örnek 6.3.14
#
# Genotip verisi
 geno <- pullSegSiteGeno(mPop1, simParam=SP)
 dim(geno)

# Fenotip verisi (Yöntem 1)
 pheno <- data.frame(
   id = mPop1@id,
   Trait1 = mPop1@pheno[,1],
   stringsAsFactors = FALSE)
 dim(pheno)

# Fenotip verisi (Yöntem 2)
 pheno <- pheno(mPop1)
 pheno <- data.frame(
   id = mPop1@id,
   Trait1 = pheno,
   stringsAsFactors = FALSE)

 dim(pheno)

#--------------------------------------------------------------

# Örnek 6.3.18: Soyağacı oluşturma
# Bağımlılık – Örnek 6.3.14
#
# Soyağacı çekme (Yöntem 1)
 ped <- data.frame(
   id = mPop1@id,
   mother = mPop1@mother,
   father = mPop1@father,
   stringsAsFactors = FALSE)
 #ped$mother[ped$mother == 0] <- NA
 #ped$father[ped$father == 0] <- NA

 head(ped)

 tail(ped)

# Soyağacı çekme (Yöntem 2)
 ped <- getPed(mPop1)

 head(ped)

 tail(ped)

#--------------------------------------------------------------

# Örnek 6.3.19: Simülasyon sonuçlarını kaydetme
# Bağımlılık – Örnek 6.3.14, 6.3.17, 6.3.18
#
 write.table(geno, file="D:/lmmebook/simulation/ASRsimgeno.dat", 
   sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)  
 write.table(pheno, file="D:/lmmebook/simulation/ASRsimpheno.dat", 
   sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)  
 write.table(ped, file="D:/lmmebook/simulation/ASRsimpedigree.dat",
   sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)

# PLINK dosyaları oluştur
 writePlink(
   pop = mPop1,
   baseName="ASRsim",
   traits = 1,
   use = "pheno",
   snpChip = 1,
   useQtl = TRUE,
   simParam = SP)

#--------------------------------------------------------------

# Örnek 6.3.20: Popülasyonu tanımla ve oluştur
# Bağımlılık – Örnek 6.3.1
#
# Simülasyon parametrelerini ayarla
 popSize <- 100		#Populasyondaki birey sayısı
 nChroms <- 29		#Kromozom sayısı
 nSegs <- 100		#Ayrılma bölgeleri sayısı

# Kurucu popülasyon map'ini oluştur
 set.seed(123)
 founderPop <- runMacs(
   nInd = popSize, nChr = nChroms, segSites = nSegs,
   inbred = FALSE, species = "GENERIC",  ploidy = 2L)

# Özellikleri ve özelliklere ait parametreleri tanımla
 set.seed(123)
 SP <- SimParam$new(founderPop)
 SP$addTraitADEG(nQtlPerChr = 10, mean = 50, var = 49)
 SP$addTraitADEG(nQtlPerChr = 20, mean = 30, var = 25)
 SP$addTraitAD(nQtlPerChr = 20, mean = 100, var = 64)
 SP$setVarE(h2 = c(0.2, 0.4, 0.6))
 SP$addSnpChip(nSnpPerChr=5)
 SP$setSexes("yes_rand")

# Kurucu populasyonu oluştur
 pop <- newPop(rawPop = founderPop, simParam=SP)

#--------------------------------------------------------------

# Örnek 6.3.21: Kurucu popülasyona ait simülasyon verileri
# Bağımlılık – Örnek 6.3.20
#
# Fenotip verisi
 pheno <- pheno(pop)
 dim(pheno)

 head(pheno)

# Genotip verisi
 geno <- pullSegSiteGeno(pop)
 geno[1:5, 1:10]

# QTL verisi
 qtlGeno <- pullQtlGeno(pop)
 dim(qtlGeno)

 ped <- getPed(pop)
 ped <- data.frame(ped, sex=pop@sex)
 ped[20:25, ]

# Verilerin PLINK formatında kaydedilmesi
 for(i in 1:SP$nTraits){
   writePlink(
     pop = pop,
     baseName=paste0("ASRsimmulti",i),
     traits = i,
     use = "pheno",
     snpChip = 1,
     useQtl = TRUE,
     simParam = SP)
 }

#--------------------------------------------------------------

# Örnek 6.3.22: Popülasyon genetik parametreleri
# Bağımlılık – Örnek 6.3.20
#
 genParams <- genParam(pop=pop, simParam=SP)
 names(genParams)

 genParams$mu

 genParams$genicVarA

 genParams$genicVarAA

 genParams$genicVarD

 genParams$genicVarG

 genParams$varA

 genParams$varAA

 genParams$varD

 genParams$varG

#--------------------------------------------------------------

# Örnek 6.3.23. Ekonomik ağırlıklar vektörü ve indeks seleksiyonu
# Bağımlılık – Örnek 6.3.20
#
# Ekonomik ağırlıklar vektörü 
 econWt <- c(1, 1, 1)

# Smith-Hazel ağırlıkları vektörü
 SHWt <- smithHazel(econWt, varG(pop), varP(pop))

# Erkekleri seç
 popSelM <- selectInd(
    pop = pop,
    nInd = 5,
    sex = "M",
    trait = selIndex, # İndeks seleksiyonu
    b = SHWt,         # Smith-Hazel indeksini kullanarak seleksiyon
    simParam = SP)
 popSelM@id

# Dişileri seç
 popSelF <- selectInd(
    pop = pop,
    nInd = 40,
    sex = "F",
    trait = selIndex,
    b = SHWt, 
    simParam = SP)
 head(popSelF@id, 5)

# Seçilen ebeveyn populasyonu
 popSel <- mergePops(list(popSelM, popSelF))
 head(popSel@id, 10)

# Seçilenleri çiftleştir
 popPro <- randCross(popSel, nCrosses=40, nProgeny=1, simParam=SP)
 head(getPed(popPro))

#--------------------------------------------------------------

# Örnek 6.3.24. Islah/Genetik ilerleme simülasyonu
# Bağımlılık – Örnek 6.3.20
#
# Simülasyon parametreleri
 k <- 5			# Generasyon sayısı
 nMale <- 2		# Seçilen erkek sayısı
 nFemale <- 40		# Seçilen dişi sayısı
 nProgeny <- 1		# Çiftleşme başına yavru sayısı
 mRate <- 1e-06		# Mutasyon oranı (NULL ise atlanır)
 aRate <- 0.05		# Kayıp oranı (NULL ise atlanır)

# k generasyon için bir mega popülasyon oluştur
 megaPop <- vector(mode="list", length=k)
# Kurucu popülasyonu 1. popülasyonu ata
 megaPop[[1]] <- newPop(founderPop, simParam = SP)  
# Kalan generasyonlar için eleksiyon ve çiftleştirme uygula
 print("Generasyon popülasyonları oluşturuluyor...")
 for (generation in 2:k) {
    print(paste0("---", generation, ". generasyon oluşturuluyor."))
    popPro <- selectCross(
      pop = megaPop[[generation-1]], 
      nMale = nMale, 
      nFemale = nFemale,
      nProgeny = nProgeny, 
      nCrosses = nProgeny*nFemale,
      balance = TRUE,
      trait = selIndex,
      selectTop = TRUE,
      use = "bv",
      b = SHWt,  
      simParam = SP)
# Mutasyon uygula
   if(!is.null(mRate)){
      popPro <- mutate(
        pop = popPro, 
        mutRate = mRate,
        returnPos = FALSE, 
        simParam = SP)
   }
# Bazı bireyleri çıkar
   if(!is.null(aRate)){
     popPro <- attrition(popPro, p = aRate)
   }  
   megaPop[[generation]] <- popPro
 }

#--------------------------------------------------------------

# Örnek 6.3.25: Generasyonlara göre değişmeleri incele
# Bağımlılık – Örnek 6.3.24
#
# Populasyon parametreleri
 parMat <- matrix(NA, nrow=k, ncol=3)
 colnames(parMat) <- c("Trait1","Trait2","Trait3")
 rownames(parMat) <- c(paste0("Gen.", 1:k))
 h2 <- vA <- vP <- mG <- mP <- parMat
 rm(parMat)
 for(i in 1:k){
   vA[i,] <- genicVarA(megaPop[[i]])
   vP[i,] <- diag(varP(megaPop [[i]]))
   mG[i,] <- meanG(megaPop [[i]])
   mP[i,] <- meanP(megaPop [[i]])
   h2[i,] <- genicVarA(megaPop[[i]])/ diag(varP(megaPop [[i]]))
 }

 print("Generasyonlara popülasyon parametreleri")
 vA

 vP

 mG

 mP

 h2

# Generasyonlara göre varyanslar ve ortalamalar
 opar <- par(mar = c(5, 4, 4, 4) + 0.3, mfrow=c(3,2)) 
 matplot(vA, col=c(2,4,6), type="l", lwd=2, lty=2:4,
   xlab="Generasyonlar", ylab="Var(G)", main="Genetik Varyasyon")
 axis(side = 1, at = 1:k)      
 matplot(vP, col=c(2,4,6), type="l", lwd=2, lty=2:4,
   xlab="Generasyonlar", ylab="Var(P)", main="Fenotipik Varyasyon")
 axis(side = 1, at = 1:k)  
 matplot(mG, col=c(2,4,6), type="l", lwd=2, lty=2:4,
   xlab="Generasyonlar", ylab="G Ort.", main="Genetik Ortalama")
 axis(side = 1, at = 1:k)          
 matplot(mP, col=c(2,4,6), type="l", lwd=2, lty=2:4,
   xlab="Generasyonlar", ylab="P Ort.", main="Fenotipik Ortalama")
 axis(side = 1, at = 1:k)          
# Generasyonlara göre kalıtım derecesi
 matplot(h2, col=c(2,4,6), type="l", lwd=2, lty=2:4,
   xlab="Generasyonlar", ylab="h2", main="h2")
 axis(side = 1, at = 1:k)  
 plot(NULL ,xaxt='n',yaxt='n',bty='n',ylab='',xlab='', xlim=0:1, ylim=0:1)
 legend("topleft",legend=c("Trait 1", "Trait 2", "Trait 3"), 
   lty=c(2:4), lwd=c(2,2,2), col=c(2,4,6), bty='n', horiz=F,
   cex=2.0)   
 par(opar)

#--------------------------------------------------------------
#--------------------------------------------------------------
# Örnek 6.4.1: Soyağacı ve süt verimi simülasyonu
# Paketin kurulması ve R çalışma alanına yüklenmesi
 suppressPackageStartupMessages(is_installed <- require(pedSimulate))
 if (!is_installed) {
   install.packages("pedSimulate", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pedSimulate))
 }
# Simülasyon
 simped <- simulatePed(
  F0size = 6, #Kurucu popülasyon birey sayısı (çift sayı)
  Va0 = 9,  # Eklemeli genetik varyans
  Ve = 36,  # Hata varyansı (kuşaklar boyunca sabit)
  littersize = 1, #Dişi başına yavru sayısı
  ngen = 4, #Kuşak (generasyon) sayısı
  mort.rate = 0.05, #Ölüm oranı (Sütten kesim-ilk çiftleşme yaşı arası ölenler)
  overlap.s = 1, 
  overlap.d = 0,
  f.rate = 0.8,
  m.rate = 0.5,
  fsel = "P",
  msel = "PA",
  f.order = "fsel",
  m.order = "msel"
 )

#--------------------------------------------------------------

# Örnek 6.4.2: Simülasyon verisinin yapısı
 str(simped)

 head(simped)

#--------------------------------------------------------------

# Örnek 6.4.3: Simülasyon verisinde hayvan gruplarını inceleme
 hs_mate_finder(simped) #Üvey kardeşler

 fs_mate_finder(simped) #Öz kardeşler

 pp_mate_finder(simped) #Eşlerin bulunması

#--------------------------------------------------------------

# Örnek 6.4.4: Simülasyon verisine yeni kuşak ekleme
 simped2 <- appendPed(
   ped=simped,
   Va0 = 9,
   Ve = 36,
   littersize = 1,
   ngen = 2,
   mort.rate = 0.05,
   overlap.s = 1,
   overlap.d = 0,
   f.rate = 0.8,
   m.rate = 0.5,
   fsel = "R",
   msel = "R",
   f.order = "P",
   m.order = "PA"
 )

 head(simped2)

#--------------------------------------------------------------

# Örnek 6.4.5: Simülasyon verisine SNP ekleme
 nSNP <- 10
 AF <- runif(nSNP, 0.01, 0.99)
 mut.rate <- runif(nSNP, 0, 10^-5)
 simgeno <- simulateGen(simped2, AF, mut.rate)

 str(simgeno)

 head(simgeno)

#--------------------------------------------------------------

# Örnek 6.4.6: Soyağacı ve özellik verisi simulasyonu
 suppressPackageStartupMessages(is_installed <- require(pedSimulate))
 if (!is_installed) {
   install.packages("pedSimulate", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pedSimulate))
 }

 set.seed(11)
 simdata <- simulatePed(
  F0size = 6,
  Va0 = 3120000,
  Ve = 419000,
  littersize = 1,
  ngen = 10,
  mort.rate = 0.05,
  overlap.s = 1,
  overlap.d = 0,
  f.rate = 0.8,
  m.rate = 0.5,
  fsel = "P",
  msel = "PA",
  f.order = "fsel",
  m.order = "msel"
 )

 head(simdata)

#--------------------------------------------------------------




